*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I_Diabetes_Prediction $ 11;
label I_Diabetes_Prediction = 'Into: Diabetes_Prediction' ;
*** Target Values;
array REG2DRF [3] $11 _temporary_ ('PREDIABETES' 'NO DIABETES' 'DIABETES' );
label U_Diabetes_Prediction = 'Unnormalized Into: Diabetes_Prediction' ;
length U_Diabetes_Prediction $ 11;
*** Unnormalized target values;
array REG2DRU[3] $ 11 _temporary_ ('prediabetes'  'no diabetes'  
'diabetes   ' );

drop _DM_BAD;
_DM_BAD=0;

*** Check Age for missing values ;
if missing( Age ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check BMI for missing values ;
if missing( BMI ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for CholCheck ;
drop _2_0 ;
if missing( CholCheck ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( CholCheck , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _2_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _2_0 = 1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for DiffWalk ;
drop _3_0 ;
if missing( DiffWalk ) then do;
   _3_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( DiffWalk , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _3_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _3_0 = -1;
   end;
   else do;
      _3_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Education ;
drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
*** encoding is sparse, initialize to zero;
_4_0 = 0;
_4_1 = 0;
_4_2 = 0;
_4_3 = 0;
_4_4 = 0;
if missing( Education ) then do;
   _4_0 = .;
   _4_1 = .;
   _4_2 = .;
   _4_3 = .;
   _4_4 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Education , BEST. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '3'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _4_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _4_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _4_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 <= '5'  then do;
         if _dm12 = '4'  then do;
            _4_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _4_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '6'  then do;
            _4_0 = -1;
            _4_1 = -1;
            _4_2 = -1;
            _4_3 = -1;
            _4_4 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _4_0 = .;
      _4_1 = .;
      _4_2 = .;
      _4_3 = .;
      _4_4 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GenHlth ;
drop _6_0 _6_1 _6_2 _6_3 ;
*** encoding is sparse, initialize to zero;
_6_0 = 0;
_6_1 = 0;
_6_2 = 0;
_6_3 = 0;
if missing( GenHlth ) then do;
   _6_0 = .;
   _6_1 = .;
   _6_2 = .;
   _6_3 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GenHlth , BEST. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '3'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _6_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _6_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _6_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 = '4'  then do;
         _6_3 = 1;
         _dm_find = 1;
      end;
      else do;
         if _dm12 = '5'  then do;
            _6_0 = -1;
            _6_1 = -1;
            _6_2 = -1;
            _6_3 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _6_0 = .;
      _6_1 = .;
      _6_2 = .;
      _6_3 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HeartDiseaseorAttack ;
drop _7_0 ;
if missing( HeartDiseaseorAttack ) then do;
   _7_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HeartDiseaseorAttack , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _7_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _7_0 = -1;
   end;
   else do;
      _7_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HighBP ;
drop _8_0 ;
if missing( HighBP ) then do;
   _8_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HighBP , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _8_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _8_0 = -1;
   end;
   else do;
      _8_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HighChol ;
drop _9_0 ;
if missing( HighChol ) then do;
   _9_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HighChol , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _9_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _9_0 = -1;
   end;
   else do;
      _9_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HvyAlcoholConsump ;
drop _10_0 ;
if missing( HvyAlcoholConsump ) then do;
   _10_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HvyAlcoholConsump , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _10_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _10_0 = -1;
   end;
   else do;
      _10_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Income ;
drop _11_0 _11_1 _11_2 _11_3 _11_4 _11_5 _11_6 ;
*** encoding is sparse, initialize to zero;
_11_0 = 0;
_11_1 = 0;
_11_2 = 0;
_11_3 = 0;
_11_4 = 0;
_11_5 = 0;
_11_6 = 0;
if missing( Income ) then do;
   _11_0 = .;
   _11_1 = .;
   _11_2 = .;
   _11_3 = .;
   _11_4 = .;
   _11_5 = .;
   _11_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Income , BEST. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _11_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _11_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _11_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _11_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '6'  then do;
         if _dm12 = '5'  then do;
            _11_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '6'  then do;
               _11_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '7'  then do;
            _11_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '8'  then do;
               _11_0 = -1;
               _11_1 = -1;
               _11_2 = -1;
               _11_3 = -1;
               _11_4 = -1;
               _11_5 = -1;
               _11_6 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _11_0 = .;
      _11_1 = .;
      _11_2 = .;
      _11_3 = .;
      _11_4 = .;
      _11_5 = .;
      _11_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for NoDocbcCost ;
drop _13_0 ;
if missing( NoDocbcCost ) then do;
   _13_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( NoDocbcCost , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _13_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _13_0 = -1;
   end;
   else do;
      _13_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Sex ;
drop _16_0 ;
if missing( Sex ) then do;
   _16_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Sex , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _16_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _16_0 = -1;
   end;
   else do;
      _16_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Stroke ;
drop _18_0 ;
if missing( Stroke ) then do;
   _18_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Stroke , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _18_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _18_0 = -1;
   end;
   else do;
      _18_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.0182856146;
   _P1 = 0.8453637803;
   _P2 = 0.1363506052;
   goto REG2DR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0  _LP1;
_LP0 = 0;
_LP1 = 0;

***  Effect: Age ;
_TEMP = Age ;
_LP0 = _LP0 + (   -0.01360861398783 * _TEMP);
_LP1 = _LP1 + (   -0.13904940821186 * _TEMP);

***  Effect: BMI ;
_TEMP = BMI ;
_LP0 = _LP0 + (   -0.02124534073709 * _TEMP);
_LP1 = _LP1 + (   -0.08546723388129 * _TEMP);

***  Effect: CholCheck ;
_TEMP = 1;
_LP0 = _LP0 + (    0.16726735123867) * _TEMP * _2_0;
_LP1 = _LP1 + (    0.54634690975395) * _TEMP * _2_0;

***  Effect: DiffWalk ;
_TEMP = 1;
_LP0 = _LP0 + (    0.06301491704601) * _TEMP * _3_0;
_LP1 = _LP1 + (    0.04485070803036) * _TEMP * _3_0;

***  Effect: Education ;
_TEMP = 1;
_LP0 = _LP0 + (   -3.13021802752476) * _TEMP * _4_0;
_LP1 = _LP1 + (   -0.28088655623317) * _TEMP * _4_0;
_LP0 = _LP0 + (    0.73253982550598) * _TEMP * _4_1;
_LP1 = _LP1 + (   -0.02854225493055) * _TEMP * _4_1;
_LP0 = _LP0 + (    0.73373285946867) * _TEMP * _4_2;
_LP1 = _LP1 + (    0.02910542354092) * _TEMP * _4_2;
_LP0 = _LP0 + (     0.4986576281654) * _TEMP * _4_3;
_LP1 = _LP1 + (    0.09502789078573) * _TEMP * _4_3;
_LP0 = _LP0 + (    0.57008245791557) * _TEMP * _4_4;
_LP1 = _LP1 + (    0.03835503475903) * _TEMP * _4_4;

***  Effect: GenHlth ;
_TEMP = 1;
_LP0 = _LP0 + (    0.41668501098508) * _TEMP * _6_0;
_LP1 = _LP1 + (    1.12998884902075) * _TEMP * _6_0;
_LP0 = _LP0 + (    0.23069064152524) * _TEMP * _6_1;
_LP1 = _LP1 + (    0.45303710296222) * _TEMP * _6_1;
_LP0 = _LP0 + (   -0.02653020106411) * _TEMP * _6_2;
_LP1 = _LP1 + (    -0.1954684495443) * _TEMP * _6_2;
_LP0 = _LP0 + (   -0.13222445116199) * _TEMP * _6_3;
_LP1 = _LP1 + (   -0.59922368894814) * _TEMP * _6_3;

***  Effect: HeartDiseaseorAttack ;
_TEMP = 1;
_LP0 = _LP0 + (    0.15561770084742) * _TEMP * _7_0;
_LP1 = _LP1 + (    0.12788735157199) * _TEMP * _7_0;

***  Effect: HighBP ;
_TEMP = 1;
_LP0 = _LP0 + (    0.18684088726483) * _TEMP * _8_0;
_LP1 = _LP1 + (    0.35733461845051) * _TEMP * _8_0;

***  Effect: HighChol ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.02824912635089) * _TEMP * _9_0;
_LP1 = _LP1 + (    0.29145687195987) * _TEMP * _9_0;

***  Effect: HvyAlcoholConsump ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.30708839922835) * _TEMP * _10_0;
_LP1 = _LP1 + (   -0.38011464060961) * _TEMP * _10_0;

***  Effect: Income ;
_TEMP = 1;
_LP0 = _LP0 + (    0.15778293305467) * _TEMP * _11_0;
_LP1 = _LP1 + (   -0.18687182394203) * _TEMP * _11_0;
_LP0 = _LP0 + (     0.0343460239371) * _TEMP * _11_1;
_LP1 = _LP1 + (    -0.1132408493128) * _TEMP * _11_1;
_LP0 = _LP0 + (   -0.01546120224168) * _TEMP * _11_2;
_LP1 = _LP1 + (   -0.09320502540344) * _TEMP * _11_2;
_LP0 = _LP0 + (   -0.15755712313758) * _TEMP * _11_3;
_LP1 = _LP1 + (   -0.05711549480238) * _TEMP * _11_3;
_LP0 = _LP0 + (   -0.04993651206845) * _TEMP * _11_4;
_LP1 = _LP1 + (    0.00882801180485) * _TEMP * _11_4;
_LP0 = _LP0 + (    0.14732860184646) * _TEMP * _11_5;
_LP1 = _LP1 + (    0.10491057882464) * _TEMP * _11_5;
_LP0 = _LP0 + (   -0.00841217762127) * _TEMP * _11_6;
_LP1 = _LP1 + (    0.11223829757781) * _TEMP * _11_6;

***  Effect: NoDocbcCost ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.24234625601677) * _TEMP * _13_0;
_LP1 = _LP1 + (    0.01666193162047) * _TEMP * _13_0;

***  Effect: Sex ;
_TEMP = 1;
_LP0 = _LP0 + (    0.07263047415055) * _TEMP * _16_0;
_LP1 = _LP1 + (    0.12017115019494) * _TEMP * _16_0;

***  Effect: Stroke ;
_TEMP = 1;
_LP0 = _LP0 + (    0.18608071743581) * _TEMP * _18_0;
_LP1 = _LP1 + (    0.06561381013606) * _TEMP * _18_0;

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1 _P2;
drop _LPMAX;
_LPMAX= 0;
_LP0 =    -1.36576898344398 + _LP0;
if _LPMAX < _LP0 then _LPMAX = _LP0;
_LP1 =     6.12169615316004 + _LP1;
if _LPMAX < _LP1 then _LPMAX = _LP1;
_LP0 = exp(_LP0 - _LPMAX);
_LP1 = exp(_LP1 - _LPMAX);
_LPMAX = exp(-_LPMAX);
_P2 = 1 / (_LPMAX + _LP0 + _LP1);
_P0 = _LP0 * _P2;
_P1 = _LP1 * _P2;
_P2 = _LPMAX * _P2;

REG2DR1:


*** Posterior Probabilities and Predicted Level;
label P_Diabetes_Predictionprediabetes = 
'Predicted: Diabetes_Prediction=prediabetes' ;
label P_Diabetes_Predictionno_diabetes = 
'Predicted: Diabetes_Prediction=no diabetes' ;
label P_Diabetes_Predictiondiabetes = 
'Predicted: Diabetes_Prediction=diabetes' ;
P_Diabetes_Predictionprediabetes = _P0;
_MAXP = _P0;
_IY = 1;
P_Diabetes_Predictionno_diabetes = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
P_Diabetes_Predictiondiabetes = _P2;
if (_P2 >  _MAXP + 1E-8) then do;
   _MAXP = _P2;
   _IY = 3;
end;
I_Diabetes_Prediction = REG2DRF[_IY];
U_Diabetes_Prediction = REG2DRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;
