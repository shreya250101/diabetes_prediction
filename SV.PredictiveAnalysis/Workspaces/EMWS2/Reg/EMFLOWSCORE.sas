*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I_Diabetes_Prediction $ 11;
label I_Diabetes_Prediction = 'Into: Diabetes_Prediction' ;
*** Target Values;
array REGDRF [3] $11 _temporary_ ('PREDIABETES' 'NO DIABETES' 'DIABETES' );
label U_Diabetes_Prediction = 'Unnormalized Into: Diabetes_Prediction' ;
length U_Diabetes_Prediction $ 11;
*** Unnormalized target values;
array REGDRU[3] $ 11 _temporary_ ('prediabetes'  'no diabetes'  
'diabetes   ' );

*** Generate dummy variables for Diabetes_Prediction ;
drop _Y ;
label F_Diabetes_Prediction = 'From: Diabetes_Prediction' ;
length F_Diabetes_Prediction $ 11;
%DMNORMCP( Diabetes_Prediction , F_Diabetes_Prediction )
if missing( Diabetes_Prediction ) then do;
   _Y = .;
end;
else do;
   if F_Diabetes_Prediction = 'NO DIABETES'  then do;
      _Y = 1;
   end;
   else if F_Diabetes_Prediction = 'DIABETES'  then do;
      _Y = 2;
   end;
   else if F_Diabetes_Prediction = 'PREDIABETES'  then do;
      _Y = 0;
   end;
   else do;
      _Y = .;
   end;
end;

drop _DM_BAD;
_DM_BAD=0;

*** Check Age for missing values ;
if missing( Age ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check BMI for missing values ;
if missing( BMI ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for AnyHealthcare ;
drop _1_0 ;
if missing( AnyHealthcare ) then do;
   _1_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( AnyHealthcare , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _1_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _1_0 = 1;
   end;
   else do;
      _1_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for CholCheck ;
drop _2_0 ;
if missing( CholCheck ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( CholCheck , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _2_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _2_0 = 1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for DiffWalk ;
drop _3_0 ;
if missing( DiffWalk ) then do;
   _3_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( DiffWalk , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _3_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _3_0 = -1;
   end;
   else do;
      _3_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Education ;
drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
*** encoding is sparse, initialize to zero;
_4_0 = 0;
_4_1 = 0;
_4_2 = 0;
_4_3 = 0;
_4_4 = 0;
if missing( Education ) then do;
   _4_0 = .;
   _4_1 = .;
   _4_2 = .;
   _4_3 = .;
   _4_4 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Education , BEST. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '3'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _4_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _4_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _4_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 <= '5'  then do;
         if _dm12 = '4'  then do;
            _4_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _4_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '6'  then do;
            _4_0 = -1;
            _4_1 = -1;
            _4_2 = -1;
            _4_3 = -1;
            _4_4 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _4_0 = .;
      _4_1 = .;
      _4_2 = .;
      _4_3 = .;
      _4_4 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Fruits ;
drop _5_0 ;
if missing( Fruits ) then do;
   _5_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Fruits , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _5_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _5_0 = 1;
   end;
   else do;
      _5_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GenHlth ;
drop _6_0 _6_1 _6_2 _6_3 ;
*** encoding is sparse, initialize to zero;
_6_0 = 0;
_6_1 = 0;
_6_2 = 0;
_6_3 = 0;
if missing( GenHlth ) then do;
   _6_0 = .;
   _6_1 = .;
   _6_2 = .;
   _6_3 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GenHlth , BEST. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '3'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _6_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _6_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _6_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 = '4'  then do;
         _6_3 = 1;
         _dm_find = 1;
      end;
      else do;
         if _dm12 = '5'  then do;
            _6_0 = -1;
            _6_1 = -1;
            _6_2 = -1;
            _6_3 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _6_0 = .;
      _6_1 = .;
      _6_2 = .;
      _6_3 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HeartDiseaseorAttack ;
drop _7_0 ;
if missing( HeartDiseaseorAttack ) then do;
   _7_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HeartDiseaseorAttack , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _7_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _7_0 = -1;
   end;
   else do;
      _7_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HighBP ;
drop _8_0 ;
if missing( HighBP ) then do;
   _8_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HighBP , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _8_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _8_0 = -1;
   end;
   else do;
      _8_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HighChol ;
drop _9_0 ;
if missing( HighChol ) then do;
   _9_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HighChol , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _9_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _9_0 = -1;
   end;
   else do;
      _9_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HvyAlcoholConsump ;
drop _10_0 ;
if missing( HvyAlcoholConsump ) then do;
   _10_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HvyAlcoholConsump , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _10_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _10_0 = -1;
   end;
   else do;
      _10_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Income ;
drop _11_0 _11_1 _11_2 _11_3 _11_4 _11_5 _11_6 ;
*** encoding is sparse, initialize to zero;
_11_0 = 0;
_11_1 = 0;
_11_2 = 0;
_11_3 = 0;
_11_4 = 0;
_11_5 = 0;
_11_6 = 0;
if missing( Income ) then do;
   _11_0 = .;
   _11_1 = .;
   _11_2 = .;
   _11_3 = .;
   _11_4 = .;
   _11_5 = .;
   _11_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Income , BEST. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _11_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _11_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _11_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _11_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '6'  then do;
         if _dm12 = '5'  then do;
            _11_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '6'  then do;
               _11_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '7'  then do;
            _11_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '8'  then do;
               _11_0 = -1;
               _11_1 = -1;
               _11_2 = -1;
               _11_3 = -1;
               _11_4 = -1;
               _11_5 = -1;
               _11_6 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _11_0 = .;
      _11_1 = .;
      _11_2 = .;
      _11_3 = .;
      _11_4 = .;
      _11_5 = .;
      _11_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for MentHlth ;
drop _12_0 _12_1 _12_2 _12_3 _12_4 _12_5 _12_6 _12_7 _12_8 _12_9 _12_10 _12_11
         _12_12 _12_13 _12_14 _12_15 _12_16 _12_17 _12_18 _12_19 _12_20 _12_21
         _12_22 _12_23 _12_24 _12_25 _12_26 _12_27 _12_28 _12_29 ;
*** encoding is sparse, initialize to zero;
_12_0 = 0;
_12_1 = 0;
_12_2 = 0;
_12_3 = 0;
_12_4 = 0;
_12_5 = 0;
_12_6 = 0;
_12_7 = 0;
_12_8 = 0;
_12_9 = 0;
_12_10 = 0;
_12_11 = 0;
_12_12 = 0;
_12_13 = 0;
_12_14 = 0;
_12_15 = 0;
_12_16 = 0;
_12_17 = 0;
_12_18 = 0;
_12_19 = 0;
_12_20 = 0;
_12_21 = 0;
_12_22 = 0;
_12_23 = 0;
_12_24 = 0;
_12_25 = 0;
_12_26 = 0;
_12_27 = 0;
_12_28 = 0;
_12_29 = 0;
if missing( MentHlth ) then do;
   _12_0 = .;
   _12_1 = .;
   _12_2 = .;
   _12_3 = .;
   _12_4 = .;
   _12_5 = .;
   _12_6 = .;
   _12_7 = .;
   _12_8 = .;
   _12_9 = .;
   _12_10 = .;
   _12_11 = .;
   _12_12 = .;
   _12_13 = .;
   _12_14 = .;
   _12_15 = .;
   _12_16 = .;
   _12_17 = .;
   _12_18 = .;
   _12_19 = .;
   _12_20 = .;
   _12_21 = .;
   _12_22 = .;
   _12_23 = .;
   _12_24 = .;
   _12_25 = .;
   _12_26 = .;
   _12_27 = .;
   _12_28 = .;
   _12_29 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( MentHlth , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _12_0 = 1;
   end;
   else if _dm12 = '2'  then do;
      _12_2 = 1;
   end;
   else if _dm12 = '30'  then do;
      _12_0 = -1;
      _12_1 = -1;
      _12_2 = -1;
      _12_3 = -1;
      _12_4 = -1;
      _12_5 = -1;
      _12_6 = -1;
      _12_7 = -1;
      _12_8 = -1;
      _12_9 = -1;
      _12_10 = -1;
      _12_11 = -1;
      _12_12 = -1;
      _12_13 = -1;
      _12_14 = -1;
      _12_15 = -1;
      _12_16 = -1;
      _12_17 = -1;
      _12_18 = -1;
      _12_19 = -1;
      _12_20 = -1;
      _12_21 = -1;
      _12_22 = -1;
      _12_23 = -1;
      _12_24 = -1;
      _12_25 = -1;
      _12_26 = -1;
      _12_27 = -1;
      _12_28 = -1;
      _12_29 = -1;
   end;
   else if _dm12 = '5'  then do;
      _12_5 = 1;
   end;
   else if _dm12 = '1'  then do;
      _12_1 = 1;
   end;
   else if _dm12 = '3'  then do;
      _12_3 = 1;
   end;
   else if _dm12 = '10'  then do;
      _12_10 = 1;
   end;
   else if _dm12 = '15'  then do;
      _12_15 = 1;
   end;
   else if _dm12 = '4'  then do;
      _12_4 = 1;
   end;
   else if _dm12 = '20'  then do;
      _12_20 = 1;
   end;
   else if _dm12 = '7'  then do;
      _12_7 = 1;
   end;
   else if _dm12 = '25'  then do;
      _12_25 = 1;
   end;
   else if _dm12 = '14'  then do;
      _12_14 = 1;
   end;
   else if _dm12 = '6'  then do;
      _12_6 = 1;
   end;
   else if _dm12 = '8'  then do;
      _12_8 = 1;
   end;
   else if _dm12 = '28'  then do;
      _12_28 = 1;
   end;
   else if _dm12 = '12'  then do;
      _12_12 = 1;
   end;
   else if _dm12 = '21'  then do;
      _12_21 = 1;
   end;
   else if _dm12 = '29'  then do;
      _12_29 = 1;
   end;
   else if _dm12 = '9'  then do;
      _12_9 = 1;
   end;
   else if _dm12 = '16'  then do;
      _12_16 = 1;
   end;
   else if _dm12 = '18'  then do;
      _12_18 = 1;
   end;
   else if _dm12 = '27'  then do;
      _12_27 = 1;
   end;
   else if _dm12 = '22'  then do;
      _12_22 = 1;
   end;
   else if _dm12 = '17'  then do;
      _12_17 = 1;
   end;
   else if _dm12 = '26'  then do;
      _12_26 = 1;
   end;
   else if _dm12 = '13'  then do;
      _12_13 = 1;
   end;
   else if _dm12 = '11'  then do;
      _12_11 = 1;
   end;
   else if _dm12 = '23'  then do;
      _12_23 = 1;
   end;
   else if _dm12 = '24'  then do;
      _12_24 = 1;
   end;
   else if _dm12 = '19'  then do;
      _12_19 = 1;
   end;
   else do;
      _12_0 = .;
      _12_1 = .;
      _12_2 = .;
      _12_3 = .;
      _12_4 = .;
      _12_5 = .;
      _12_6 = .;
      _12_7 = .;
      _12_8 = .;
      _12_9 = .;
      _12_10 = .;
      _12_11 = .;
      _12_12 = .;
      _12_13 = .;
      _12_14 = .;
      _12_15 = .;
      _12_16 = .;
      _12_17 = .;
      _12_18 = .;
      _12_19 = .;
      _12_20 = .;
      _12_21 = .;
      _12_22 = .;
      _12_23 = .;
      _12_24 = .;
      _12_25 = .;
      _12_26 = .;
      _12_27 = .;
      _12_28 = .;
      _12_29 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for NoDocbcCost ;
drop _13_0 ;
if missing( NoDocbcCost ) then do;
   _13_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( NoDocbcCost , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _13_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _13_0 = -1;
   end;
   else do;
      _13_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for PhysActivity ;
drop _14_0 ;
if missing( PhysActivity ) then do;
   _14_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( PhysActivity , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _14_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _14_0 = 1;
   end;
   else do;
      _14_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for PhysHlth ;
drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 _15_7 _15_8 _15_9 _15_10 _15_11
         _15_12 _15_13 _15_14 _15_15 _15_16 _15_17 _15_18 _15_19 _15_20 _15_21
         _15_22 _15_23 _15_24 _15_25 _15_26 _15_27 _15_28 _15_29 ;
*** encoding is sparse, initialize to zero;
_15_0 = 0;
_15_1 = 0;
_15_2 = 0;
_15_3 = 0;
_15_4 = 0;
_15_5 = 0;
_15_6 = 0;
_15_7 = 0;
_15_8 = 0;
_15_9 = 0;
_15_10 = 0;
_15_11 = 0;
_15_12 = 0;
_15_13 = 0;
_15_14 = 0;
_15_15 = 0;
_15_16 = 0;
_15_17 = 0;
_15_18 = 0;
_15_19 = 0;
_15_20 = 0;
_15_21 = 0;
_15_22 = 0;
_15_23 = 0;
_15_24 = 0;
_15_25 = 0;
_15_26 = 0;
_15_27 = 0;
_15_28 = 0;
_15_29 = 0;
if missing( PhysHlth ) then do;
   _15_0 = .;
   _15_1 = .;
   _15_2 = .;
   _15_3 = .;
   _15_4 = .;
   _15_5 = .;
   _15_6 = .;
   _15_7 = .;
   _15_8 = .;
   _15_9 = .;
   _15_10 = .;
   _15_11 = .;
   _15_12 = .;
   _15_13 = .;
   _15_14 = .;
   _15_15 = .;
   _15_16 = .;
   _15_17 = .;
   _15_18 = .;
   _15_19 = .;
   _15_20 = .;
   _15_21 = .;
   _15_22 = .;
   _15_23 = .;
   _15_24 = .;
   _15_25 = .;
   _15_26 = .;
   _15_27 = .;
   _15_28 = .;
   _15_29 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( PhysHlth , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _15_0 = 1;
   end;
   else if _dm12 = '30'  then do;
      _15_0 = -1;
      _15_1 = -1;
      _15_2 = -1;
      _15_3 = -1;
      _15_4 = -1;
      _15_5 = -1;
      _15_6 = -1;
      _15_7 = -1;
      _15_8 = -1;
      _15_9 = -1;
      _15_10 = -1;
      _15_11 = -1;
      _15_12 = -1;
      _15_13 = -1;
      _15_14 = -1;
      _15_15 = -1;
      _15_16 = -1;
      _15_17 = -1;
      _15_18 = -1;
      _15_19 = -1;
      _15_20 = -1;
      _15_21 = -1;
      _15_22 = -1;
      _15_23 = -1;
      _15_24 = -1;
      _15_25 = -1;
      _15_26 = -1;
      _15_27 = -1;
      _15_28 = -1;
      _15_29 = -1;
   end;
   else if _dm12 = '2'  then do;
      _15_2 = 1;
   end;
   else if _dm12 = '1'  then do;
      _15_1 = 1;
   end;
   else if _dm12 = '3'  then do;
      _15_3 = 1;
   end;
   else if _dm12 = '5'  then do;
      _15_5 = 1;
   end;
   else if _dm12 = '10'  then do;
      _15_10 = 1;
   end;
   else if _dm12 = '15'  then do;
      _15_15 = 1;
   end;
   else if _dm12 = '4'  then do;
      _15_4 = 1;
   end;
   else if _dm12 = '7'  then do;
      _15_7 = 1;
   end;
   else if _dm12 = '20'  then do;
      _15_20 = 1;
   end;
   else if _dm12 = '14'  then do;
      _15_14 = 1;
   end;
   else if _dm12 = '6'  then do;
      _15_6 = 1;
   end;
   else if _dm12 = '25'  then do;
      _15_25 = 1;
   end;
   else if _dm12 = '8'  then do;
      _15_8 = 1;
   end;
   else if _dm12 = '21'  then do;
      _15_21 = 1;
   end;
   else if _dm12 = '12'  then do;
      _15_12 = 1;
   end;
   else if _dm12 = '28'  then do;
      _15_28 = 1;
   end;
   else if _dm12 = '29'  then do;
      _15_29 = 1;
   end;
   else if _dm12 = '9'  then do;
      _15_9 = 1;
   end;
   else if _dm12 = '18'  then do;
      _15_18 = 1;
   end;
   else if _dm12 = '16'  then do;
      _15_16 = 1;
   end;
   else if _dm12 = '17'  then do;
      _15_17 = 1;
   end;
   else if _dm12 = '27'  then do;
      _15_27 = 1;
   end;
   else if _dm12 = '26'  then do;
      _15_26 = 1;
   end;
   else if _dm12 = '24'  then do;
      _15_24 = 1;
   end;
   else if _dm12 = '11'  then do;
      _15_11 = 1;
   end;
   else if _dm12 = '13'  then do;
      _15_13 = 1;
   end;
   else if _dm12 = '22'  then do;
      _15_22 = 1;
   end;
   else if _dm12 = '23'  then do;
      _15_23 = 1;
   end;
   else if _dm12 = '19'  then do;
      _15_19 = 1;
   end;
   else do;
      _15_0 = .;
      _15_1 = .;
      _15_2 = .;
      _15_3 = .;
      _15_4 = .;
      _15_5 = .;
      _15_6 = .;
      _15_7 = .;
      _15_8 = .;
      _15_9 = .;
      _15_10 = .;
      _15_11 = .;
      _15_12 = .;
      _15_13 = .;
      _15_14 = .;
      _15_15 = .;
      _15_16 = .;
      _15_17 = .;
      _15_18 = .;
      _15_19 = .;
      _15_20 = .;
      _15_21 = .;
      _15_22 = .;
      _15_23 = .;
      _15_24 = .;
      _15_25 = .;
      _15_26 = .;
      _15_27 = .;
      _15_28 = .;
      _15_29 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Sex ;
drop _16_0 ;
if missing( Sex ) then do;
   _16_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Sex , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _16_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _16_0 = -1;
   end;
   else do;
      _16_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Smoker ;
drop _17_0 ;
if missing( Smoker ) then do;
   _17_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Smoker , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _17_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _17_0 = -1;
   end;
   else do;
      _17_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Stroke ;
drop _18_0 ;
if missing( Stroke ) then do;
   _18_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Stroke , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _18_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _18_0 = -1;
   end;
   else do;
      _18_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Veggies ;
drop _19_0 ;
if missing( Veggies ) then do;
   _19_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Veggies , BEST. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _19_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _19_0 = 1;
   end;
   else do;
      _19_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.0182856146;
   _P1 = 0.8453637803;
   _P2 = 0.1363506052;
   goto REGDR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0  _LP1;
_LP0 = 0;
_LP1 = 0;

***  Effect: Age ;
_TEMP = Age ;
_LP0 = _LP0 + (   -0.00414408060447 * _TEMP);
_LP1 = _LP1 + (   -0.13667778881006 * _TEMP);

***  Effect: AnyHealthcare ;
_TEMP = 1;
_LP0 = _LP0 + (    0.04129829660428) * _TEMP * _1_0;
_LP1 = _LP1 + (    0.01134240700953) * _TEMP * _1_0;

***  Effect: BMI ;
_TEMP = BMI ;
_LP0 = _LP0 + (    -0.0200623141319 * _TEMP);
_LP1 = _LP1 + (   -0.08506112237518 * _TEMP);

***  Effect: CholCheck ;
_TEMP = 1;
_LP0 = _LP0 + (    0.17587106324267) * _TEMP * _2_0;
_LP1 = _LP1 + (    0.55662872875129) * _TEMP * _2_0;

***  Effect: DiffWalk ;
_TEMP = 1;
_LP0 = _LP0 + (    0.06807944539291) * _TEMP * _3_0;
_LP1 = _LP1 + (    0.05202966847364) * _TEMP * _3_0;

***  Effect: Education ;
_TEMP = 1;
_LP0 = _LP0 + (   -3.60694703791874) * _TEMP * _4_0;
_LP1 = _LP1 + (   -0.31516609483213) * _TEMP * _4_0;
_LP0 = _LP0 + (    0.82684405280263) * _TEMP * _4_1;
_LP1 = _LP1 + (   -0.01654127164125) * _TEMP * _4_1;
_LP0 = _LP0 + (    0.84291708454748) * _TEMP * _4_2;
_LP1 = _LP1 + (    0.04388954912298) * _TEMP * _4_2;
_LP0 = _LP0 + (    0.59860435233338) * _TEMP * _4_3;
_LP1 = _LP1 + (    0.10355460753732) * _TEMP * _4_3;
_LP0 = _LP0 + (    0.65791585672254) * _TEMP * _4_4;
_LP1 = _LP1 + (     0.0391054606201) * _TEMP * _4_4;

***  Effect: Fruits ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.00825788632312) * _TEMP * _5_0;
_LP1 = _LP1 + (   -0.01592801277223) * _TEMP * _5_0;

***  Effect: GenHlth ;
_TEMP = 1;
_LP0 = _LP0 + (    0.45630003633515) * _TEMP * _6_0;
_LP1 = _LP1 + (    1.15205407825125) * _TEMP * _6_0;
_LP0 = _LP0 + (    0.24694986154977) * _TEMP * _6_1;
_LP1 = _LP1 + (    0.46937748191537) * _TEMP * _6_1;
_LP0 = _LP0 + (    -0.0209212485904) * _TEMP * _6_2;
_LP1 = _LP1 + (   -0.17900029952603) * _TEMP * _6_2;
_LP0 = _LP0 + (   -0.15603108215171) * _TEMP * _6_3;
_LP1 = _LP1 + (   -0.60710699757471) * _TEMP * _6_3;

***  Effect: HeartDiseaseorAttack ;
_TEMP = 1;
_LP0 = _LP0 + (    0.15963684339905) * _TEMP * _7_0;
_LP1 = _LP1 + (    0.12861220614246) * _TEMP * _7_0;

***  Effect: HighBP ;
_TEMP = 1;
_LP0 = _LP0 + (    0.18828052724326) * _TEMP * _8_0;
_LP1 = _LP1 + (    0.35743173485255) * _TEMP * _8_0;

***  Effect: HighChol ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.02142564733405) * _TEMP * _9_0;
_LP1 = _LP1 + (    0.29229370514654) * _TEMP * _9_0;

***  Effect: HvyAlcoholConsump ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.29433685527321) * _TEMP * _10_0;
_LP1 = _LP1 + (   -0.37659452228019) * _TEMP * _10_0;

***  Effect: Income ;
_TEMP = 1;
_LP0 = _LP0 + (    0.12434962949832) * _TEMP * _11_0;
_LP1 = _LP1 + (   -0.18856597637964) * _TEMP * _11_0;
_LP0 = _LP0 + (    0.01180272821841) * _TEMP * _11_1;
_LP1 = _LP1 + (   -0.11439362790813) * _TEMP * _11_1;
_LP0 = _LP0 + (   -0.01705497839294) * _TEMP * _11_2;
_LP1 = _LP1 + (   -0.09639520284216) * _TEMP * _11_2;
_LP0 = _LP0 + (   -0.16273811627458) * _TEMP * _11_3;
_LP1 = _LP1 + (   -0.05882989712437) * _TEMP * _11_3;
_LP0 = _LP0 + (   -0.04489073871808) * _TEMP * _11_4;
_LP1 = _LP1 + (    0.01011682655444) * _TEMP * _11_4;
_LP0 = _LP0 + (    0.16378586765171) * _TEMP * _11_5;
_LP1 = _LP1 + (    0.10710055621972) * _TEMP * _11_5;
_LP0 = _LP0 + (    0.00937344173016) * _TEMP * _11_6;
_LP1 = _LP1 + (    0.11482137296246) * _TEMP * _11_6;

***  Effect: MentHlth ;
_TEMP = 1;
_LP0 = _LP0 + (    1.04800942080717) * _TEMP * _12_0;
_LP1 = _LP1 + (   -0.09001843225783) * _TEMP * _12_0;
_LP0 = _LP0 + (    1.22590900027558) * _TEMP * _12_1;
_LP1 = _LP1 + (    0.12737525667088) * _TEMP * _12_1;
_LP0 = _LP0 + (    1.10106475746128) * _TEMP * _12_2;
_LP1 = _LP1 + (   -0.02132573547151) * _TEMP * _12_2;
_LP0 = _LP0 + (    0.97608762045018) * _TEMP * _12_3;
_LP1 = _LP1 + (   -0.05954724291336) * _TEMP * _12_3;
_LP0 = _LP0 + (    1.36921172040877) * _TEMP * _12_4;
_LP1 = _LP1 + (   -0.00917182457836) * _TEMP * _12_4;
_LP0 = _LP0 + (     1.4024070411314) * _TEMP * _12_5;
_LP1 = _LP1 + (   -0.00028467971349) * _TEMP * _12_5;
_LP0 = _LP0 + (    1.57286058448533) * _TEMP * _12_6;
_LP1 = _LP1 + (    0.00303496928288) * _TEMP * _12_6;
_LP0 = _LP0 + (    1.22406298298951) * _TEMP * _12_7;
_LP1 = _LP1 + (    0.14141042252959) * _TEMP * _12_7;
_LP0 = _LP0 + (    1.26089551363143) * _TEMP * _12_8;
_LP1 = _LP1 + (    0.16984609450576) * _TEMP * _12_8;
_LP0 = _LP0 + (    3.78331980851102) * _TEMP * _12_9;
_LP1 = _LP1 + (     1.1866293691781) * _TEMP * _12_9;
_LP0 = _LP0 + (     1.3420742122432) * _TEMP * _12_10;
_LP1 = _LP1 + (    0.02472082181025) * _TEMP * _12_10;
_LP0 = _LP0 + (   -2.53270611964659) * _TEMP * _12_11;
_LP1 = _LP1 + (    0.46881777462575) * _TEMP * _12_11;
_LP0 = _LP0 + (    1.19289982028081) * _TEMP * _12_12;
_LP1 = _LP1 + (   -0.37014526072922) * _TEMP * _12_12;
_LP0 = _LP0 + (   -2.01395050063776) * _TEMP * _12_13;
_LP1 = _LP1 + (    0.89154952382611) * _TEMP * _12_13;
_LP0 = _LP0 + (    1.16232174446058) * _TEMP * _12_14;
_LP1 = _LP1 + (   -0.10572920348172) * _TEMP * _12_14;
_LP0 = _LP0 + (    1.50371736370442) * _TEMP * _12_15;
_LP1 = _LP1 + (    0.13967193430089) * _TEMP * _12_15;
_LP0 = _LP0 + (   -1.98387749194182) * _TEMP * _12_16;
_LP1 = _LP1 + (    0.47921746060105) * _TEMP * _12_16;
_LP0 = _LP0 + (       1.99086451305) * _TEMP * _12_17;
_LP1 = _LP1 + (     -0.023092747883) * _TEMP * _12_17;
_LP0 = _LP0 + (   -3.28142994579901) * _TEMP * _12_18;
_LP1 = _LP1 + (   -0.89772782364261) * _TEMP * _12_18;
_LP0 = _LP0 + (   -7.94345646177794) * _TEMP * _12_19;
_LP1 = _LP1 + (   -1.09031201100748) * _TEMP * _12_19;
_LP0 = _LP0 + (    0.97809107781656) * _TEMP * _12_20;
_LP1 = _LP1 + (    0.02237950541983) * _TEMP * _12_20;
_LP0 = _LP0 + (    1.50095292613488) * _TEMP * _12_21;
_LP1 = _LP1 + (   -0.61042702666207) * _TEMP * _12_21;
_LP0 = _LP0 + (    -1.2358636579636) * _TEMP * _12_22;
_LP1 = _LP1 + (     1.5524942029042) * _TEMP * _12_22;
_LP0 = _LP0 + (   -2.97436105907883) * _TEMP * _12_23;
_LP1 = _LP1 + (   -0.83058093396395) * _TEMP * _12_23;
_LP0 = _LP0 + (    2.08616155188671) * _TEMP * _12_24;
_LP1 = _LP1 + (   -0.55101121901185) * _TEMP * _12_24;
_LP0 = _LP0 + (    1.63435259026731) * _TEMP * _12_25;
_LP1 = _LP1 + (   -0.09583605477333) * _TEMP * _12_25;
_LP0 = _LP0 + (   -2.75944421342236) * _TEMP * _12_26;
_LP1 = _LP1 + (    0.29195079721774) * _TEMP * _12_26;
_LP0 = _LP0 + (   -2.89917056628234) * _TEMP * _12_27;
_LP1 = _LP1 + (   -0.34751286616378) * _TEMP * _12_27;
_LP0 = _LP0 + (    0.83707368950426) * _TEMP * _12_28;
_LP1 = _LP1 + (   -0.15686423463904) * _TEMP * _12_28;
_LP0 = _LP0 + (   -2.86069646817922) * _TEMP * _12_29;
_LP1 = _LP1 + (   -0.17231839808172) * _TEMP * _12_29;

***  Effect: NoDocbcCost ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.21747567652734) * _TEMP * _13_0;
_LP1 = _LP1 + (    0.02254687053978) * _TEMP * _13_0;

***  Effect: PhysActivity ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.07210365596365) * _TEMP * _14_0;
_LP1 = _LP1 + (   -0.01244841943964) * _TEMP * _14_0;

***  Effect: PhysHlth ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.36138060527011) * _TEMP * _15_0;
_LP1 = _LP1 + (   -0.17374522621538) * _TEMP * _15_0;
_LP0 = _LP0 + (    -0.4552745250487) * _TEMP * _15_1;
_LP1 = _LP1 + (   -0.31212557191848) * _TEMP * _15_1;
_LP0 = _LP0 + (   -0.45210754388406) * _TEMP * _15_2;
_LP1 = _LP1 + (   -0.28312681020051) * _TEMP * _15_2;
_LP0 = _LP0 + (   -0.27470252831399) * _TEMP * _15_3;
_LP1 = _LP1 + (    -0.0910407354241) * _TEMP * _15_3;
_LP0 = _LP0 + (   -0.40704621270345) * _TEMP * _15_4;
_LP1 = _LP1 + (   -0.26714677181421) * _TEMP * _15_4;
_LP0 = _LP0 + (   -0.26802299887237) * _TEMP * _15_5;
_LP1 = _LP1 + (   -0.14212354331234) * _TEMP * _15_5;
_LP0 = _LP0 + (   -0.36873379683245) * _TEMP * _15_6;
_LP1 = _LP1 + (   -0.35979265520491) * _TEMP * _15_6;
_LP0 = _LP0 + (     -0.472909760972) * _TEMP * _15_7;
_LP1 = _LP1 + (   -0.14453420017303) * _TEMP * _15_7;
_LP0 = _LP0 + (    0.00470930079283) * _TEMP * _15_8;
_LP1 = _LP1 + (   -0.31156700645887) * _TEMP * _15_8;
_LP0 = _LP0 + (     -1.100605976329) * _TEMP * _15_9;
_LP1 = _LP1 + (   -0.47319873636302) * _TEMP * _15_9;
_LP0 = _LP0 + (   -0.14897089808618) * _TEMP * _15_10;
_LP1 = _LP1 + (   -0.21649730575151) * _TEMP * _15_10;
_LP0 = _LP0 + (    4.37161851587237) * _TEMP * _15_11;
_LP1 = _LP1 + (    4.10215853477496) * _TEMP * _15_11;
_LP0 = _LP0 + (    -0.4813008065127) * _TEMP * _15_12;
_LP1 = _LP1 + (   -0.12766437859842) * _TEMP * _15_12;
_LP0 = _LP0 + (    0.02321777568077) * _TEMP * _15_13;
_LP1 = _LP1 + (    -0.7581909524469) * _TEMP * _15_13;
_LP0 = _LP0 + (   -0.67576609678817) * _TEMP * _15_14;
_LP1 = _LP1 + (   -0.09842381735271) * _TEMP * _15_14;
_LP0 = _LP0 + (   -0.23708709525644) * _TEMP * _15_15;
_LP1 = _LP1 + (   -0.17539778485889) * _TEMP * _15_15;
_LP0 = _LP0 + (     -0.559304119879) * _TEMP * _15_16;
_LP1 = _LP1 + (   -0.38094168561267) * _TEMP * _15_16;
_LP0 = _LP0 + (     -0.677572441654) * _TEMP * _15_17;
_LP1 = _LP1 + (   -0.66874857849847) * _TEMP * _15_17;
_LP0 = _LP0 + (   -0.66233639702328) * _TEMP * _15_18;
_LP1 = _LP1 + (    0.02661272303472) * _TEMP * _15_18;
_LP0 = _LP0 + (     2.2773101756959) * _TEMP * _15_19;
_LP1 = _LP1 + (     0.9198933613483) * _TEMP * _15_19;
_LP0 = _LP0 + (    -0.8779246532807) * _TEMP * _15_20;
_LP1 = _LP1 + (   -0.22221154394122) * _TEMP * _15_20;
_LP0 = _LP0 + (   -0.14532612258424) * _TEMP * _15_21;
_LP1 = _LP1 + (   -0.09184823321173) * _TEMP * _15_21;
_LP0 = _LP0 + (    0.39424527999194) * _TEMP * _15_22;
_LP1 = _LP1 + (    0.36201370672091) * _TEMP * _15_22;
_LP0 = _LP0 + (     1.7694506017102) * _TEMP * _15_23;
_LP1 = _LP1 + (    1.46979004263545) * _TEMP * _15_23;
_LP0 = _LP0 + (    0.04927218119768) * _TEMP * _15_24;
_LP1 = _LP1 + (   -0.22090819666088) * _TEMP * _15_24;
_LP0 = _LP0 + (   -0.71101204509658) * _TEMP * _15_25;
_LP1 = _LP1 + (   -0.15937382520162) * _TEMP * _15_25;
_LP0 = _LP0 + (    0.17219250104969) * _TEMP * _15_26;
_LP1 = _LP1 + (   -1.18135511316386) * _TEMP * _15_26;
_LP0 = _LP0 + (    1.06506666055701) * _TEMP * _15_27;
_LP1 = _LP1 + (    0.40066130465414) * _TEMP * _15_27;
_LP0 = _LP0 + (   -0.04168627331738) * _TEMP * _15_28;
_LP1 = _LP1 + (   -0.08103664415612) * _TEMP * _15_28;
_LP0 = _LP0 + (   -0.40114707530503) * _TEMP * _15_29;
_LP1 = _LP1 + (   -0.26274616812588) * _TEMP * _15_29;

***  Effect: Sex ;
_TEMP = 1;
_LP0 = _LP0 + (    0.06889454676877) * _TEMP * _16_0;
_LP1 = _LP1 + (    0.11473053909985) * _TEMP * _16_0;

***  Effect: Smoker ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.01682413014641) * _TEMP * _17_0;
_LP1 = _LP1 + (   -0.00023043867139) * _TEMP * _17_0;

***  Effect: Stroke ;
_TEMP = 1;
_LP0 = _LP0 + (    0.19674442740887) * _TEMP * _18_0;
_LP1 = _LP1 + (    0.06693452991956) * _TEMP * _18_0;

***  Effect: Veggies ;
_TEMP = 1;
_LP0 = _LP0 + (    0.02944512919683) * _TEMP * _19_0;
_LP1 = _LP1 + (   -0.02037458880704) * _TEMP * _19_0;

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1 _P2;
drop _LPMAX;
_LPMAX= 0;
_LP0 =    -2.35691380760196 + _LP0;
if _LPMAX < _LP0 then _LPMAX = _LP0;
_LP1 =     6.30166339755406 + _LP1;
if _LPMAX < _LP1 then _LPMAX = _LP1;
_LP0 = exp(_LP0 - _LPMAX);
_LP1 = exp(_LP1 - _LPMAX);
_LPMAX = exp(-_LPMAX);
_P2 = 1 / (_LPMAX + _LP0 + _LP1);
_P0 = _LP0 * _P2;
_P1 = _LP1 * _P2;
_P2 = _LPMAX * _P2;

REGDR1:

*** Residuals;
if (_Y = .) then do;
   R_Diabetes_Predictionprediabetes = .;
   R_Diabetes_Predictionno_diabetes = .;
   R_Diabetes_Predictiondiabetes = .;
end;
else do;
    label R_Diabetes_Predictionprediabetes = 
'Residual: Diabetes_Prediction=prediabetes' ;
    label R_Diabetes_Predictionno_diabetes = 
'Residual: Diabetes_Prediction=no diabetes' ;
    label R_Diabetes_Predictiondiabetes = 
'Residual: Diabetes_Prediction=diabetes' ;
   R_Diabetes_Predictionprediabetes = - _P0;
   R_Diabetes_Predictionno_diabetes = - _P1;
   R_Diabetes_Predictiondiabetes = - _P2;
   select( _Y );
      when (0)  R_Diabetes_Predictionprediabetes = 
        R_Diabetes_Predictionprediabetes + 1;
      when (1)  R_Diabetes_Predictionno_diabetes = 
        R_Diabetes_Predictionno_diabetes + 1;
      when (2)  R_Diabetes_Predictiondiabetes = R_Diabetes_Predictiondiabetes
         + 1;
   end;
end;

*** Posterior Probabilities and Predicted Level;
label P_Diabetes_Predictionprediabetes = 
'Predicted: Diabetes_Prediction=prediabetes' ;
label P_Diabetes_Predictionno_diabetes = 
'Predicted: Diabetes_Prediction=no diabetes' ;
label P_Diabetes_Predictiondiabetes = 
'Predicted: Diabetes_Prediction=diabetes' ;
P_Diabetes_Predictionprediabetes = _P0;
_MAXP = _P0;
_IY = 1;
P_Diabetes_Predictionno_diabetes = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
P_Diabetes_Predictiondiabetes = _P2;
if (_P2 >  _MAXP + 1E-8) then do;
   _MAXP = _P2;
   _IY = 3;
end;
I_Diabetes_Prediction = REGDRF[_IY];
U_Diabetes_Prediction = REGDRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;
