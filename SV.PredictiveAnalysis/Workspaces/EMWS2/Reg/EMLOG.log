*------------------------------------------------------------*
User:                shre2
Date:                March 04, 2024
Time:                01:43:26
Site:                70080107
Platform:            X64_10PRO
Maintenance Release: 9.04.01M7P080520
EM Version:          15.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:41:59" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                March 04, 2024
Time:                01:41:59
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1HOC99V "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1HOC99V new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:41:59" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                shre2";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080107";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M7P080520";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:41:59" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                shre2";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ '\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
92204      proc freq data=EMWS2.Reg_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Reg_VariableSet noprint;
92205      table ROLE*LEVEL/out=WORK.RegMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.RegMETA;
92206      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS2.REG_VARIABLESET.
NOTE: The data set WORK.REGMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
92207      proc print data=WORK.RegMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RegMETA label noobs;
92208      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
92209      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
92210      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
92211      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
92212      run;
 
NOTE: There were 4 observations read from the data set WORK.REGMETA.
NOTE: The PROCEDURE PRINT printed page 75.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
92213      title10;
MPRINT(EM_DIAGRAM):   title10;
92214      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS2.Part_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Diabetes_Prediction(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=Diabetes_Prediction));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Ids3_Diabetes_Predict_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Diabetes_Prediction;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Diabetes_Prediction;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
92243      data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
92244      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
92245      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
92246         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
92247      set EMWS2.IDS3_DIABETES_PREDICT_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS2.IDS3_DIABETES_PREDICT_DM( where=(_TYPE_="TARGET"));
92248      NumLevels=3;
MPRINT(EM_DIAGRAM):   NumLevels=3;
92249      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
92250      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
92251      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
92252      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
92253      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
92254      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
92255      end;
MPRINT(EM_DIAGRAM):   end;
92256      output;
MPRINT(EM_DIAGRAM):   output;
92257      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.IDS3_DIABETES_PREDICT_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
92258      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
92259      proc print data=WORK.Reg_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg_EVENT noobs label;
92260      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
92261      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
92262      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
92263      run;
 
NOTE: There were 1 observations read from the data set WORK.REG_EVENT.
NOTE: The PROCEDURE PRINT printed page 76.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
92264      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Diabetes_Prediction"."
92265      proc print data = EMWS2.Ids3_Diabetes_Predict_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Ids3_Diabetes_Predict_DM noobs label;
92266      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
92267      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
92268      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
92269      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
92270      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
92271      run;
 
NOTE: There were 9 observations read from the data set EMWS2.IDS3_DIABETES_PREDICT_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 77.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
92272      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M37NFS6X;
MPRINT(EM_DIAGRAM):   set WORK.M37NFS6X;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
92282      data WORK.M37NFS6X;
MPRINT(EM_DIAGRAM):    data WORK.M37NFS6X;
92283      set WORK.M37NFS6X end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M37NFS6X end=eof;
92284      output;
MPRINT(EM_DIAGRAM):   output;
92285      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
92286      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
92287      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
92288      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
92289      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
92290      output;
MPRINT(EM_DIAGRAM):   output;
92291      end;
MPRINT(EM_DIAGRAM):   end;
92292      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.M37NFS6X.
NOTE: The data set WORK.M37NFS6X has 23 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 3 observations read from the data set EMWS2.IDS3_DIABETES_PREDICT_DD.
NOTE: The data set WORK.DIABETES_PREDICTION has 3 observations and 8 variables.
NOTE: There were 3 observations read from the data set EMWS2.IDS3_DIABETES_PREDICT_DD.
NOTE: The data set WORK.DIABETES_PREDICTION has 3 observations and 8 variables.
92293      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
92294      * Reg: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg: Create decision matrix;
92295      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
92296      data WORK.Diabetes_Prediction;
MPRINT(EM_DIAGRAM):   data WORK.Diabetes_Prediction;
92297        length   Diabetes_Prediction              $  32
92298                 COUNT                                8
92299                 DATAPRIOR                            8
92300                 TRAINPRIOR                           8
92301                 DECPRIOR                             8
92302                 DECISION1                            8
92303                 DECISION2                            8
92304                 DECISION3                            8
92305                 ;
MPRINT(EM_DIAGRAM):   length Diabetes_Prediction $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 DECISION3 8 ;
92306
92307        label    COUNT="Level Counts"
92308                 DATAPRIOR="Data Proportions"
92309                 TRAINPRIOR="Training Proportions"
92310                 DECPRIOR="Decision Priors"
92311                 DECISION1="PREDIABETES"
92312                 DECISION2="NO DIABETES"
92313                 DECISION3="DIABETES"
92314                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "PREDIABETES" DECISION2= "NO DIABETES" DECISION3= "DIABETES" ;
92315        format   COUNT 10.
92316                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
92317      Diabetes_Prediction="PREDIABETES"; COUNT=3671; DATAPRIOR=0.0183026544; TRAINPRIOR=0.0183026544; DECPRIOR=.; DECISION1=1; DECISION2=0; DECISION3=0;
MPRINT(EM_DIAGRAM):   Diabetes_Prediction="PREDIABETES";
MPRINT(EM_DIAGRAM):   COUNT=3671;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.0183026544;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.0183026544;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
MPRINT(EM_DIAGRAM):   DECISION3=0;
92318      output;
MPRINT(EM_DIAGRAM):   output;
92319      Diabetes_Prediction="NO DIABETES"; COUNT=169553; DATAPRIOR=0.8453473067; TRAINPRIOR=0.8453473067; DECPRIOR=.; DECISION1=0; DECISION2=1; DECISION3=0;
MPRINT(EM_DIAGRAM):   Diabetes_Prediction="NO DIABETES";
MPRINT(EM_DIAGRAM):   COUNT=169553;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.8453473067;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.8453473067;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
MPRINT(EM_DIAGRAM):   DECISION3=0;
92320      output;
MPRINT(EM_DIAGRAM):   output;
92321      Diabetes_Prediction="DIABETES"; COUNT=27348; DATAPRIOR=0.1363500389; TRAINPRIOR=0.1363500389; DECPRIOR=.; DECISION1=0; DECISION2=0; DECISION3=1;
MPRINT(EM_DIAGRAM):   Diabetes_Prediction="DIABETES";
MPRINT(EM_DIAGRAM):   COUNT=27348;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.1363500389;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.1363500389;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=0;
MPRINT(EM_DIAGRAM):   DECISION3=1;
92322      output;
MPRINT(EM_DIAGRAM):   output;
92323      ;
MPRINT(EM_DIAGRAM):   ;
92324      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DIABETES_PREDICTION has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
92325      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
92326      modify Diabetes_Prediction(type=PROFIT label=Diabetes_Prediction);
MPRINT(EM_DIAGRAM):   modify Diabetes_Prediction(type=PROFIT label= Diabetes_Prediction);
MPRINT(EM_DIAGRAM):   label DECISION1= 'PREDIABETES';
MPRINT(EM_DIAGRAM):   label DECISION2= 'NO DIABETES';
MPRINT(EM_DIAGRAM):   label DECISION3= 'DIABETES';
92327      label DECISION1= 'PREDIABETES';
MPRINT(EM_DIAGRAM):   run;
92328      label DECISION2= 'NO DIABETES';
92329      label DECISION3= 'DIABETES';
92330      run;
 
NOTE: MODIFY was successful for WORK.DIABETES_PREDICTION.DATA.
92331      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
92332      data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
92333      set EMWS2.Part_TRAIN(keep=
92334      Age AnyHealthcare BMI CholCheck Diabetes_Prediction DiffWalk Education Fruits
92335      GenHlth HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump Income MentHlth
92336      NoDocbcCost PhysActivity PhysHlth Sex Smoker Stroke Veggies );
MPRINT(EM_DIAGRAM):   set EMWS2.Part_TRAIN(keep= Age AnyHealthcare BMI CholCheck Diabetes_Prediction DiffWalk Education Fruits GenHlth HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump Income MentHlth NoDocbcCost PhysActivity PhysHlth Sex Smoker
Stroke Veggies );
92337      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
92338      *------------------------------------------------------------* ;
92339      * Reg: DMDBClass Macro ;
92340      *------------------------------------------------------------* ;
92341      %macro DMDBClass;
92342          AnyHealthcare(ASC) CholCheck(ASC) Diabetes_Prediction(DESC) DiffWalk(ASC)
92343         Education(ASC) Fruits(ASC) GenHlth(ASC) HeartDiseaseorAttack(ASC) HighBP(ASC)
92344         HighChol(ASC) HvyAlcoholConsump(ASC) Income(ASC) MentHlth(ASC) NoDocbcCost(ASC)
92345         PhysActivity(ASC) PhysHlth(ASC) Sex(ASC) Smoker(ASC) Stroke(ASC) Veggies(ASC)
92346      %mend DMDBClass;
92347      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
92348      * Reg: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBVar Macro ;
92349      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
92350      %macro DMDBVar;
92351          Age BMI
92352      %mend DMDBVar;
92353      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
92354      * Reg: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg: Create DMDB;
92355      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
92356      proc dmdb batch data=WORK.EM_DMREG
92357      dmdbcat=WORK.Reg_DMDB
92358      maxlevel = 513
92359      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
92360      class %DMDBClass;
MPRINT(DMDBCLASS):   AnyHealthcare(ASC) CholCheck(ASC) Diabetes_Prediction(DESC) DiffWalk(ASC) Education(ASC) Fruits(ASC) GenHlth(ASC) HeartDiseaseorAttack(ASC) HighBP(ASC) HighChol(ASC) HvyAlcoholConsump(ASC) Income(ASC) MentHlth(ASC) NoDocbcCost(ASC)
PhysActivity(ASC) PhysHlth(ASC) Sex(ASC) Smoker(ASC) Stroke(ASC) Veggies(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
92361      var %DMDBVar;
MPRINT(DMDBVAR):   Age BMI
MPRINT(EM_DIAGRAM):  ;
92362      target
92363      Diabetes_Prediction
92364      ;
MPRINT(EM_DIAGRAM):   target Diabetes_Prediction ;
92365      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 80227   Memory used = 511K.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.40 seconds
      cpu time            0.32 seconds
 
NOTE: There were 80227 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 80227 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.42 seconds
      cpu time            0.34 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
92366      quit;
92367      *--- end code ---*;
 
92368      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
92369      * Reg: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg: Run DMREG procedure;
92370      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
92371      proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB
92372      validata = EMWS2.Part_VALIDATE
92373      outest = EMWS2.Reg_EMESTIMATE
92374      outterms = EMWS2.Reg_OUTTERMS
92375      outmap= EMWS2.Reg_MAPDS namelen=200
92376      ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB validata = EMWS2.Part_VALIDATE outest = EMWS2.Reg_EMESTIMATE outterms = EMWS2.Reg_OUTTERMS outmap= EMWS2.Reg_MAPDS namelen=200 ;
92377      class
92378      Diabetes_Prediction
92379      AnyHealthcare
92380      CholCheck
92381      DiffWalk
92382      Education
92383      Fruits
92384      GenHlth
92385      HeartDiseaseorAttack
92386      HighBP
92387      HighChol
92388      HvyAlcoholConsump
92389      Income
92390      MentHlth
92391      NoDocbcCost
92392      PhysActivity
92393      PhysHlth
92394      Sex
92395      Smoker
92396      Stroke
92397      Veggies
92398      ;
MPRINT(EM_DIAGRAM):   class Diabetes_Prediction AnyHealthcare CholCheck DiffWalk Education Fruits GenHlth HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump Income MentHlth NoDocbcCost PhysActivity PhysHlth Sex Smoker Stroke Veggies ;
92399      model Diabetes_Prediction =
92400      Age
92401      AnyHealthcare
92402      BMI
92403      CholCheck
92404      DiffWalk
92405      Education
92406      Fruits
92407      GenHlth
92408      HeartDiseaseorAttack
92409      HighBP
92410      HighChol
92411      HvyAlcoholConsump
92412      Income
92413      MentHlth
92414      NoDocbcCost
92415      PhysActivity
92416      PhysHlth
92417      Sex
92418      Smoker
92419      Stroke
92420      Veggies
92421      /level=nominal
92422      coding=DEVIATION
92423      nodesignprint
92424      ;
MPRINT(EM_DIAGRAM):   model Diabetes_Prediction = Age AnyHealthcare BMI CholCheck DiffWalk Education Fruits GenHlth HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump Income MentHlth NoDocbcCost PhysActivity PhysHlth Sex Smoker Stroke Veggies
/level=nominal coding=DEVIATION nodesignprint ;
92425      ;
MPRINT(EM_DIAGRAM):   ;
92426      score data=EMWS2.Part_TEST
92427      out=_null_
92428      outfit=EMWS2.Reg_FITTEST
92429      role = TEST
92430      ;
MPRINT(EM_DIAGRAM):   score data=EMWS2.Part_TEST out=_null_ outfit=EMWS2.Reg_FITTEST role = TEST ;
92431      code file="\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMPUBLISHSCORE.sas"
92432      group=Reg
92433      ;
MPRINT(EM_DIAGRAM):   code file="\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMPUBLISHSCORE.sas" group=Reg ;
92434      code file="\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas"
92435      group=Reg
92436      residual
92437      ;
MPRINT(EM_DIAGRAM):   code file="\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas" group=Reg residual ;
92438      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Convergence criterion (FCONV=0.0001) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: External file \\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMPUBLISHSCORE.sas opened.
NOTE: External file \\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas opened.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           58.64 seconds
      cpu time            58.04 seconds
 
NOTE: There were 80227 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 80227 observations read from the data set WORK.EM_DMREG.
NOTE: There were 60169 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 60176 observations read from the data set EMWS2.PART_TEST.
NOTE: The data set EMWS2.REG_EMESTIMATE has 3 observations and 220 variables.
NOTE: The data set EMWS2.REG_OUTTERMS has 186 observations and 7 variables.
NOTE: The data set EMWS2.REG_MAPDS has 3 observations and 186 variables.
NOTE: The data set EMWS2.REG_FITTEST has 1 observations and 14 variables.
NOTE: The PROCEDURE DMREG printed pages 78-79.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           58.94 seconds
      cpu time            58.17 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
92439      quit;
 
92440      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
92441      delete Reg_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB;
92442      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
92443      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
92444      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
92445      delete Reg_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB / memtype=catalog;
92446      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG_DMDB (memtype=CATALOG).
92447      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
92448      data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
92449      length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
92450      set EMWS2.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMESTIMATE;
92451      drop _AIC_--_VMISC_
92452      ;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VMISC_ ;
92453      where _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('PARMS', 'T', 'P');
92454      select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
92455      when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
92456      when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
92457      when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
92458      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
92459      end;
MPRINT(EM_DIAGRAM):   end;
92460      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.REG_EMESTIMATE.
      WHERE _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 188 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
92461      proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
92462      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 186 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
92463      proc transpose data=EMWS2.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
92464      TARGET=TargetLevel
92465      ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS2.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable TARGET=TargetLevel ));
92466      var 'Age_PREDIABETES'n--'Veggies0_NO_DIABETES'n;
MPRINT(EM_DIAGRAM):   var 'Age_PREDIABETES'n--'Veggies0_NO_DIABETES'n;
92467      run;
MPRINT(EM_DIAGRAM):   run;
The SAS System
 
 
NOTE: There were 3 observations read from the data set EMWS2.REG_MAPDS.
NOTE: The data set WORK.MAP has 184 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
92468      proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
92469      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
92470      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 184 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 184 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
92471      proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
92472      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
92473      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 186 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 186 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
92474      data EMWS2.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
92475      length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
92476      merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
92477      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
92478      label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
92479         "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
92480         "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel = "Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect Label" CODE = "Score Code Variable";
92481      label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
92481    ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
92482      abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
92483      drop pos;
MPRINT(EM_DIAGRAM):   drop pos;
92484      length TargetLevel $32;
MPRINT(EM_DIAGRAM):   length TargetLevel $32;
WARNING: Length of character variable TargetLevel has already been set. Use the LENGTH statement as the very first statement in the DATA STEP to declare the length of a character variable.
92485      label TargetLevel = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetLevel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TargetLevel = "Target Level";
92486      if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
92487      variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
92488      TargetLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   TargetLevel = scan(_LABEL_, 2, '=');
92489      end;
MPRINT(EM_DIAGRAM):   end;
92490      if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
92491      if length(effect)>length(variable) then classlevel = substr(effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(effect, length(variable)+1);
92492      pos = index(classlevel, '_'!!TargetLevel);
MPRINT(EM_DIAGRAM):   pos = index(classlevel, '_'!!TargetLevel);
92493      if pos> 1 then classlevel = substr(classlevel, 1, pos-1);
MPRINT(EM_DIAGRAM):   if pos> 1 then classlevel = substr(classlevel, 1, pos-1);
92494      else classlevel = '';
MPRINT(EM_DIAGRAM):   else classlevel = '';
92495      end;
MPRINT(EM_DIAGRAM):   end;
92496      if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
92497      if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
92498      else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
92499      abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
92500      if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
92501      if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
92502      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 92482:13
NOTE: There were 186 observations read from the data set WORK.ESTIMATE.
NOTE: There were 184 observations read from the data set WORK.MAP.
NOTE: The data set EMWS2.REG_EFFECTS has 186 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.07 seconds
 
 
92503      proc sort data =EMWS2.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS2.Reg_EFFECTS;
92504      by
92505      TargetLevel
92506      descending abstvalue;
MPRINT(EM_DIAGRAM):   by TargetLevel descending abstvalue;
92507      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 186 observations read from the data set EMWS2.REG_EFFECTS.
NOTE: The data set EMWS2.REG_EFFECTS has 186 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.16 seconds
      cpu time            0.04 seconds
 
 
92508      data EMWS2.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EFFECTS;
92509      set EMWS2.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EFFECTS;
92510      format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
92511      label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
92512      retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
92513      by TargetLevel;
MPRINT(EM_DIAGRAM):   by TargetLevel;
92514      if first.TargetLevel then TEffectNum =1;
MPRINT(EM_DIAGRAM):   if first.TargetLevel then TEffectNum =1;
92515      else TEffectNum + 1;
MPRINT(EM_DIAGRAM):   else TEffectNum + 1;
92516      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 186 observations read from the data set EMWS2.REG_EFFECTS.
NOTE: The data set EMWS2.REG_EFFECTS has 186 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.09 seconds
 
 
92517      proc sort data =EMWS2.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS2.Reg_EFFECTS;
92518      by
92519      TargetLevel
92520      descending absCoefficient;
MPRINT(EM_DIAGRAM):   by TargetLevel descending absCoefficient;
92521      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 186 observations read from the data set EMWS2.REG_EFFECTS.
NOTE: The data set EMWS2.REG_EFFECTS has 186 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.18 seconds
      cpu time            0.06 seconds
 
 
92522      data EMWS2.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EFFECTS;
92523      set EMWS2.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EFFECTS;
92524      format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
92525      label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
92526      retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
92527      by TargetLevel;
MPRINT(EM_DIAGRAM):   by TargetLevel;
92528      if first.TargetLevel then EffectNum =1;
MPRINT(EM_DIAGRAM):   if first.TargetLevel then EffectNum =1;
92529      else EffectNum + 1;
MPRINT(EM_DIAGRAM):   else EffectNum + 1;
92530      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 186 observations read from the data set EMWS2.REG_EFFECTS.
NOTE: The data set EMWS2.REG_EFFECTS has 186 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:43:06" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                March 04, 2024
Time:                01:43:06
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0G68NH4 "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0G68NH4 new;
MPRINT(EM_DIAGRAM):   run;
92632      filename emflow "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
92633      *------------------------------------------------------------*;
92634      * Reg: Scoring DATA data;
92635      *------------------------------------------------------------*;
92636      data EMWS2.Reg_TRAIN
92637      / view=EMWS2.Reg_TRAIN
92638      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_TRAIN / view=EMWS2.Reg_TRAIN ;
92639      set EMWS2.Part_TRAIN
92640      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_TRAIN ;
92641      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_Diabetes_Prediction $ 11;
MPRINT(EM_DIAGRAM):   label I_Diabetes_Prediction = 'Into: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REGDRF [3] $11 _temporary_ ('PREDIABETES' 'NO DIABETES' 'DIABETES' );
MPRINT(EM_DIAGRAM):   label U_Diabetes_Prediction = 'Unnormalized Into: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   length U_Diabetes_Prediction $ 11;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   array REGDRU[3] $ 11 _temporary_ ('prediabetes' 'no diabetes' 'diabetes   ' );
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Diabetes_Prediction ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_Diabetes_Prediction = 'From: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   length F_Diabetes_Prediction $ 11;
MPRINT(DMNORMCP):   F_Diabetes_Prediction=dmnorm(Diabetes_Prediction,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if missing( Diabetes_Prediction ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_Diabetes_Prediction = 'NO DIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Diabetes_Prediction = 'DIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Diabetes_Prediction = 'PREDIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BMI for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BMI ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AnyHealthcare ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
MPRINT(EM_DIAGRAM):   if missing( AnyHealthcare ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( AnyHealthcare , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CholCheck ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( CholCheck ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( CholCheck , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DiffWalk ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
MPRINT(EM_DIAGRAM):   if missing( DiffWalk ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DiffWalk , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Education , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Fruits ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
MPRINT(EM_DIAGRAM):   if missing( Fruits ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Fruits , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GenHlth ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GenHlth ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GenHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HeartDiseaseorAttack ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( HeartDiseaseorAttack ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HeartDiseaseorAttack , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighBP ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( HighBP ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighBP , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighChol ;
MPRINT(EM_DIAGRAM):   drop _9_0 ;
MPRINT(EM_DIAGRAM):   if missing( HighChol ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighChol , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HvyAlcoholConsump ;
MPRINT(EM_DIAGRAM):   drop _10_0 ;
MPRINT(EM_DIAGRAM):   if missing( HvyAlcoholConsump ) then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HvyAlcoholConsump , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Income ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 _11_4 _11_5 _11_6 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_4 = 0;
MPRINT(EM_DIAGRAM):   _11_5 = 0;
MPRINT(EM_DIAGRAM):   _11_6 = 0;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_5 = .;
MPRINT(EM_DIAGRAM):   _11_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Income , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _11_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _11_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _11_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_4 = -1;
MPRINT(EM_DIAGRAM):   _11_5 = -1;
MPRINT(EM_DIAGRAM):   _11_6 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_5 = .;
MPRINT(EM_DIAGRAM):   _11_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MentHlth ;
MPRINT(EM_DIAGRAM):   drop _12_0 _12_1 _12_2 _12_3 _12_4 _12_5 _12_6 _12_7 _12_8 _12_9 _12_10 _12_11 _12_12 _12_13 _12_14 _12_15 _12_16 _12_17 _12_18 _12_19 _12_20 _12_21 _12_22 _12_23 _12_24 _12_25 _12_26 _12_27 _12_28 _12_29 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _12_0 = 0;
MPRINT(EM_DIAGRAM):   _12_1 = 0;
MPRINT(EM_DIAGRAM):   _12_2 = 0;
MPRINT(EM_DIAGRAM):   _12_3 = 0;
MPRINT(EM_DIAGRAM):   _12_4 = 0;
MPRINT(EM_DIAGRAM):   _12_5 = 0;
MPRINT(EM_DIAGRAM):   _12_6 = 0;
MPRINT(EM_DIAGRAM):   _12_7 = 0;
MPRINT(EM_DIAGRAM):   _12_8 = 0;
MPRINT(EM_DIAGRAM):   _12_9 = 0;
MPRINT(EM_DIAGRAM):   _12_10 = 0;
MPRINT(EM_DIAGRAM):   _12_11 = 0;
MPRINT(EM_DIAGRAM):   _12_12 = 0;
MPRINT(EM_DIAGRAM):   _12_13 = 0;
MPRINT(EM_DIAGRAM):   _12_14 = 0;
MPRINT(EM_DIAGRAM):   _12_15 = 0;
MPRINT(EM_DIAGRAM):   _12_16 = 0;
MPRINT(EM_DIAGRAM):   _12_17 = 0;
MPRINT(EM_DIAGRAM):   _12_18 = 0;
MPRINT(EM_DIAGRAM):   _12_19 = 0;
MPRINT(EM_DIAGRAM):   _12_20 = 0;
MPRINT(EM_DIAGRAM):   _12_21 = 0;
MPRINT(EM_DIAGRAM):   _12_22 = 0;
MPRINT(EM_DIAGRAM):   _12_23 = 0;
MPRINT(EM_DIAGRAM):   _12_24 = 0;
MPRINT(EM_DIAGRAM):   _12_25 = 0;
MPRINT(EM_DIAGRAM):   _12_26 = 0;
MPRINT(EM_DIAGRAM):   _12_27 = 0;
MPRINT(EM_DIAGRAM):   _12_28 = 0;
MPRINT(EM_DIAGRAM):   _12_29 = 0;
MPRINT(EM_DIAGRAM):   if missing( MentHlth ) then do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_1 = .;
MPRINT(EM_DIAGRAM):   _12_2 = .;
MPRINT(EM_DIAGRAM):   _12_3 = .;
MPRINT(EM_DIAGRAM):   _12_4 = .;
MPRINT(EM_DIAGRAM):   _12_5 = .;
MPRINT(EM_DIAGRAM):   _12_6 = .;
MPRINT(EM_DIAGRAM):   _12_7 = .;
MPRINT(EM_DIAGRAM):   _12_8 = .;
MPRINT(EM_DIAGRAM):   _12_9 = .;
MPRINT(EM_DIAGRAM):   _12_10 = .;
MPRINT(EM_DIAGRAM):   _12_11 = .;
MPRINT(EM_DIAGRAM):   _12_12 = .;
MPRINT(EM_DIAGRAM):   _12_13 = .;
MPRINT(EM_DIAGRAM):   _12_14 = .;
MPRINT(EM_DIAGRAM):   _12_15 = .;
MPRINT(EM_DIAGRAM):   _12_16 = .;
MPRINT(EM_DIAGRAM):   _12_17 = .;
MPRINT(EM_DIAGRAM):   _12_18 = .;
MPRINT(EM_DIAGRAM):   _12_19 = .;
MPRINT(EM_DIAGRAM):   _12_20 = .;
MPRINT(EM_DIAGRAM):   _12_21 = .;
MPRINT(EM_DIAGRAM):   _12_22 = .;
MPRINT(EM_DIAGRAM):   _12_23 = .;
MPRINT(EM_DIAGRAM):   _12_24 = .;
MPRINT(EM_DIAGRAM):   _12_25 = .;
MPRINT(EM_DIAGRAM):   _12_26 = .;
MPRINT(EM_DIAGRAM):   _12_27 = .;
MPRINT(EM_DIAGRAM):   _12_28 = .;
MPRINT(EM_DIAGRAM):   _12_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MentHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _12_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _12_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   _12_0 = -1;
MPRINT(EM_DIAGRAM):   _12_1 = -1;
MPRINT(EM_DIAGRAM):   _12_2 = -1;
MPRINT(EM_DIAGRAM):   _12_3 = -1;
MPRINT(EM_DIAGRAM):   _12_4 = -1;
MPRINT(EM_DIAGRAM):   _12_5 = -1;
MPRINT(EM_DIAGRAM):   _12_6 = -1;
MPRINT(EM_DIAGRAM):   _12_7 = -1;
MPRINT(EM_DIAGRAM):   _12_8 = -1;
MPRINT(EM_DIAGRAM):   _12_9 = -1;
MPRINT(EM_DIAGRAM):   _12_10 = -1;
MPRINT(EM_DIAGRAM):   _12_11 = -1;
MPRINT(EM_DIAGRAM):   _12_12 = -1;
MPRINT(EM_DIAGRAM):   _12_13 = -1;
MPRINT(EM_DIAGRAM):   _12_14 = -1;
MPRINT(EM_DIAGRAM):   _12_15 = -1;
MPRINT(EM_DIAGRAM):   _12_16 = -1;
MPRINT(EM_DIAGRAM):   _12_17 = -1;
MPRINT(EM_DIAGRAM):   _12_18 = -1;
MPRINT(EM_DIAGRAM):   _12_19 = -1;
MPRINT(EM_DIAGRAM):   _12_20 = -1;
MPRINT(EM_DIAGRAM):   _12_21 = -1;
MPRINT(EM_DIAGRAM):   _12_22 = -1;
MPRINT(EM_DIAGRAM):   _12_23 = -1;
MPRINT(EM_DIAGRAM):   _12_24 = -1;
MPRINT(EM_DIAGRAM):   _12_25 = -1;
MPRINT(EM_DIAGRAM):   _12_26 = -1;
MPRINT(EM_DIAGRAM):   _12_27 = -1;
MPRINT(EM_DIAGRAM):   _12_28 = -1;
MPRINT(EM_DIAGRAM):   _12_29 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _12_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _12_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _12_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _12_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   _12_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _12_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   _12_20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _12_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   _12_25 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   _12_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _12_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _12_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   _12_28 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   _12_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   _12_21 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   _12_29 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   _12_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   _12_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   _12_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   _12_27 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   _12_22 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   _12_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   _12_26 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   _12_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   _12_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   _12_23 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   _12_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   _12_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_1 = .;
MPRINT(EM_DIAGRAM):   _12_2 = .;
MPRINT(EM_DIAGRAM):   _12_3 = .;
MPRINT(EM_DIAGRAM):   _12_4 = .;
MPRINT(EM_DIAGRAM):   _12_5 = .;
MPRINT(EM_DIAGRAM):   _12_6 = .;
MPRINT(EM_DIAGRAM):   _12_7 = .;
MPRINT(EM_DIAGRAM):   _12_8 = .;
MPRINT(EM_DIAGRAM):   _12_9 = .;
MPRINT(EM_DIAGRAM):   _12_10 = .;
MPRINT(EM_DIAGRAM):   _12_11 = .;
MPRINT(EM_DIAGRAM):   _12_12 = .;
MPRINT(EM_DIAGRAM):   _12_13 = .;
MPRINT(EM_DIAGRAM):   _12_14 = .;
MPRINT(EM_DIAGRAM):   _12_15 = .;
MPRINT(EM_DIAGRAM):   _12_16 = .;
MPRINT(EM_DIAGRAM):   _12_17 = .;
MPRINT(EM_DIAGRAM):   _12_18 = .;
MPRINT(EM_DIAGRAM):   _12_19 = .;
MPRINT(EM_DIAGRAM):   _12_20 = .;
MPRINT(EM_DIAGRAM):   _12_21 = .;
MPRINT(EM_DIAGRAM):   _12_22 = .;
MPRINT(EM_DIAGRAM):   _12_23 = .;
MPRINT(EM_DIAGRAM):   _12_24 = .;
MPRINT(EM_DIAGRAM):   _12_25 = .;
MPRINT(EM_DIAGRAM):   _12_26 = .;
MPRINT(EM_DIAGRAM):   _12_27 = .;
MPRINT(EM_DIAGRAM):   _12_28 = .;
MPRINT(EM_DIAGRAM):   _12_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for NoDocbcCost ;
MPRINT(EM_DIAGRAM):   drop _13_0 ;
MPRINT(EM_DIAGRAM):   if missing( NoDocbcCost ) then do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( NoDocbcCost , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysActivity ;
MPRINT(EM_DIAGRAM):   drop _14_0 ;
MPRINT(EM_DIAGRAM):   if missing( PhysActivity ) then do;
MPRINT(EM_DIAGRAM):   _14_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysActivity , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _14_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _14_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _14_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysHlth ;
MPRINT(EM_DIAGRAM):   drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 _15_7 _15_8 _15_9 _15_10 _15_11 _15_12 _15_13 _15_14 _15_15 _15_16 _15_17 _15_18 _15_19 _15_20 _15_21 _15_22 _15_23 _15_24 _15_25 _15_26 _15_27 _15_28 _15_29 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _15_0 = 0;
MPRINT(EM_DIAGRAM):   _15_1 = 0;
MPRINT(EM_DIAGRAM):   _15_2 = 0;
MPRINT(EM_DIAGRAM):   _15_3 = 0;
MPRINT(EM_DIAGRAM):   _15_4 = 0;
MPRINT(EM_DIAGRAM):   _15_5 = 0;
MPRINT(EM_DIAGRAM):   _15_6 = 0;
MPRINT(EM_DIAGRAM):   _15_7 = 0;
MPRINT(EM_DIAGRAM):   _15_8 = 0;
MPRINT(EM_DIAGRAM):   _15_9 = 0;
MPRINT(EM_DIAGRAM):   _15_10 = 0;
MPRINT(EM_DIAGRAM):   _15_11 = 0;
MPRINT(EM_DIAGRAM):   _15_12 = 0;
MPRINT(EM_DIAGRAM):   _15_13 = 0;
MPRINT(EM_DIAGRAM):   _15_14 = 0;
MPRINT(EM_DIAGRAM):   _15_15 = 0;
MPRINT(EM_DIAGRAM):   _15_16 = 0;
MPRINT(EM_DIAGRAM):   _15_17 = 0;
MPRINT(EM_DIAGRAM):   _15_18 = 0;
MPRINT(EM_DIAGRAM):   _15_19 = 0;
MPRINT(EM_DIAGRAM):   _15_20 = 0;
MPRINT(EM_DIAGRAM):   _15_21 = 0;
MPRINT(EM_DIAGRAM):   _15_22 = 0;
MPRINT(EM_DIAGRAM):   _15_23 = 0;
MPRINT(EM_DIAGRAM):   _15_24 = 0;
MPRINT(EM_DIAGRAM):   _15_25 = 0;
MPRINT(EM_DIAGRAM):   _15_26 = 0;
MPRINT(EM_DIAGRAM):   _15_27 = 0;
MPRINT(EM_DIAGRAM):   _15_28 = 0;
MPRINT(EM_DIAGRAM):   _15_29 = 0;
MPRINT(EM_DIAGRAM):   if missing( PhysHlth ) then do;
MPRINT(EM_DIAGRAM):   _15_0 = .;
MPRINT(EM_DIAGRAM):   _15_1 = .;
MPRINT(EM_DIAGRAM):   _15_2 = .;
MPRINT(EM_DIAGRAM):   _15_3 = .;
MPRINT(EM_DIAGRAM):   _15_4 = .;
MPRINT(EM_DIAGRAM):   _15_5 = .;
MPRINT(EM_DIAGRAM):   _15_6 = .;
MPRINT(EM_DIAGRAM):   _15_7 = .;
MPRINT(EM_DIAGRAM):   _15_8 = .;
MPRINT(EM_DIAGRAM):   _15_9 = .;
MPRINT(EM_DIAGRAM):   _15_10 = .;
MPRINT(EM_DIAGRAM):   _15_11 = .;
MPRINT(EM_DIAGRAM):   _15_12 = .;
MPRINT(EM_DIAGRAM):   _15_13 = .;
MPRINT(EM_DIAGRAM):   _15_14 = .;
MPRINT(EM_DIAGRAM):   _15_15 = .;
MPRINT(EM_DIAGRAM):   _15_16 = .;
MPRINT(EM_DIAGRAM):   _15_17 = .;
MPRINT(EM_DIAGRAM):   _15_18 = .;
MPRINT(EM_DIAGRAM):   _15_19 = .;
MPRINT(EM_DIAGRAM):   _15_20 = .;
MPRINT(EM_DIAGRAM):   _15_21 = .;
MPRINT(EM_DIAGRAM):   _15_22 = .;
MPRINT(EM_DIAGRAM):   _15_23 = .;
MPRINT(EM_DIAGRAM):   _15_24 = .;
MPRINT(EM_DIAGRAM):   _15_25 = .;
MPRINT(EM_DIAGRAM):   _15_26 = .;
MPRINT(EM_DIAGRAM):   _15_27 = .;
MPRINT(EM_DIAGRAM):   _15_28 = .;
MPRINT(EM_DIAGRAM):   _15_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _15_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   _15_0 = -1;
MPRINT(EM_DIAGRAM):   _15_1 = -1;
MPRINT(EM_DIAGRAM):   _15_2 = -1;
MPRINT(EM_DIAGRAM):   _15_3 = -1;
MPRINT(EM_DIAGRAM):   _15_4 = -1;
MPRINT(EM_DIAGRAM):   _15_5 = -1;
MPRINT(EM_DIAGRAM):   _15_6 = -1;
MPRINT(EM_DIAGRAM):   _15_7 = -1;
MPRINT(EM_DIAGRAM):   _15_8 = -1;
MPRINT(EM_DIAGRAM):   _15_9 = -1;
MPRINT(EM_DIAGRAM):   _15_10 = -1;
MPRINT(EM_DIAGRAM):   _15_11 = -1;
MPRINT(EM_DIAGRAM):   _15_12 = -1;
MPRINT(EM_DIAGRAM):   _15_13 = -1;
MPRINT(EM_DIAGRAM):   _15_14 = -1;
MPRINT(EM_DIAGRAM):   _15_15 = -1;
MPRINT(EM_DIAGRAM):   _15_16 = -1;
MPRINT(EM_DIAGRAM):   _15_17 = -1;
MPRINT(EM_DIAGRAM):   _15_18 = -1;
MPRINT(EM_DIAGRAM):   _15_19 = -1;
MPRINT(EM_DIAGRAM):   _15_20 = -1;
MPRINT(EM_DIAGRAM):   _15_21 = -1;
MPRINT(EM_DIAGRAM):   _15_22 = -1;
MPRINT(EM_DIAGRAM):   _15_23 = -1;
MPRINT(EM_DIAGRAM):   _15_24 = -1;
MPRINT(EM_DIAGRAM):   _15_25 = -1;
MPRINT(EM_DIAGRAM):   _15_26 = -1;
MPRINT(EM_DIAGRAM):   _15_27 = -1;
MPRINT(EM_DIAGRAM):   _15_28 = -1;
MPRINT(EM_DIAGRAM):   _15_29 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _15_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _15_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _15_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _15_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _15_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   _15_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _15_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _15_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   _15_20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   _15_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _15_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   _15_25 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _15_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   _15_21 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   _15_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   _15_28 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   _15_29 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   _15_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   _15_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   _15_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   _15_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   _15_27 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   _15_26 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   _15_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   _15_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   _15_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   _15_22 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   _15_23 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   _15_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _15_0 = .;
MPRINT(EM_DIAGRAM):   _15_1 = .;
MPRINT(EM_DIAGRAM):   _15_2 = .;
MPRINT(EM_DIAGRAM):   _15_3 = .;
MPRINT(EM_DIAGRAM):   _15_4 = .;
MPRINT(EM_DIAGRAM):   _15_5 = .;
MPRINT(EM_DIAGRAM):   _15_6 = .;
MPRINT(EM_DIAGRAM):   _15_7 = .;
MPRINT(EM_DIAGRAM):   _15_8 = .;
MPRINT(EM_DIAGRAM):   _15_9 = .;
MPRINT(EM_DIAGRAM):   _15_10 = .;
MPRINT(EM_DIAGRAM):   _15_11 = .;
MPRINT(EM_DIAGRAM):   _15_12 = .;
MPRINT(EM_DIAGRAM):   _15_13 = .;
MPRINT(EM_DIAGRAM):   _15_14 = .;
MPRINT(EM_DIAGRAM):   _15_15 = .;
MPRINT(EM_DIAGRAM):   _15_16 = .;
MPRINT(EM_DIAGRAM):   _15_17 = .;
MPRINT(EM_DIAGRAM):   _15_18 = .;
MPRINT(EM_DIAGRAM):   _15_19 = .;
MPRINT(EM_DIAGRAM):   _15_20 = .;
MPRINT(EM_DIAGRAM):   _15_21 = .;
MPRINT(EM_DIAGRAM):   _15_22 = .;
MPRINT(EM_DIAGRAM):   _15_23 = .;
MPRINT(EM_DIAGRAM):   _15_24 = .;
MPRINT(EM_DIAGRAM):   _15_25 = .;
MPRINT(EM_DIAGRAM):   _15_26 = .;
MPRINT(EM_DIAGRAM):   _15_27 = .;
MPRINT(EM_DIAGRAM):   _15_28 = .;
MPRINT(EM_DIAGRAM):   _15_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Sex ;
MPRINT(EM_DIAGRAM):   drop _16_0 ;
MPRINT(EM_DIAGRAM):   if missing( Sex ) then do;
MPRINT(EM_DIAGRAM):   _16_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Sex , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _16_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _16_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _16_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Smoker ;
MPRINT(EM_DIAGRAM):   drop _17_0 ;
MPRINT(EM_DIAGRAM):   if missing( Smoker ) then do;
MPRINT(EM_DIAGRAM):   _17_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Smoker , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _17_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _17_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _17_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Stroke ;
MPRINT(EM_DIAGRAM):   drop _18_0 ;
MPRINT(EM_DIAGRAM):   if missing( Stroke ) then do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Stroke , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _18_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _18_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Veggies ;
MPRINT(EM_DIAGRAM):   drop _19_0 ;
MPRINT(EM_DIAGRAM):   if missing( Veggies ) then do;
MPRINT(EM_DIAGRAM):   _19_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Veggies , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _19_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _19_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _19_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.0182856146;
MPRINT(EM_DIAGRAM):   _P1 = 0.8453637803;
MPRINT(EM_DIAGRAM):   _P2 = 0.1363506052;
MPRINT(EM_DIAGRAM):   goto REGDR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0 _LP1;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP1 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00414408060447 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.13667778881006 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: AnyHealthcare ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04129829660428) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.01134240700953) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: BMI ;
MPRINT(EM_DIAGRAM):   _TEMP = BMI ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0200623141319 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.08506112237518 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: CholCheck ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17587106324267) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.55662872875129) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: DiffWalk ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06807944539291) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.05202966847364) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.60694703791874) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31516609483213) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.82684405280263) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01654127164125) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.84291708454748) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.04388954912298) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59860435233338) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.10355460753732) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.65791585672254) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.0391054606201) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   *** Effect: Fruits ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00825788632312) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01592801277223) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   *** Effect: GenHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.45630003633515) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.15205407825125) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.24694986154977) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.46937748191537) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0209212485904) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17900029952603) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.15603108215171) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.60710699757471) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   *** Effect: HeartDiseaseorAttack ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15963684339905) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.12861220614246) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: HighBP ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18828052724326) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.35743173485255) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: HighChol ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02142564733405) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.29229370514654) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   *** Effect: HvyAlcoholConsump ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.29433685527321) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.37659452228019) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.12434962949832) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.18856597637964) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01180272821841) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.11439362790813) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01705497839294) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09639520284216) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16273811627458) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.05882989712437) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04489073871808) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.01011682655444) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16378586765171) * _TEMP * _11_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.10710055621972) * _TEMP * _11_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00937344173016) * _TEMP * _11_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.11482137296246) * _TEMP * _11_6;
MPRINT(EM_DIAGRAM):   *** Effect: MentHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.04800942080717) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09001843225783) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.22590900027558) * _TEMP * _12_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.12737525667088) * _TEMP * _12_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.10106475746128) * _TEMP * _12_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.02132573547151) * _TEMP * _12_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97608762045018) * _TEMP * _12_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.05954724291336) * _TEMP * _12_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.36921172040877) * _TEMP * _12_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00917182457836) * _TEMP * _12_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.4024070411314) * _TEMP * _12_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00028467971349) * _TEMP * _12_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.57286058448533) * _TEMP * _12_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.00303496928288) * _TEMP * _12_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.22406298298951) * _TEMP * _12_7;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.14141042252959) * _TEMP * _12_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.26089551363143) * _TEMP * _12_8;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.16984609450576) * _TEMP * _12_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.78331980851102) * _TEMP * _12_9;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.1866293691781) * _TEMP * _12_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.3420742122432) * _TEMP * _12_10;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02472082181025) * _TEMP * _12_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.53270611964659) * _TEMP * _12_11;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.46881777462575) * _TEMP * _12_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.19289982028081) * _TEMP * _12_12;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.37014526072922) * _TEMP * _12_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.01395050063776) * _TEMP * _12_13;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.89154952382611) * _TEMP * _12_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.16232174446058) * _TEMP * _12_14;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.10572920348172) * _TEMP * _12_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50371736370442) * _TEMP * _12_15;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.13967193430089) * _TEMP * _12_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.98387749194182) * _TEMP * _12_16;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.47921746060105) * _TEMP * _12_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.99086451305) * _TEMP * _12_17;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.023092747883) * _TEMP * _12_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.28142994579901) * _TEMP * _12_18;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.89772782364261) * _TEMP * _12_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.94345646177794) * _TEMP * _12_19;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -1.09031201100748) * _TEMP * _12_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97809107781656) * _TEMP * _12_20;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02237950541983) * _TEMP * _12_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50095292613488) * _TEMP * _12_21;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.61042702666207) * _TEMP * _12_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.2358636579636) * _TEMP * _12_22;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.5524942029042) * _TEMP * _12_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97436105907883) * _TEMP * _12_23;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.83058093396395) * _TEMP * _12_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.08616155188671) * _TEMP * _12_24;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.55101121901185) * _TEMP * _12_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.63435259026731) * _TEMP * _12_25;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09583605477333) * _TEMP * _12_25;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.75944421342236) * _TEMP * _12_26;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.29195079721774) * _TEMP * _12_26;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.89917056628234) * _TEMP * _12_27;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.34751286616378) * _TEMP * _12_27;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.83707368950426) * _TEMP * _12_28;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.15686423463904) * _TEMP * _12_28;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.86069646817922) * _TEMP * _12_29;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17231839808172) * _TEMP * _12_29;
MPRINT(EM_DIAGRAM):   *** Effect: NoDocbcCost ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.21747567652734) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02254687053978) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   *** Effect: PhysActivity ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07210365596365) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01244841943964) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   *** Effect: PhysHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36138060527011) * _TEMP * _15_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17374522621538) * _TEMP * _15_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4552745250487) * _TEMP * _15_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31212557191848) * _TEMP * _15_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45210754388406) * _TEMP * _15_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.28312681020051) * _TEMP * _15_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27470252831399) * _TEMP * _15_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.0910407354241) * _TEMP * _15_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40704621270345) * _TEMP * _15_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.26714677181421) * _TEMP * _15_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.26802299887237) * _TEMP * _15_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.14212354331234) * _TEMP * _15_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36873379683245) * _TEMP * _15_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.35979265520491) * _TEMP * _15_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.472909760972) * _TEMP * _15_7;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.14453420017303) * _TEMP * _15_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00470930079283) * _TEMP * _15_8;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31156700645887) * _TEMP * _15_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.100605976329) * _TEMP * _15_9;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.47319873636302) * _TEMP * _15_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14897089808618) * _TEMP * _15_10;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.21649730575151) * _TEMP * _15_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.37161851587237) * _TEMP * _15_11;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 4.10215853477496) * _TEMP * _15_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4813008065127) * _TEMP * _15_12;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.12766437859842) * _TEMP * _15_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02321777568077) * _TEMP * _15_13;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.7581909524469) * _TEMP * _15_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.67576609678817) * _TEMP * _15_14;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09842381735271) * _TEMP * _15_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.23708709525644) * _TEMP * _15_15;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17539778485889) * _TEMP * _15_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.559304119879) * _TEMP * _15_16;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.38094168561267) * _TEMP * _15_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.677572441654) * _TEMP * _15_17;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.66874857849847) * _TEMP * _15_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66233639702328) * _TEMP * _15_18;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02661272303472) * _TEMP * _15_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.2773101756959) * _TEMP * _15_19;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.9198933613483) * _TEMP * _15_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.8779246532807) * _TEMP * _15_20;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.22221154394122) * _TEMP * _15_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14532612258424) * _TEMP * _15_21;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09184823321173) * _TEMP * _15_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.39424527999194) * _TEMP * _15_22;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.36201370672091) * _TEMP * _15_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.7694506017102) * _TEMP * _15_23;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.46979004263545) * _TEMP * _15_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04927218119768) * _TEMP * _15_24;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.22090819666088) * _TEMP * _15_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71101204509658) * _TEMP * _15_25;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.15937382520162) * _TEMP * _15_25;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17219250104969) * _TEMP * _15_26;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -1.18135511316386) * _TEMP * _15_26;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.06506666055701) * _TEMP * _15_27;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.40066130465414) * _TEMP * _15_27;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04168627331738) * _TEMP * _15_28;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.08103664415612) * _TEMP * _15_28;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40114707530503) * _TEMP * _15_29;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.26274616812588) * _TEMP * _15_29;
MPRINT(EM_DIAGRAM):   *** Effect: Sex ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06889454676877) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.11473053909985) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   *** Effect: Smoker ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01682413014641) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00023043867139) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   *** Effect: Stroke ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19674442740887) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.06693452991956) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   *** Effect: Veggies ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02944512919683) * _TEMP * _19_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.02037458880704) * _TEMP * _19_0;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1 _P2;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
MPRINT(EM_DIAGRAM):   _LP0 = -2.35691380760196 + _LP0;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   _LP1 = 6.30166339755406 + _LP1;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP1 then _LPMAX = _LP1;
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP1 = exp(_LP1 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
MPRINT(EM_DIAGRAM):   _P2 = 1 / (_LPMAX + _LP0 + _LP1);
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P2;
MPRINT(EM_DIAGRAM):   _P1 = _LP1 * _P2;
MPRINT(EM_DIAGRAM):   _P2 = _LPMAX * _P2;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionprediabetes = .;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionno_diabetes = .;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictiondiabetes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictionprediabetes = 'Residual: Diabetes_Prediction=prediabetes' ;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictionno_diabetes = 'Residual: Diabetes_Prediction=no diabetes' ;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictiondiabetes = 'Residual: Diabetes_Prediction=diabetes' ;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionprediabetes = - _P0;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionno_diabetes = - _P1;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictiondiabetes = - _P2;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_Diabetes_Predictionprediabetes = R_Diabetes_Predictionprediabetes + 1;
MPRINT(EM_DIAGRAM):   when (1) R_Diabetes_Predictionno_diabetes = R_Diabetes_Predictionno_diabetes + 1;
MPRINT(EM_DIAGRAM):   when (2) R_Diabetes_Predictiondiabetes = R_Diabetes_Predictiondiabetes + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictionprediabetes = 'Predicted: Diabetes_Prediction=prediabetes' ;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictionno_diabetes = 'Predicted: Diabetes_Prediction=no diabetes' ;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictiondiabetes = 'Predicted: Diabetes_Prediction=diabetes' ;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictionprediabetes = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictionno_diabetes = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictiondiabetes = _P2;
MPRINT(EM_DIAGRAM):   if (_P2 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P2;
MPRINT(EM_DIAGRAM):   _IY = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_Diabetes_Prediction = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   U_Diabetes_Prediction = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
94065      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS2.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.36 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
94066      quit;
94067      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
94068      filename emflow "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
94069      *------------------------------------------------------------*;
94070      * Reg: Scoring VALIDATE data;
94071      *------------------------------------------------------------*;
94072      data EMWS2.Reg_VALIDATE
94073      / view=EMWS2.Reg_VALIDATE
94074      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_VALIDATE / view=EMWS2.Reg_VALIDATE ;
94075      set EMWS2.Part_VALIDATE
94076      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_VALIDATE ;
94077      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_Diabetes_Prediction $ 11;
MPRINT(EM_DIAGRAM):   label I_Diabetes_Prediction = 'Into: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REGDRF [3] $11 _temporary_ ('PREDIABETES' 'NO DIABETES' 'DIABETES' );
MPRINT(EM_DIAGRAM):   label U_Diabetes_Prediction = 'Unnormalized Into: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   length U_Diabetes_Prediction $ 11;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   array REGDRU[3] $ 11 _temporary_ ('prediabetes' 'no diabetes' 'diabetes   ' );
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Diabetes_Prediction ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_Diabetes_Prediction = 'From: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   length F_Diabetes_Prediction $ 11;
MPRINT(DMNORMCP):   F_Diabetes_Prediction=dmnorm(Diabetes_Prediction,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if missing( Diabetes_Prediction ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_Diabetes_Prediction = 'NO DIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Diabetes_Prediction = 'DIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Diabetes_Prediction = 'PREDIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BMI for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BMI ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AnyHealthcare ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
MPRINT(EM_DIAGRAM):   if missing( AnyHealthcare ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( AnyHealthcare , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CholCheck ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( CholCheck ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( CholCheck , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DiffWalk ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
MPRINT(EM_DIAGRAM):   if missing( DiffWalk ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DiffWalk , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Education , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Fruits ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
MPRINT(EM_DIAGRAM):   if missing( Fruits ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Fruits , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GenHlth ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GenHlth ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GenHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HeartDiseaseorAttack ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( HeartDiseaseorAttack ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HeartDiseaseorAttack , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighBP ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( HighBP ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighBP , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighChol ;
MPRINT(EM_DIAGRAM):   drop _9_0 ;
MPRINT(EM_DIAGRAM):   if missing( HighChol ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighChol , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HvyAlcoholConsump ;
MPRINT(EM_DIAGRAM):   drop _10_0 ;
MPRINT(EM_DIAGRAM):   if missing( HvyAlcoholConsump ) then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HvyAlcoholConsump , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Income ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 _11_4 _11_5 _11_6 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_4 = 0;
MPRINT(EM_DIAGRAM):   _11_5 = 0;
MPRINT(EM_DIAGRAM):   _11_6 = 0;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_5 = .;
MPRINT(EM_DIAGRAM):   _11_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Income , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _11_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _11_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _11_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_4 = -1;
MPRINT(EM_DIAGRAM):   _11_5 = -1;
MPRINT(EM_DIAGRAM):   _11_6 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_5 = .;
MPRINT(EM_DIAGRAM):   _11_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MentHlth ;
MPRINT(EM_DIAGRAM):   drop _12_0 _12_1 _12_2 _12_3 _12_4 _12_5 _12_6 _12_7 _12_8 _12_9 _12_10 _12_11 _12_12 _12_13 _12_14 _12_15 _12_16 _12_17 _12_18 _12_19 _12_20 _12_21 _12_22 _12_23 _12_24 _12_25 _12_26 _12_27 _12_28 _12_29 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _12_0 = 0;
MPRINT(EM_DIAGRAM):   _12_1 = 0;
MPRINT(EM_DIAGRAM):   _12_2 = 0;
MPRINT(EM_DIAGRAM):   _12_3 = 0;
MPRINT(EM_DIAGRAM):   _12_4 = 0;
MPRINT(EM_DIAGRAM):   _12_5 = 0;
MPRINT(EM_DIAGRAM):   _12_6 = 0;
MPRINT(EM_DIAGRAM):   _12_7 = 0;
MPRINT(EM_DIAGRAM):   _12_8 = 0;
MPRINT(EM_DIAGRAM):   _12_9 = 0;
MPRINT(EM_DIAGRAM):   _12_10 = 0;
MPRINT(EM_DIAGRAM):   _12_11 = 0;
MPRINT(EM_DIAGRAM):   _12_12 = 0;
MPRINT(EM_DIAGRAM):   _12_13 = 0;
MPRINT(EM_DIAGRAM):   _12_14 = 0;
MPRINT(EM_DIAGRAM):   _12_15 = 0;
MPRINT(EM_DIAGRAM):   _12_16 = 0;
MPRINT(EM_DIAGRAM):   _12_17 = 0;
MPRINT(EM_DIAGRAM):   _12_18 = 0;
MPRINT(EM_DIAGRAM):   _12_19 = 0;
MPRINT(EM_DIAGRAM):   _12_20 = 0;
MPRINT(EM_DIAGRAM):   _12_21 = 0;
MPRINT(EM_DIAGRAM):   _12_22 = 0;
MPRINT(EM_DIAGRAM):   _12_23 = 0;
MPRINT(EM_DIAGRAM):   _12_24 = 0;
MPRINT(EM_DIAGRAM):   _12_25 = 0;
MPRINT(EM_DIAGRAM):   _12_26 = 0;
MPRINT(EM_DIAGRAM):   _12_27 = 0;
MPRINT(EM_DIAGRAM):   _12_28 = 0;
MPRINT(EM_DIAGRAM):   _12_29 = 0;
MPRINT(EM_DIAGRAM):   if missing( MentHlth ) then do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_1 = .;
MPRINT(EM_DIAGRAM):   _12_2 = .;
MPRINT(EM_DIAGRAM):   _12_3 = .;
MPRINT(EM_DIAGRAM):   _12_4 = .;
MPRINT(EM_DIAGRAM):   _12_5 = .;
MPRINT(EM_DIAGRAM):   _12_6 = .;
MPRINT(EM_DIAGRAM):   _12_7 = .;
MPRINT(EM_DIAGRAM):   _12_8 = .;
MPRINT(EM_DIAGRAM):   _12_9 = .;
MPRINT(EM_DIAGRAM):   _12_10 = .;
MPRINT(EM_DIAGRAM):   _12_11 = .;
MPRINT(EM_DIAGRAM):   _12_12 = .;
MPRINT(EM_DIAGRAM):   _12_13 = .;
MPRINT(EM_DIAGRAM):   _12_14 = .;
MPRINT(EM_DIAGRAM):   _12_15 = .;
MPRINT(EM_DIAGRAM):   _12_16 = .;
MPRINT(EM_DIAGRAM):   _12_17 = .;
MPRINT(EM_DIAGRAM):   _12_18 = .;
MPRINT(EM_DIAGRAM):   _12_19 = .;
MPRINT(EM_DIAGRAM):   _12_20 = .;
MPRINT(EM_DIAGRAM):   _12_21 = .;
MPRINT(EM_DIAGRAM):   _12_22 = .;
MPRINT(EM_DIAGRAM):   _12_23 = .;
MPRINT(EM_DIAGRAM):   _12_24 = .;
MPRINT(EM_DIAGRAM):   _12_25 = .;
MPRINT(EM_DIAGRAM):   _12_26 = .;
MPRINT(EM_DIAGRAM):   _12_27 = .;
MPRINT(EM_DIAGRAM):   _12_28 = .;
MPRINT(EM_DIAGRAM):   _12_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MentHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _12_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _12_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   _12_0 = -1;
MPRINT(EM_DIAGRAM):   _12_1 = -1;
MPRINT(EM_DIAGRAM):   _12_2 = -1;
MPRINT(EM_DIAGRAM):   _12_3 = -1;
MPRINT(EM_DIAGRAM):   _12_4 = -1;
MPRINT(EM_DIAGRAM):   _12_5 = -1;
MPRINT(EM_DIAGRAM):   _12_6 = -1;
MPRINT(EM_DIAGRAM):   _12_7 = -1;
MPRINT(EM_DIAGRAM):   _12_8 = -1;
MPRINT(EM_DIAGRAM):   _12_9 = -1;
MPRINT(EM_DIAGRAM):   _12_10 = -1;
MPRINT(EM_DIAGRAM):   _12_11 = -1;
MPRINT(EM_DIAGRAM):   _12_12 = -1;
MPRINT(EM_DIAGRAM):   _12_13 = -1;
MPRINT(EM_DIAGRAM):   _12_14 = -1;
MPRINT(EM_DIAGRAM):   _12_15 = -1;
MPRINT(EM_DIAGRAM):   _12_16 = -1;
MPRINT(EM_DIAGRAM):   _12_17 = -1;
MPRINT(EM_DIAGRAM):   _12_18 = -1;
MPRINT(EM_DIAGRAM):   _12_19 = -1;
MPRINT(EM_DIAGRAM):   _12_20 = -1;
MPRINT(EM_DIAGRAM):   _12_21 = -1;
MPRINT(EM_DIAGRAM):   _12_22 = -1;
MPRINT(EM_DIAGRAM):   _12_23 = -1;
MPRINT(EM_DIAGRAM):   _12_24 = -1;
MPRINT(EM_DIAGRAM):   _12_25 = -1;
MPRINT(EM_DIAGRAM):   _12_26 = -1;
MPRINT(EM_DIAGRAM):   _12_27 = -1;
MPRINT(EM_DIAGRAM):   _12_28 = -1;
MPRINT(EM_DIAGRAM):   _12_29 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _12_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _12_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _12_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _12_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   _12_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _12_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   _12_20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _12_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   _12_25 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   _12_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _12_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _12_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   _12_28 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   _12_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   _12_21 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   _12_29 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   _12_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   _12_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   _12_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   _12_27 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   _12_22 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   _12_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   _12_26 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   _12_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   _12_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   _12_23 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   _12_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   _12_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_1 = .;
MPRINT(EM_DIAGRAM):   _12_2 = .;
MPRINT(EM_DIAGRAM):   _12_3 = .;
MPRINT(EM_DIAGRAM):   _12_4 = .;
MPRINT(EM_DIAGRAM):   _12_5 = .;
MPRINT(EM_DIAGRAM):   _12_6 = .;
MPRINT(EM_DIAGRAM):   _12_7 = .;
MPRINT(EM_DIAGRAM):   _12_8 = .;
MPRINT(EM_DIAGRAM):   _12_9 = .;
MPRINT(EM_DIAGRAM):   _12_10 = .;
MPRINT(EM_DIAGRAM):   _12_11 = .;
MPRINT(EM_DIAGRAM):   _12_12 = .;
MPRINT(EM_DIAGRAM):   _12_13 = .;
MPRINT(EM_DIAGRAM):   _12_14 = .;
MPRINT(EM_DIAGRAM):   _12_15 = .;
MPRINT(EM_DIAGRAM):   _12_16 = .;
MPRINT(EM_DIAGRAM):   _12_17 = .;
MPRINT(EM_DIAGRAM):   _12_18 = .;
MPRINT(EM_DIAGRAM):   _12_19 = .;
MPRINT(EM_DIAGRAM):   _12_20 = .;
MPRINT(EM_DIAGRAM):   _12_21 = .;
MPRINT(EM_DIAGRAM):   _12_22 = .;
MPRINT(EM_DIAGRAM):   _12_23 = .;
MPRINT(EM_DIAGRAM):   _12_24 = .;
MPRINT(EM_DIAGRAM):   _12_25 = .;
MPRINT(EM_DIAGRAM):   _12_26 = .;
MPRINT(EM_DIAGRAM):   _12_27 = .;
MPRINT(EM_DIAGRAM):   _12_28 = .;
MPRINT(EM_DIAGRAM):   _12_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for NoDocbcCost ;
MPRINT(EM_DIAGRAM):   drop _13_0 ;
MPRINT(EM_DIAGRAM):   if missing( NoDocbcCost ) then do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( NoDocbcCost , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysActivity ;
MPRINT(EM_DIAGRAM):   drop _14_0 ;
MPRINT(EM_DIAGRAM):   if missing( PhysActivity ) then do;
MPRINT(EM_DIAGRAM):   _14_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysActivity , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _14_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _14_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _14_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysHlth ;
MPRINT(EM_DIAGRAM):   drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 _15_7 _15_8 _15_9 _15_10 _15_11 _15_12 _15_13 _15_14 _15_15 _15_16 _15_17 _15_18 _15_19 _15_20 _15_21 _15_22 _15_23 _15_24 _15_25 _15_26 _15_27 _15_28 _15_29 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _15_0 = 0;
MPRINT(EM_DIAGRAM):   _15_1 = 0;
MPRINT(EM_DIAGRAM):   _15_2 = 0;
MPRINT(EM_DIAGRAM):   _15_3 = 0;
MPRINT(EM_DIAGRAM):   _15_4 = 0;
MPRINT(EM_DIAGRAM):   _15_5 = 0;
MPRINT(EM_DIAGRAM):   _15_6 = 0;
MPRINT(EM_DIAGRAM):   _15_7 = 0;
MPRINT(EM_DIAGRAM):   _15_8 = 0;
MPRINT(EM_DIAGRAM):   _15_9 = 0;
MPRINT(EM_DIAGRAM):   _15_10 = 0;
MPRINT(EM_DIAGRAM):   _15_11 = 0;
MPRINT(EM_DIAGRAM):   _15_12 = 0;
MPRINT(EM_DIAGRAM):   _15_13 = 0;
MPRINT(EM_DIAGRAM):   _15_14 = 0;
MPRINT(EM_DIAGRAM):   _15_15 = 0;
MPRINT(EM_DIAGRAM):   _15_16 = 0;
MPRINT(EM_DIAGRAM):   _15_17 = 0;
MPRINT(EM_DIAGRAM):   _15_18 = 0;
MPRINT(EM_DIAGRAM):   _15_19 = 0;
MPRINT(EM_DIAGRAM):   _15_20 = 0;
MPRINT(EM_DIAGRAM):   _15_21 = 0;
MPRINT(EM_DIAGRAM):   _15_22 = 0;
MPRINT(EM_DIAGRAM):   _15_23 = 0;
MPRINT(EM_DIAGRAM):   _15_24 = 0;
MPRINT(EM_DIAGRAM):   _15_25 = 0;
MPRINT(EM_DIAGRAM):   _15_26 = 0;
MPRINT(EM_DIAGRAM):   _15_27 = 0;
MPRINT(EM_DIAGRAM):   _15_28 = 0;
MPRINT(EM_DIAGRAM):   _15_29 = 0;
MPRINT(EM_DIAGRAM):   if missing( PhysHlth ) then do;
MPRINT(EM_DIAGRAM):   _15_0 = .;
MPRINT(EM_DIAGRAM):   _15_1 = .;
MPRINT(EM_DIAGRAM):   _15_2 = .;
MPRINT(EM_DIAGRAM):   _15_3 = .;
MPRINT(EM_DIAGRAM):   _15_4 = .;
MPRINT(EM_DIAGRAM):   _15_5 = .;
MPRINT(EM_DIAGRAM):   _15_6 = .;
MPRINT(EM_DIAGRAM):   _15_7 = .;
MPRINT(EM_DIAGRAM):   _15_8 = .;
MPRINT(EM_DIAGRAM):   _15_9 = .;
MPRINT(EM_DIAGRAM):   _15_10 = .;
MPRINT(EM_DIAGRAM):   _15_11 = .;
MPRINT(EM_DIAGRAM):   _15_12 = .;
MPRINT(EM_DIAGRAM):   _15_13 = .;
MPRINT(EM_DIAGRAM):   _15_14 = .;
MPRINT(EM_DIAGRAM):   _15_15 = .;
MPRINT(EM_DIAGRAM):   _15_16 = .;
MPRINT(EM_DIAGRAM):   _15_17 = .;
MPRINT(EM_DIAGRAM):   _15_18 = .;
MPRINT(EM_DIAGRAM):   _15_19 = .;
MPRINT(EM_DIAGRAM):   _15_20 = .;
MPRINT(EM_DIAGRAM):   _15_21 = .;
MPRINT(EM_DIAGRAM):   _15_22 = .;
MPRINT(EM_DIAGRAM):   _15_23 = .;
MPRINT(EM_DIAGRAM):   _15_24 = .;
MPRINT(EM_DIAGRAM):   _15_25 = .;
MPRINT(EM_DIAGRAM):   _15_26 = .;
MPRINT(EM_DIAGRAM):   _15_27 = .;
MPRINT(EM_DIAGRAM):   _15_28 = .;
MPRINT(EM_DIAGRAM):   _15_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _15_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   _15_0 = -1;
MPRINT(EM_DIAGRAM):   _15_1 = -1;
MPRINT(EM_DIAGRAM):   _15_2 = -1;
MPRINT(EM_DIAGRAM):   _15_3 = -1;
MPRINT(EM_DIAGRAM):   _15_4 = -1;
MPRINT(EM_DIAGRAM):   _15_5 = -1;
MPRINT(EM_DIAGRAM):   _15_6 = -1;
MPRINT(EM_DIAGRAM):   _15_7 = -1;
MPRINT(EM_DIAGRAM):   _15_8 = -1;
MPRINT(EM_DIAGRAM):   _15_9 = -1;
MPRINT(EM_DIAGRAM):   _15_10 = -1;
MPRINT(EM_DIAGRAM):   _15_11 = -1;
MPRINT(EM_DIAGRAM):   _15_12 = -1;
MPRINT(EM_DIAGRAM):   _15_13 = -1;
MPRINT(EM_DIAGRAM):   _15_14 = -1;
MPRINT(EM_DIAGRAM):   _15_15 = -1;
MPRINT(EM_DIAGRAM):   _15_16 = -1;
MPRINT(EM_DIAGRAM):   _15_17 = -1;
MPRINT(EM_DIAGRAM):   _15_18 = -1;
MPRINT(EM_DIAGRAM):   _15_19 = -1;
MPRINT(EM_DIAGRAM):   _15_20 = -1;
MPRINT(EM_DIAGRAM):   _15_21 = -1;
MPRINT(EM_DIAGRAM):   _15_22 = -1;
MPRINT(EM_DIAGRAM):   _15_23 = -1;
MPRINT(EM_DIAGRAM):   _15_24 = -1;
MPRINT(EM_DIAGRAM):   _15_25 = -1;
MPRINT(EM_DIAGRAM):   _15_26 = -1;
MPRINT(EM_DIAGRAM):   _15_27 = -1;
MPRINT(EM_DIAGRAM):   _15_28 = -1;
MPRINT(EM_DIAGRAM):   _15_29 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _15_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _15_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _15_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _15_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _15_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   _15_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _15_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _15_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   _15_20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   _15_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _15_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   _15_25 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _15_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   _15_21 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   _15_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   _15_28 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   _15_29 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   _15_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   _15_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   _15_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   _15_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   _15_27 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   _15_26 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   _15_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   _15_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   _15_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   _15_22 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   _15_23 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   _15_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _15_0 = .;
MPRINT(EM_DIAGRAM):   _15_1 = .;
MPRINT(EM_DIAGRAM):   _15_2 = .;
MPRINT(EM_DIAGRAM):   _15_3 = .;
MPRINT(EM_DIAGRAM):   _15_4 = .;
MPRINT(EM_DIAGRAM):   _15_5 = .;
MPRINT(EM_DIAGRAM):   _15_6 = .;
MPRINT(EM_DIAGRAM):   _15_7 = .;
MPRINT(EM_DIAGRAM):   _15_8 = .;
MPRINT(EM_DIAGRAM):   _15_9 = .;
MPRINT(EM_DIAGRAM):   _15_10 = .;
MPRINT(EM_DIAGRAM):   _15_11 = .;
MPRINT(EM_DIAGRAM):   _15_12 = .;
MPRINT(EM_DIAGRAM):   _15_13 = .;
MPRINT(EM_DIAGRAM):   _15_14 = .;
MPRINT(EM_DIAGRAM):   _15_15 = .;
MPRINT(EM_DIAGRAM):   _15_16 = .;
MPRINT(EM_DIAGRAM):   _15_17 = .;
MPRINT(EM_DIAGRAM):   _15_18 = .;
MPRINT(EM_DIAGRAM):   _15_19 = .;
MPRINT(EM_DIAGRAM):   _15_20 = .;
MPRINT(EM_DIAGRAM):   _15_21 = .;
MPRINT(EM_DIAGRAM):   _15_22 = .;
MPRINT(EM_DIAGRAM):   _15_23 = .;
MPRINT(EM_DIAGRAM):   _15_24 = .;
MPRINT(EM_DIAGRAM):   _15_25 = .;
MPRINT(EM_DIAGRAM):   _15_26 = .;
MPRINT(EM_DIAGRAM):   _15_27 = .;
MPRINT(EM_DIAGRAM):   _15_28 = .;
MPRINT(EM_DIAGRAM):   _15_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Sex ;
MPRINT(EM_DIAGRAM):   drop _16_0 ;
MPRINT(EM_DIAGRAM):   if missing( Sex ) then do;
MPRINT(EM_DIAGRAM):   _16_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Sex , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _16_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _16_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _16_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Smoker ;
MPRINT(EM_DIAGRAM):   drop _17_0 ;
MPRINT(EM_DIAGRAM):   if missing( Smoker ) then do;
MPRINT(EM_DIAGRAM):   _17_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Smoker , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _17_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _17_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _17_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Stroke ;
MPRINT(EM_DIAGRAM):   drop _18_0 ;
MPRINT(EM_DIAGRAM):   if missing( Stroke ) then do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Stroke , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _18_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _18_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Veggies ;
MPRINT(EM_DIAGRAM):   drop _19_0 ;
MPRINT(EM_DIAGRAM):   if missing( Veggies ) then do;
MPRINT(EM_DIAGRAM):   _19_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Veggies , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _19_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _19_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _19_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.0182856146;
MPRINT(EM_DIAGRAM):   _P1 = 0.8453637803;
MPRINT(EM_DIAGRAM):   _P2 = 0.1363506052;
MPRINT(EM_DIAGRAM):   goto REGDR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0 _LP1;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP1 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00414408060447 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.13667778881006 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: AnyHealthcare ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04129829660428) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.01134240700953) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: BMI ;
MPRINT(EM_DIAGRAM):   _TEMP = BMI ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0200623141319 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.08506112237518 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: CholCheck ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17587106324267) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.55662872875129) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: DiffWalk ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06807944539291) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.05202966847364) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.60694703791874) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31516609483213) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.82684405280263) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01654127164125) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.84291708454748) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.04388954912298) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59860435233338) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.10355460753732) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.65791585672254) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.0391054606201) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   *** Effect: Fruits ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00825788632312) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01592801277223) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   *** Effect: GenHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.45630003633515) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.15205407825125) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.24694986154977) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.46937748191537) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0209212485904) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17900029952603) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.15603108215171) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.60710699757471) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   *** Effect: HeartDiseaseorAttack ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15963684339905) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.12861220614246) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: HighBP ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18828052724326) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.35743173485255) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: HighChol ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02142564733405) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.29229370514654) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   *** Effect: HvyAlcoholConsump ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.29433685527321) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.37659452228019) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.12434962949832) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.18856597637964) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01180272821841) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.11439362790813) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01705497839294) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09639520284216) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16273811627458) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.05882989712437) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04489073871808) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.01011682655444) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16378586765171) * _TEMP * _11_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.10710055621972) * _TEMP * _11_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00937344173016) * _TEMP * _11_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.11482137296246) * _TEMP * _11_6;
MPRINT(EM_DIAGRAM):   *** Effect: MentHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.04800942080717) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09001843225783) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.22590900027558) * _TEMP * _12_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.12737525667088) * _TEMP * _12_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.10106475746128) * _TEMP * _12_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.02132573547151) * _TEMP * _12_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97608762045018) * _TEMP * _12_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.05954724291336) * _TEMP * _12_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.36921172040877) * _TEMP * _12_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00917182457836) * _TEMP * _12_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.4024070411314) * _TEMP * _12_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00028467971349) * _TEMP * _12_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.57286058448533) * _TEMP * _12_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.00303496928288) * _TEMP * _12_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.22406298298951) * _TEMP * _12_7;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.14141042252959) * _TEMP * _12_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.26089551363143) * _TEMP * _12_8;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.16984609450576) * _TEMP * _12_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.78331980851102) * _TEMP * _12_9;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.1866293691781) * _TEMP * _12_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.3420742122432) * _TEMP * _12_10;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02472082181025) * _TEMP * _12_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.53270611964659) * _TEMP * _12_11;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.46881777462575) * _TEMP * _12_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.19289982028081) * _TEMP * _12_12;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.37014526072922) * _TEMP * _12_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.01395050063776) * _TEMP * _12_13;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.89154952382611) * _TEMP * _12_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.16232174446058) * _TEMP * _12_14;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.10572920348172) * _TEMP * _12_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50371736370442) * _TEMP * _12_15;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.13967193430089) * _TEMP * _12_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.98387749194182) * _TEMP * _12_16;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.47921746060105) * _TEMP * _12_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.99086451305) * _TEMP * _12_17;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.023092747883) * _TEMP * _12_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.28142994579901) * _TEMP * _12_18;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.89772782364261) * _TEMP * _12_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.94345646177794) * _TEMP * _12_19;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -1.09031201100748) * _TEMP * _12_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97809107781656) * _TEMP * _12_20;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02237950541983) * _TEMP * _12_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50095292613488) * _TEMP * _12_21;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.61042702666207) * _TEMP * _12_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.2358636579636) * _TEMP * _12_22;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.5524942029042) * _TEMP * _12_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97436105907883) * _TEMP * _12_23;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.83058093396395) * _TEMP * _12_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.08616155188671) * _TEMP * _12_24;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.55101121901185) * _TEMP * _12_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.63435259026731) * _TEMP * _12_25;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09583605477333) * _TEMP * _12_25;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.75944421342236) * _TEMP * _12_26;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.29195079721774) * _TEMP * _12_26;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.89917056628234) * _TEMP * _12_27;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.34751286616378) * _TEMP * _12_27;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.83707368950426) * _TEMP * _12_28;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.15686423463904) * _TEMP * _12_28;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.86069646817922) * _TEMP * _12_29;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17231839808172) * _TEMP * _12_29;
MPRINT(EM_DIAGRAM):   *** Effect: NoDocbcCost ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.21747567652734) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02254687053978) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   *** Effect: PhysActivity ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07210365596365) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01244841943964) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   *** Effect: PhysHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36138060527011) * _TEMP * _15_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17374522621538) * _TEMP * _15_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4552745250487) * _TEMP * _15_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31212557191848) * _TEMP * _15_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45210754388406) * _TEMP * _15_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.28312681020051) * _TEMP * _15_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27470252831399) * _TEMP * _15_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.0910407354241) * _TEMP * _15_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40704621270345) * _TEMP * _15_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.26714677181421) * _TEMP * _15_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.26802299887237) * _TEMP * _15_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.14212354331234) * _TEMP * _15_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36873379683245) * _TEMP * _15_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.35979265520491) * _TEMP * _15_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.472909760972) * _TEMP * _15_7;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.14453420017303) * _TEMP * _15_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00470930079283) * _TEMP * _15_8;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31156700645887) * _TEMP * _15_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.100605976329) * _TEMP * _15_9;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.47319873636302) * _TEMP * _15_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14897089808618) * _TEMP * _15_10;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.21649730575151) * _TEMP * _15_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.37161851587237) * _TEMP * _15_11;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 4.10215853477496) * _TEMP * _15_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4813008065127) * _TEMP * _15_12;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.12766437859842) * _TEMP * _15_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02321777568077) * _TEMP * _15_13;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.7581909524469) * _TEMP * _15_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.67576609678817) * _TEMP * _15_14;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09842381735271) * _TEMP * _15_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.23708709525644) * _TEMP * _15_15;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17539778485889) * _TEMP * _15_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.559304119879) * _TEMP * _15_16;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.38094168561267) * _TEMP * _15_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.677572441654) * _TEMP * _15_17;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.66874857849847) * _TEMP * _15_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66233639702328) * _TEMP * _15_18;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02661272303472) * _TEMP * _15_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.2773101756959) * _TEMP * _15_19;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.9198933613483) * _TEMP * _15_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.8779246532807) * _TEMP * _15_20;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.22221154394122) * _TEMP * _15_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14532612258424) * _TEMP * _15_21;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09184823321173) * _TEMP * _15_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.39424527999194) * _TEMP * _15_22;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.36201370672091) * _TEMP * _15_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.7694506017102) * _TEMP * _15_23;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.46979004263545) * _TEMP * _15_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04927218119768) * _TEMP * _15_24;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.22090819666088) * _TEMP * _15_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71101204509658) * _TEMP * _15_25;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.15937382520162) * _TEMP * _15_25;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17219250104969) * _TEMP * _15_26;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -1.18135511316386) * _TEMP * _15_26;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.06506666055701) * _TEMP * _15_27;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.40066130465414) * _TEMP * _15_27;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04168627331738) * _TEMP * _15_28;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.08103664415612) * _TEMP * _15_28;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40114707530503) * _TEMP * _15_29;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.26274616812588) * _TEMP * _15_29;
MPRINT(EM_DIAGRAM):   *** Effect: Sex ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06889454676877) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.11473053909985) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   *** Effect: Smoker ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01682413014641) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00023043867139) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   *** Effect: Stroke ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19674442740887) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.06693452991956) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   *** Effect: Veggies ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02944512919683) * _TEMP * _19_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.02037458880704) * _TEMP * _19_0;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1 _P2;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
MPRINT(EM_DIAGRAM):   _LP0 = -2.35691380760196 + _LP0;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   _LP1 = 6.30166339755406 + _LP1;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP1 then _LPMAX = _LP1;
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP1 = exp(_LP1 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
MPRINT(EM_DIAGRAM):   _P2 = 1 / (_LPMAX + _LP0 + _LP1);
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P2;
MPRINT(EM_DIAGRAM):   _P1 = _LP1 * _P2;
MPRINT(EM_DIAGRAM):   _P2 = _LPMAX * _P2;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionprediabetes = .;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionno_diabetes = .;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictiondiabetes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictionprediabetes = 'Residual: Diabetes_Prediction=prediabetes' ;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictionno_diabetes = 'Residual: Diabetes_Prediction=no diabetes' ;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictiondiabetes = 'Residual: Diabetes_Prediction=diabetes' ;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionprediabetes = - _P0;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionno_diabetes = - _P1;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictiondiabetes = - _P2;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_Diabetes_Predictionprediabetes = R_Diabetes_Predictionprediabetes + 1;
MPRINT(EM_DIAGRAM):   when (1) R_Diabetes_Predictionno_diabetes = R_Diabetes_Predictionno_diabetes + 1;
MPRINT(EM_DIAGRAM):   when (2) R_Diabetes_Predictiondiabetes = R_Diabetes_Predictiondiabetes + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictionprediabetes = 'Predicted: Diabetes_Prediction=prediabetes' ;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictionno_diabetes = 'Predicted: Diabetes_Prediction=no diabetes' ;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictiondiabetes = 'Predicted: Diabetes_Prediction=diabetes' ;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictionprediabetes = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictionno_diabetes = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictiondiabetes = _P2;
MPRINT(EM_DIAGRAM):   if (_P2 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P2;
MPRINT(EM_DIAGRAM):   _IY = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_Diabetes_Prediction = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   U_Diabetes_Prediction = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
95501      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS2.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
95502      quit;
95503      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
95504      filename emflow "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95505      *------------------------------------------------------------*;
95506      * Reg: Scoring TEST data;
95507      *------------------------------------------------------------*;
95508      data EMWS2.Reg_TEST
95509      / view=EMWS2.Reg_TEST
95510      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_TEST / view=EMWS2.Reg_TEST ;
95511      set EMWS2.Part_TEST
95512      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_TEST ;
95513      %inc emflow;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_Diabetes_Prediction $ 11;
MPRINT(EM_DIAGRAM):   label I_Diabetes_Prediction = 'Into: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REGDRF [3] $11 _temporary_ ('PREDIABETES' 'NO DIABETES' 'DIABETES' );
MPRINT(EM_DIAGRAM):   label U_Diabetes_Prediction = 'Unnormalized Into: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   length U_Diabetes_Prediction $ 11;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   array REGDRU[3] $ 11 _temporary_ ('prediabetes' 'no diabetes' 'diabetes   ' );
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Diabetes_Prediction ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_Diabetes_Prediction = 'From: Diabetes_Prediction' ;
MPRINT(EM_DIAGRAM):   length F_Diabetes_Prediction $ 11;
MPRINT(DMNORMCP):   F_Diabetes_Prediction=dmnorm(Diabetes_Prediction,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if missing( Diabetes_Prediction ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_Diabetes_Prediction = 'NO DIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Diabetes_Prediction = 'DIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Diabetes_Prediction = 'PREDIABETES' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Check BMI for missing values ;
MPRINT(EM_DIAGRAM):   if missing( BMI ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AnyHealthcare ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
MPRINT(EM_DIAGRAM):   if missing( AnyHealthcare ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( AnyHealthcare , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CholCheck ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( CholCheck ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( CholCheck , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DiffWalk ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
MPRINT(EM_DIAGRAM):   if missing( DiffWalk ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DiffWalk , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Education , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Fruits ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
MPRINT(EM_DIAGRAM):   if missing( Fruits ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Fruits , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GenHlth ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GenHlth ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GenHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HeartDiseaseorAttack ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( HeartDiseaseorAttack ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HeartDiseaseorAttack , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighBP ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( HighBP ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighBP , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighChol ;
MPRINT(EM_DIAGRAM):   drop _9_0 ;
MPRINT(EM_DIAGRAM):   if missing( HighChol ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighChol , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HvyAlcoholConsump ;
MPRINT(EM_DIAGRAM):   drop _10_0 ;
MPRINT(EM_DIAGRAM):   if missing( HvyAlcoholConsump ) then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HvyAlcoholConsump , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Income ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 _11_4 _11_5 _11_6 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_4 = 0;
MPRINT(EM_DIAGRAM):   _11_5 = 0;
MPRINT(EM_DIAGRAM):   _11_6 = 0;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_5 = .;
MPRINT(EM_DIAGRAM):   _11_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Income , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _11_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _11_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _11_6 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_4 = -1;
MPRINT(EM_DIAGRAM):   _11_5 = -1;
MPRINT(EM_DIAGRAM):   _11_6 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_4 = .;
MPRINT(EM_DIAGRAM):   _11_5 = .;
MPRINT(EM_DIAGRAM):   _11_6 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MentHlth ;
MPRINT(EM_DIAGRAM):   drop _12_0 _12_1 _12_2 _12_3 _12_4 _12_5 _12_6 _12_7 _12_8 _12_9 _12_10 _12_11 _12_12 _12_13 _12_14 _12_15 _12_16 _12_17 _12_18 _12_19 _12_20 _12_21 _12_22 _12_23 _12_24 _12_25 _12_26 _12_27 _12_28 _12_29 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _12_0 = 0;
MPRINT(EM_DIAGRAM):   _12_1 = 0;
MPRINT(EM_DIAGRAM):   _12_2 = 0;
MPRINT(EM_DIAGRAM):   _12_3 = 0;
MPRINT(EM_DIAGRAM):   _12_4 = 0;
MPRINT(EM_DIAGRAM):   _12_5 = 0;
MPRINT(EM_DIAGRAM):   _12_6 = 0;
MPRINT(EM_DIAGRAM):   _12_7 = 0;
MPRINT(EM_DIAGRAM):   _12_8 = 0;
MPRINT(EM_DIAGRAM):   _12_9 = 0;
MPRINT(EM_DIAGRAM):   _12_10 = 0;
MPRINT(EM_DIAGRAM):   _12_11 = 0;
MPRINT(EM_DIAGRAM):   _12_12 = 0;
MPRINT(EM_DIAGRAM):   _12_13 = 0;
MPRINT(EM_DIAGRAM):   _12_14 = 0;
MPRINT(EM_DIAGRAM):   _12_15 = 0;
MPRINT(EM_DIAGRAM):   _12_16 = 0;
MPRINT(EM_DIAGRAM):   _12_17 = 0;
MPRINT(EM_DIAGRAM):   _12_18 = 0;
MPRINT(EM_DIAGRAM):   _12_19 = 0;
MPRINT(EM_DIAGRAM):   _12_20 = 0;
MPRINT(EM_DIAGRAM):   _12_21 = 0;
MPRINT(EM_DIAGRAM):   _12_22 = 0;
MPRINT(EM_DIAGRAM):   _12_23 = 0;
MPRINT(EM_DIAGRAM):   _12_24 = 0;
MPRINT(EM_DIAGRAM):   _12_25 = 0;
MPRINT(EM_DIAGRAM):   _12_26 = 0;
MPRINT(EM_DIAGRAM):   _12_27 = 0;
MPRINT(EM_DIAGRAM):   _12_28 = 0;
MPRINT(EM_DIAGRAM):   _12_29 = 0;
MPRINT(EM_DIAGRAM):   if missing( MentHlth ) then do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_1 = .;
MPRINT(EM_DIAGRAM):   _12_2 = .;
MPRINT(EM_DIAGRAM):   _12_3 = .;
MPRINT(EM_DIAGRAM):   _12_4 = .;
MPRINT(EM_DIAGRAM):   _12_5 = .;
MPRINT(EM_DIAGRAM):   _12_6 = .;
MPRINT(EM_DIAGRAM):   _12_7 = .;
MPRINT(EM_DIAGRAM):   _12_8 = .;
MPRINT(EM_DIAGRAM):   _12_9 = .;
MPRINT(EM_DIAGRAM):   _12_10 = .;
MPRINT(EM_DIAGRAM):   _12_11 = .;
MPRINT(EM_DIAGRAM):   _12_12 = .;
MPRINT(EM_DIAGRAM):   _12_13 = .;
MPRINT(EM_DIAGRAM):   _12_14 = .;
MPRINT(EM_DIAGRAM):   _12_15 = .;
MPRINT(EM_DIAGRAM):   _12_16 = .;
MPRINT(EM_DIAGRAM):   _12_17 = .;
MPRINT(EM_DIAGRAM):   _12_18 = .;
MPRINT(EM_DIAGRAM):   _12_19 = .;
MPRINT(EM_DIAGRAM):   _12_20 = .;
MPRINT(EM_DIAGRAM):   _12_21 = .;
MPRINT(EM_DIAGRAM):   _12_22 = .;
MPRINT(EM_DIAGRAM):   _12_23 = .;
MPRINT(EM_DIAGRAM):   _12_24 = .;
MPRINT(EM_DIAGRAM):   _12_25 = .;
MPRINT(EM_DIAGRAM):   _12_26 = .;
MPRINT(EM_DIAGRAM):   _12_27 = .;
MPRINT(EM_DIAGRAM):   _12_28 = .;
MPRINT(EM_DIAGRAM):   _12_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MentHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _12_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _12_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   _12_0 = -1;
MPRINT(EM_DIAGRAM):   _12_1 = -1;
MPRINT(EM_DIAGRAM):   _12_2 = -1;
MPRINT(EM_DIAGRAM):   _12_3 = -1;
MPRINT(EM_DIAGRAM):   _12_4 = -1;
MPRINT(EM_DIAGRAM):   _12_5 = -1;
MPRINT(EM_DIAGRAM):   _12_6 = -1;
MPRINT(EM_DIAGRAM):   _12_7 = -1;
MPRINT(EM_DIAGRAM):   _12_8 = -1;
MPRINT(EM_DIAGRAM):   _12_9 = -1;
MPRINT(EM_DIAGRAM):   _12_10 = -1;
MPRINT(EM_DIAGRAM):   _12_11 = -1;
MPRINT(EM_DIAGRAM):   _12_12 = -1;
MPRINT(EM_DIAGRAM):   _12_13 = -1;
MPRINT(EM_DIAGRAM):   _12_14 = -1;
MPRINT(EM_DIAGRAM):   _12_15 = -1;
MPRINT(EM_DIAGRAM):   _12_16 = -1;
MPRINT(EM_DIAGRAM):   _12_17 = -1;
MPRINT(EM_DIAGRAM):   _12_18 = -1;
MPRINT(EM_DIAGRAM):   _12_19 = -1;
MPRINT(EM_DIAGRAM):   _12_20 = -1;
MPRINT(EM_DIAGRAM):   _12_21 = -1;
MPRINT(EM_DIAGRAM):   _12_22 = -1;
MPRINT(EM_DIAGRAM):   _12_23 = -1;
MPRINT(EM_DIAGRAM):   _12_24 = -1;
MPRINT(EM_DIAGRAM):   _12_25 = -1;
MPRINT(EM_DIAGRAM):   _12_26 = -1;
MPRINT(EM_DIAGRAM):   _12_27 = -1;
MPRINT(EM_DIAGRAM):   _12_28 = -1;
MPRINT(EM_DIAGRAM):   _12_29 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _12_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _12_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _12_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _12_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   _12_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _12_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   _12_20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _12_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   _12_25 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   _12_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _12_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _12_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   _12_28 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   _12_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   _12_21 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   _12_29 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   _12_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   _12_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   _12_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   _12_27 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   _12_22 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   _12_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   _12_26 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   _12_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   _12_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   _12_23 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   _12_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   _12_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_1 = .;
MPRINT(EM_DIAGRAM):   _12_2 = .;
MPRINT(EM_DIAGRAM):   _12_3 = .;
MPRINT(EM_DIAGRAM):   _12_4 = .;
MPRINT(EM_DIAGRAM):   _12_5 = .;
MPRINT(EM_DIAGRAM):   _12_6 = .;
MPRINT(EM_DIAGRAM):   _12_7 = .;
MPRINT(EM_DIAGRAM):   _12_8 = .;
MPRINT(EM_DIAGRAM):   _12_9 = .;
MPRINT(EM_DIAGRAM):   _12_10 = .;
MPRINT(EM_DIAGRAM):   _12_11 = .;
MPRINT(EM_DIAGRAM):   _12_12 = .;
MPRINT(EM_DIAGRAM):   _12_13 = .;
MPRINT(EM_DIAGRAM):   _12_14 = .;
MPRINT(EM_DIAGRAM):   _12_15 = .;
MPRINT(EM_DIAGRAM):   _12_16 = .;
MPRINT(EM_DIAGRAM):   _12_17 = .;
MPRINT(EM_DIAGRAM):   _12_18 = .;
MPRINT(EM_DIAGRAM):   _12_19 = .;
MPRINT(EM_DIAGRAM):   _12_20 = .;
MPRINT(EM_DIAGRAM):   _12_21 = .;
MPRINT(EM_DIAGRAM):   _12_22 = .;
MPRINT(EM_DIAGRAM):   _12_23 = .;
MPRINT(EM_DIAGRAM):   _12_24 = .;
MPRINT(EM_DIAGRAM):   _12_25 = .;
MPRINT(EM_DIAGRAM):   _12_26 = .;
MPRINT(EM_DIAGRAM):   _12_27 = .;
MPRINT(EM_DIAGRAM):   _12_28 = .;
MPRINT(EM_DIAGRAM):   _12_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for NoDocbcCost ;
MPRINT(EM_DIAGRAM):   drop _13_0 ;
MPRINT(EM_DIAGRAM):   if missing( NoDocbcCost ) then do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( NoDocbcCost , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysActivity ;
MPRINT(EM_DIAGRAM):   drop _14_0 ;
MPRINT(EM_DIAGRAM):   if missing( PhysActivity ) then do;
MPRINT(EM_DIAGRAM):   _14_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysActivity , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _14_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _14_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _14_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysHlth ;
MPRINT(EM_DIAGRAM):   drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 _15_7 _15_8 _15_9 _15_10 _15_11 _15_12 _15_13 _15_14 _15_15 _15_16 _15_17 _15_18 _15_19 _15_20 _15_21 _15_22 _15_23 _15_24 _15_25 _15_26 _15_27 _15_28 _15_29 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _15_0 = 0;
MPRINT(EM_DIAGRAM):   _15_1 = 0;
MPRINT(EM_DIAGRAM):   _15_2 = 0;
MPRINT(EM_DIAGRAM):   _15_3 = 0;
MPRINT(EM_DIAGRAM):   _15_4 = 0;
MPRINT(EM_DIAGRAM):   _15_5 = 0;
MPRINT(EM_DIAGRAM):   _15_6 = 0;
MPRINT(EM_DIAGRAM):   _15_7 = 0;
MPRINT(EM_DIAGRAM):   _15_8 = 0;
MPRINT(EM_DIAGRAM):   _15_9 = 0;
MPRINT(EM_DIAGRAM):   _15_10 = 0;
MPRINT(EM_DIAGRAM):   _15_11 = 0;
MPRINT(EM_DIAGRAM):   _15_12 = 0;
MPRINT(EM_DIAGRAM):   _15_13 = 0;
MPRINT(EM_DIAGRAM):   _15_14 = 0;
MPRINT(EM_DIAGRAM):   _15_15 = 0;
MPRINT(EM_DIAGRAM):   _15_16 = 0;
MPRINT(EM_DIAGRAM):   _15_17 = 0;
MPRINT(EM_DIAGRAM):   _15_18 = 0;
MPRINT(EM_DIAGRAM):   _15_19 = 0;
MPRINT(EM_DIAGRAM):   _15_20 = 0;
MPRINT(EM_DIAGRAM):   _15_21 = 0;
MPRINT(EM_DIAGRAM):   _15_22 = 0;
MPRINT(EM_DIAGRAM):   _15_23 = 0;
MPRINT(EM_DIAGRAM):   _15_24 = 0;
MPRINT(EM_DIAGRAM):   _15_25 = 0;
MPRINT(EM_DIAGRAM):   _15_26 = 0;
MPRINT(EM_DIAGRAM):   _15_27 = 0;
MPRINT(EM_DIAGRAM):   _15_28 = 0;
MPRINT(EM_DIAGRAM):   _15_29 = 0;
MPRINT(EM_DIAGRAM):   if missing( PhysHlth ) then do;
MPRINT(EM_DIAGRAM):   _15_0 = .;
MPRINT(EM_DIAGRAM):   _15_1 = .;
MPRINT(EM_DIAGRAM):   _15_2 = .;
MPRINT(EM_DIAGRAM):   _15_3 = .;
MPRINT(EM_DIAGRAM):   _15_4 = .;
MPRINT(EM_DIAGRAM):   _15_5 = .;
MPRINT(EM_DIAGRAM):   _15_6 = .;
MPRINT(EM_DIAGRAM):   _15_7 = .;
MPRINT(EM_DIAGRAM):   _15_8 = .;
MPRINT(EM_DIAGRAM):   _15_9 = .;
MPRINT(EM_DIAGRAM):   _15_10 = .;
MPRINT(EM_DIAGRAM):   _15_11 = .;
MPRINT(EM_DIAGRAM):   _15_12 = .;
MPRINT(EM_DIAGRAM):   _15_13 = .;
MPRINT(EM_DIAGRAM):   _15_14 = .;
MPRINT(EM_DIAGRAM):   _15_15 = .;
MPRINT(EM_DIAGRAM):   _15_16 = .;
MPRINT(EM_DIAGRAM):   _15_17 = .;
MPRINT(EM_DIAGRAM):   _15_18 = .;
MPRINT(EM_DIAGRAM):   _15_19 = .;
MPRINT(EM_DIAGRAM):   _15_20 = .;
MPRINT(EM_DIAGRAM):   _15_21 = .;
MPRINT(EM_DIAGRAM):   _15_22 = .;
MPRINT(EM_DIAGRAM):   _15_23 = .;
MPRINT(EM_DIAGRAM):   _15_24 = .;
MPRINT(EM_DIAGRAM):   _15_25 = .;
MPRINT(EM_DIAGRAM):   _15_26 = .;
MPRINT(EM_DIAGRAM):   _15_27 = .;
MPRINT(EM_DIAGRAM):   _15_28 = .;
MPRINT(EM_DIAGRAM):   _15_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysHlth , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _15_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   _15_0 = -1;
MPRINT(EM_DIAGRAM):   _15_1 = -1;
MPRINT(EM_DIAGRAM):   _15_2 = -1;
MPRINT(EM_DIAGRAM):   _15_3 = -1;
MPRINT(EM_DIAGRAM):   _15_4 = -1;
MPRINT(EM_DIAGRAM):   _15_5 = -1;
MPRINT(EM_DIAGRAM):   _15_6 = -1;
MPRINT(EM_DIAGRAM):   _15_7 = -1;
MPRINT(EM_DIAGRAM):   _15_8 = -1;
MPRINT(EM_DIAGRAM):   _15_9 = -1;
MPRINT(EM_DIAGRAM):   _15_10 = -1;
MPRINT(EM_DIAGRAM):   _15_11 = -1;
MPRINT(EM_DIAGRAM):   _15_12 = -1;
MPRINT(EM_DIAGRAM):   _15_13 = -1;
MPRINT(EM_DIAGRAM):   _15_14 = -1;
MPRINT(EM_DIAGRAM):   _15_15 = -1;
MPRINT(EM_DIAGRAM):   _15_16 = -1;
MPRINT(EM_DIAGRAM):   _15_17 = -1;
MPRINT(EM_DIAGRAM):   _15_18 = -1;
MPRINT(EM_DIAGRAM):   _15_19 = -1;
MPRINT(EM_DIAGRAM):   _15_20 = -1;
MPRINT(EM_DIAGRAM):   _15_21 = -1;
MPRINT(EM_DIAGRAM):   _15_22 = -1;
MPRINT(EM_DIAGRAM):   _15_23 = -1;
MPRINT(EM_DIAGRAM):   _15_24 = -1;
MPRINT(EM_DIAGRAM):   _15_25 = -1;
MPRINT(EM_DIAGRAM):   _15_26 = -1;
MPRINT(EM_DIAGRAM):   _15_27 = -1;
MPRINT(EM_DIAGRAM):   _15_28 = -1;
MPRINT(EM_DIAGRAM):   _15_29 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _15_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _15_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _15_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _15_5 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _15_10 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   _15_15 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _15_4 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _15_7 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   _15_20 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   _15_14 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _15_6 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   _15_25 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _15_8 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   _15_21 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   _15_12 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   _15_28 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   _15_29 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   _15_9 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   _15_18 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   _15_16 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   _15_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   _15_27 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   _15_26 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   _15_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   _15_11 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   _15_13 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   _15_22 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   _15_23 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   _15_19 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _15_0 = .;
MPRINT(EM_DIAGRAM):   _15_1 = .;
MPRINT(EM_DIAGRAM):   _15_2 = .;
MPRINT(EM_DIAGRAM):   _15_3 = .;
MPRINT(EM_DIAGRAM):   _15_4 = .;
MPRINT(EM_DIAGRAM):   _15_5 = .;
MPRINT(EM_DIAGRAM):   _15_6 = .;
MPRINT(EM_DIAGRAM):   _15_7 = .;
MPRINT(EM_DIAGRAM):   _15_8 = .;
MPRINT(EM_DIAGRAM):   _15_9 = .;
MPRINT(EM_DIAGRAM):   _15_10 = .;
MPRINT(EM_DIAGRAM):   _15_11 = .;
MPRINT(EM_DIAGRAM):   _15_12 = .;
MPRINT(EM_DIAGRAM):   _15_13 = .;
MPRINT(EM_DIAGRAM):   _15_14 = .;
MPRINT(EM_DIAGRAM):   _15_15 = .;
MPRINT(EM_DIAGRAM):   _15_16 = .;
MPRINT(EM_DIAGRAM):   _15_17 = .;
MPRINT(EM_DIAGRAM):   _15_18 = .;
MPRINT(EM_DIAGRAM):   _15_19 = .;
MPRINT(EM_DIAGRAM):   _15_20 = .;
MPRINT(EM_DIAGRAM):   _15_21 = .;
MPRINT(EM_DIAGRAM):   _15_22 = .;
MPRINT(EM_DIAGRAM):   _15_23 = .;
MPRINT(EM_DIAGRAM):   _15_24 = .;
MPRINT(EM_DIAGRAM):   _15_25 = .;
MPRINT(EM_DIAGRAM):   _15_26 = .;
MPRINT(EM_DIAGRAM):   _15_27 = .;
MPRINT(EM_DIAGRAM):   _15_28 = .;
MPRINT(EM_DIAGRAM):   _15_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Sex ;
MPRINT(EM_DIAGRAM):   drop _16_0 ;
MPRINT(EM_DIAGRAM):   if missing( Sex ) then do;
MPRINT(EM_DIAGRAM):   _16_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Sex , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _16_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _16_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _16_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Smoker ;
MPRINT(EM_DIAGRAM):   drop _17_0 ;
MPRINT(EM_DIAGRAM):   if missing( Smoker ) then do;
MPRINT(EM_DIAGRAM):   _17_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Smoker , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _17_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _17_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _17_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Stroke ;
MPRINT(EM_DIAGRAM):   drop _18_0 ;
MPRINT(EM_DIAGRAM):   if missing( Stroke ) then do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Stroke , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _18_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _18_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Veggies ;
MPRINT(EM_DIAGRAM):   drop _19_0 ;
MPRINT(EM_DIAGRAM):   if missing( Veggies ) then do;
MPRINT(EM_DIAGRAM):   _19_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Veggies , BEST. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _19_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _19_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _19_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.0182856146;
MPRINT(EM_DIAGRAM):   _P1 = 0.8453637803;
MPRINT(EM_DIAGRAM):   _P2 = 0.1363506052;
MPRINT(EM_DIAGRAM):   goto REGDR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0 _LP1;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP1 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00414408060447 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.13667778881006 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: AnyHealthcare ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04129829660428) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.01134240700953) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: BMI ;
MPRINT(EM_DIAGRAM):   _TEMP = BMI ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0200623141319 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.08506112237518 * _TEMP);
MPRINT(EM_DIAGRAM):   *** Effect: CholCheck ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17587106324267) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.55662872875129) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: DiffWalk ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06807944539291) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.05202966847364) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.60694703791874) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31516609483213) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.82684405280263) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01654127164125) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.84291708454748) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.04388954912298) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.59860435233338) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.10355460753732) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.65791585672254) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.0391054606201) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   *** Effect: Fruits ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00825788632312) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01592801277223) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   *** Effect: GenHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.45630003633515) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.15205407825125) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.24694986154977) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.46937748191537) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0209212485904) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17900029952603) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.15603108215171) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.60710699757471) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   *** Effect: HeartDiseaseorAttack ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15963684339905) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.12861220614246) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: HighBP ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18828052724326) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.35743173485255) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: HighChol ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02142564733405) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.29229370514654) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   *** Effect: HvyAlcoholConsump ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.29433685527321) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.37659452228019) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.12434962949832) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.18856597637964) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01180272821841) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.11439362790813) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01705497839294) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09639520284216) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16273811627458) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.05882989712437) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04489073871808) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.01011682655444) * _TEMP * _11_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16378586765171) * _TEMP * _11_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.10710055621972) * _TEMP * _11_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00937344173016) * _TEMP * _11_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.11482137296246) * _TEMP * _11_6;
MPRINT(EM_DIAGRAM):   *** Effect: MentHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.04800942080717) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09001843225783) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.22590900027558) * _TEMP * _12_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.12737525667088) * _TEMP * _12_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.10106475746128) * _TEMP * _12_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.02132573547151) * _TEMP * _12_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97608762045018) * _TEMP * _12_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.05954724291336) * _TEMP * _12_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.36921172040877) * _TEMP * _12_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00917182457836) * _TEMP * _12_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.4024070411314) * _TEMP * _12_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00028467971349) * _TEMP * _12_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.57286058448533) * _TEMP * _12_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.00303496928288) * _TEMP * _12_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.22406298298951) * _TEMP * _12_7;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.14141042252959) * _TEMP * _12_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.26089551363143) * _TEMP * _12_8;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.16984609450576) * _TEMP * _12_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.78331980851102) * _TEMP * _12_9;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.1866293691781) * _TEMP * _12_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.3420742122432) * _TEMP * _12_10;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02472082181025) * _TEMP * _12_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.53270611964659) * _TEMP * _12_11;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.46881777462575) * _TEMP * _12_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.19289982028081) * _TEMP * _12_12;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.37014526072922) * _TEMP * _12_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.01395050063776) * _TEMP * _12_13;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.89154952382611) * _TEMP * _12_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.16232174446058) * _TEMP * _12_14;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.10572920348172) * _TEMP * _12_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50371736370442) * _TEMP * _12_15;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.13967193430089) * _TEMP * _12_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.98387749194182) * _TEMP * _12_16;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.47921746060105) * _TEMP * _12_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.99086451305) * _TEMP * _12_17;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.023092747883) * _TEMP * _12_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.28142994579901) * _TEMP * _12_18;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.89772782364261) * _TEMP * _12_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -7.94345646177794) * _TEMP * _12_19;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -1.09031201100748) * _TEMP * _12_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97809107781656) * _TEMP * _12_20;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02237950541983) * _TEMP * _12_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.50095292613488) * _TEMP * _12_21;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.61042702666207) * _TEMP * _12_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.2358636579636) * _TEMP * _12_22;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.5524942029042) * _TEMP * _12_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97436105907883) * _TEMP * _12_23;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.83058093396395) * _TEMP * _12_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.08616155188671) * _TEMP * _12_24;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.55101121901185) * _TEMP * _12_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.63435259026731) * _TEMP * _12_25;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09583605477333) * _TEMP * _12_25;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.75944421342236) * _TEMP * _12_26;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.29195079721774) * _TEMP * _12_26;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.89917056628234) * _TEMP * _12_27;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.34751286616378) * _TEMP * _12_27;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.83707368950426) * _TEMP * _12_28;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.15686423463904) * _TEMP * _12_28;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.86069646817922) * _TEMP * _12_29;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17231839808172) * _TEMP * _12_29;
MPRINT(EM_DIAGRAM):   *** Effect: NoDocbcCost ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.21747567652734) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02254687053978) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   *** Effect: PhysActivity ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07210365596365) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.01244841943964) * _TEMP * _14_0;
MPRINT(EM_DIAGRAM):   *** Effect: PhysHlth ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36138060527011) * _TEMP * _15_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17374522621538) * _TEMP * _15_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4552745250487) * _TEMP * _15_1;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31212557191848) * _TEMP * _15_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45210754388406) * _TEMP * _15_2;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.28312681020051) * _TEMP * _15_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27470252831399) * _TEMP * _15_3;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.0910407354241) * _TEMP * _15_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40704621270345) * _TEMP * _15_4;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.26714677181421) * _TEMP * _15_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.26802299887237) * _TEMP * _15_5;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.14212354331234) * _TEMP * _15_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.36873379683245) * _TEMP * _15_6;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.35979265520491) * _TEMP * _15_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.472909760972) * _TEMP * _15_7;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.14453420017303) * _TEMP * _15_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00470930079283) * _TEMP * _15_8;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.31156700645887) * _TEMP * _15_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.100605976329) * _TEMP * _15_9;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.47319873636302) * _TEMP * _15_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14897089808618) * _TEMP * _15_10;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.21649730575151) * _TEMP * _15_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.37161851587237) * _TEMP * _15_11;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 4.10215853477496) * _TEMP * _15_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4813008065127) * _TEMP * _15_12;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.12766437859842) * _TEMP * _15_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02321777568077) * _TEMP * _15_13;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.7581909524469) * _TEMP * _15_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.67576609678817) * _TEMP * _15_14;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09842381735271) * _TEMP * _15_14;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.23708709525644) * _TEMP * _15_15;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.17539778485889) * _TEMP * _15_15;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.559304119879) * _TEMP * _15_16;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.38094168561267) * _TEMP * _15_16;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.677572441654) * _TEMP * _15_17;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.66874857849847) * _TEMP * _15_17;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.66233639702328) * _TEMP * _15_18;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.02661272303472) * _TEMP * _15_18;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.2773101756959) * _TEMP * _15_19;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.9198933613483) * _TEMP * _15_19;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.8779246532807) * _TEMP * _15_20;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.22221154394122) * _TEMP * _15_20;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14532612258424) * _TEMP * _15_21;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.09184823321173) * _TEMP * _15_21;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.39424527999194) * _TEMP * _15_22;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.36201370672091) * _TEMP * _15_22;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.7694506017102) * _TEMP * _15_23;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 1.46979004263545) * _TEMP * _15_23;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04927218119768) * _TEMP * _15_24;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.22090819666088) * _TEMP * _15_24;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71101204509658) * _TEMP * _15_25;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.15937382520162) * _TEMP * _15_25;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.17219250104969) * _TEMP * _15_26;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -1.18135511316386) * _TEMP * _15_26;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.06506666055701) * _TEMP * _15_27;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.40066130465414) * _TEMP * _15_27;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.04168627331738) * _TEMP * _15_28;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.08103664415612) * _TEMP * _15_28;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.40114707530503) * _TEMP * _15_29;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.26274616812588) * _TEMP * _15_29;
MPRINT(EM_DIAGRAM):   *** Effect: Sex ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06889454676877) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.11473053909985) * _TEMP * _16_0;
MPRINT(EM_DIAGRAM):   *** Effect: Smoker ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01682413014641) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.00023043867139) * _TEMP * _17_0;
MPRINT(EM_DIAGRAM):   *** Effect: Stroke ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19674442740887) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.06693452991956) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   *** Effect: Veggies ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02944512919683) * _TEMP * _19_0;
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( -0.02037458880704) * _TEMP * _19_0;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1 _P2;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
MPRINT(EM_DIAGRAM):   _LP0 = -2.35691380760196 + _LP0;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   _LP1 = 6.30166339755406 + _LP1;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP1 then _LPMAX = _LP1;
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP1 = exp(_LP1 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
MPRINT(EM_DIAGRAM):   _P2 = 1 / (_LPMAX + _LP0 + _LP1);
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P2;
MPRINT(EM_DIAGRAM):   _P1 = _LP1 * _P2;
MPRINT(EM_DIAGRAM):   _P2 = _LPMAX * _P2;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionprediabetes = .;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionno_diabetes = .;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictiondiabetes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictionprediabetes = 'Residual: Diabetes_Prediction=prediabetes' ;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictionno_diabetes = 'Residual: Diabetes_Prediction=no diabetes' ;
MPRINT(EM_DIAGRAM):   label R_Diabetes_Predictiondiabetes = 'Residual: Diabetes_Prediction=diabetes' ;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionprediabetes = - _P0;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictionno_diabetes = - _P1;
MPRINT(EM_DIAGRAM):   R_Diabetes_Predictiondiabetes = - _P2;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_Diabetes_Predictionprediabetes = R_Diabetes_Predictionprediabetes + 1;
MPRINT(EM_DIAGRAM):   when (1) R_Diabetes_Predictionno_diabetes = R_Diabetes_Predictionno_diabetes + 1;
MPRINT(EM_DIAGRAM):   when (2) R_Diabetes_Predictiondiabetes = R_Diabetes_Predictiondiabetes + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictionprediabetes = 'Predicted: Diabetes_Prediction=prediabetes' ;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictionno_diabetes = 'Predicted: Diabetes_Prediction=no diabetes' ;
MPRINT(EM_DIAGRAM):   label P_Diabetes_Predictiondiabetes = 'Predicted: Diabetes_Prediction=diabetes' ;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictionprediabetes = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictionno_diabetes = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   P_Diabetes_Predictiondiabetes = _P2;
MPRINT(EM_DIAGRAM):   if (_P2 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P2;
MPRINT(EM_DIAGRAM):   _IY = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_Diabetes_Prediction = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   U_Diabetes_Prediction = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
96937      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS2.REG_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.50 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
96938      quit;
96939      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
96940      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96941      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
96942      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS2.REG_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Reg_TRAIN out=WORK.M00O6MA2 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00O6MA2;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M00O6MA2(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00O6MA2;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M00O6MA2;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2V9538Z NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2V9538Z;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2V9538Z;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UWOD5I(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2V9538Z;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2V9538Z;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2V9538Z;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2V9538Z;
MPRINT(EMADVISECOLUMNS):   set WORK.M2V9538Z;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("DIABETES_PREDICTION") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
97288      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
97289      set EMWS2.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMINFO;
97290      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
97291      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS2.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97292      data EMWS2.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS2.Reg_EMINFO;
97293      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
97294      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
97295      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS2.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
97299      run;
97300      data EMWS2.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EMINFO;
97301      set EMWS2.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMINFO WORK.MODELTEMP_INFO;
97302      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
97303      proc sort data = EMWS2.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.Reg_EMINFO NOTHREADS;
97304      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
97305      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.REG_EMINFO.
NOTE: The data set EMWS2.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
 
 
97306      proc sort data = EMWS2.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
97307      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
97308      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.IDS3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
97309      proc sort data = EMWS2.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS2.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
97310      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
97311      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS2.REG_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
97312      data EMWS2.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EMINFO;
97313      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
97314      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
97315      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS2.REG_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.10 seconds
 
 
97316      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
97317      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
97318      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
97319      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS2.REG_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS2.REG_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS2.REG_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:43:10" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                March 04, 2024
Time:                01:43:10
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3PL5P91 "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS2\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3PL5P91 new;
MPRINT(EM_DIAGRAM):   run;
97343      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):    data WORK.DMREGTEMP;
97344      merge EMWS2.Reg_EMESTIMATE EMWS2.Reg_FITTEST;
MPRINT(EM_DIAGRAM):   merge EMWS2.Reg_EMESTIMATE EMWS2.Reg_FITTEST;
97345      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.REG_EMESTIMATE.
NOTE: There were 1 observations read from the data set EMWS2.REG_FITTEST.
NOTE: The data set WORK.DMREGTEMP has 3 observations and 234 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
97346      data EMWS2.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS2.Reg_EMOUTFIT;
97347      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
97348      set WORK.DMREGTEMP end=eof;
MPRINT(EM_DIAGRAM):   set WORK.DMREGTEMP end=eof;
97349      where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
97350      drop _TYPE_--Veggies0_NO_DIABETES;
MPRINT(EM_DIAGRAM):   drop _TYPE_--Veggies0_NO_DIABETES;
97351      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
97352      TARGET = "Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   TARGET = "Diabetes_Prediction";
97353      output;
MPRINT(EM_DIAGRAM):   output;
97354      end;
MPRINT(EM_DIAGRAM):   end;
97355      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.DMREGTEMP.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS2.REG_EMOUTFIT has 1 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
97356      data EMWS2.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS2.Reg_EMOUTFIT;
97357      set EMWS2.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMOUTFIT;
97358      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
97359      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
97360      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS2.REG_EMOUTFIT.
NOTE: The data set EMWS2.REG_EMOUTFIT has 1 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.09 seconds
 
 
97361      proc sort data=EMWS2.Reg_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Reg_EMREPORTFIT nothreads;
97362      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
97363      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS2.REG_EMREPORTFIT.
NOTE: The data set EMWS2.REG_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
97364      %let _EMwarndup = 0;
97365      %let _EMtargetdup =;
97366      %let _EMASEtargetdup =;
97367      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
97368      set EMWS2.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMOUTFIT;
97369      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
97370      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
97371      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
97372      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
97373      end;
MPRINT(EM_DIAGRAM):   end;
97374      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.REG_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97375      proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
97376      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97377      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 23 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
97378      proc sort data=EMWS2.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
97379      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97380      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS2.REG_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 22 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
97381      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
97382      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
97383      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97384      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 22 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 23 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
97385      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
97386      set EMWS2.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_CMeta_TRAIN;
97387      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
97388      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS2.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
97389      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
97390      set EMWS2.Reg_TRAIN(keep=
97391      F_Diabetes_Prediction
97392      I_Diabetes_Prediction
97393      P_Diabetes_Predictiondiabetes
97394      P_Diabetes_Predictionno_diabetes
97395      P_Diabetes_Predictionprediabetes
97396      R_Diabetes_Predictiondiabetes
97397      R_Diabetes_Predictionno_diabetes
97398      R_Diabetes_Predictionprediabetes
97399      U_Diabetes_Prediction
97400      _WARN_
97401      Diabetes_Prediction
97402      );
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_TRAIN(keep= F_Diabetes_Prediction I_Diabetes_Prediction P_Diabetes_Predictiondiabetes P_Diabetes_Predictionno_diabetes P_Diabetes_Predictionprediabetes R_Diabetes_Predictiondiabetes R_Diabetes_Predictionno_diabetes
R_Diabetes_Predictionprediabetes U_Diabetes_Prediction _WARN_ Diabetes_Prediction );
97403      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS2.REG_TRAIN.VIEW used (Total process time):
      real time           0.55 seconds
      cpu time            0.54 seconds
 
NOTE: There were 80227 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 80227 observations read from the data set EMWS2.REG_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 80227 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.58 seconds
      cpu time            0.56 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Diabetes_Prediction*F_Diabetes_Prediction / out = WORK.Reg_1T3FTRC nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_1T3FTRC;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_1T3FTRC(rename=(F_Diabetes_Prediction=FROM I_Diabetes_Prediction=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg_1T3FTRC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_1T3FTRC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='PREDIABETES' and INTO='PREDIABETES' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='PREDIABETES' and INTO ne 'PREDIABETES' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne 'PREDIABETES' and INTO='PREDIABETES' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'PREDIABETES' and INTO ne 'PREDIABETES' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids3_Diabetes_Predict_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Diabetes_Prediction") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Diabetes_Prediction") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Diabetes_Prediction ;
 
MPRINT(EM_ASSESS):   VAR P_Diabetes_Predictionprediabetes _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Diabetes_Prediction") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("PREDIABETES") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "PREDIABETES" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Diabetes_Predictionprediabetes") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Diabetes_Prediction P_Diabetes_Predictionprediabetes _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Diabetes_Prediction ) = "PREDIABETES" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Diabetes_Predictionprediabetes NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Diabetes_Predictionprediabetes ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.0182856146 _NEVENTS 1467 _NNONEVENTS 78760 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 80227));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Diabetes_Predictionprediabetes * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_Diabetes_Predictionprediabetes * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Diabetes_Predictionprediabetes * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Diabetes_Predictionprediabetes);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Diabetes_Predictionprediabetes);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Diabetes_Predictionprediabetes * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "PREDIABETES" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 1.8970348E-6 OVLMAX 0.3172933389 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 80227 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (80227/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 80227)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 80227/20) ) / ( AVGNUMRESP / (80227/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 80227 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 80227 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 80227/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 80227/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 80227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS =
"Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best %
Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of
Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative %
Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
101681     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
101682     set EMWS2.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_CMeta_TRAIN;
101683     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
101684     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS2.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
101685     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
101686     set EMWS2.Reg_VALIDATE(keep=
101687     F_Diabetes_Prediction
101688     I_Diabetes_Prediction
101689     P_Diabetes_Predictiondiabetes
101690     P_Diabetes_Predictionno_diabetes
101691     P_Diabetes_Predictionprediabetes
101692     R_Diabetes_Predictiondiabetes
101693     R_Diabetes_Predictionno_diabetes
101694     R_Diabetes_Predictionprediabetes
101695     U_Diabetes_Prediction
101696     _WARN_
101697     Diabetes_Prediction
101698     );
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_VALIDATE(keep= F_Diabetes_Prediction I_Diabetes_Prediction P_Diabetes_Predictiondiabetes P_Diabetes_Predictionno_diabetes P_Diabetes_Predictionprediabetes R_Diabetes_Predictiondiabetes R_Diabetes_Predictionno_diabetes
R_Diabetes_Predictionprediabetes U_Diabetes_Prediction _WARN_ Diabetes_Prediction );
101699     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS2.REG_VALIDATE.VIEW used (Total process time):
      real time           0.44 seconds
      cpu time            0.43 seconds
 
NOTE: There were 60169 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 60169 observations read from the data set EMWS2.REG_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 60169 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.48 seconds
      cpu time            0.46 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Diabetes_Prediction*F_Diabetes_Prediction / out = WORK.Reg_10O7L03 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_10O7L03;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_10O7L03(rename=(F_Diabetes_Prediction=FROM I_Diabetes_Prediction=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMCLASSIFICATION WORK.Reg_10O7L03;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_10O7L03;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='PREDIABETES' and INTO='PREDIABETES' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='PREDIABETES' and INTO ne 'PREDIABETES' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne 'PREDIABETES' and INTO='PREDIABETES' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'PREDIABETES' and INTO ne 'PREDIABETES' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids3_Diabetes_Predict_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Diabetes_Prediction") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Diabetes_Prediction") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Diabetes_Prediction ;
 
MPRINT(EM_ASSESS):   VAR P_Diabetes_Predictionprediabetes _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Diabetes_Prediction") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("PREDIABETES") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "PREDIABETES" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Diabetes_Predictionprediabetes") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Diabetes_Prediction P_Diabetes_Predictionprediabetes _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Diabetes_Prediction ) = "PREDIABETES" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Diabetes_Predictionprediabetes NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Diabetes_Predictionprediabetes ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.0182984593 _NEVENTS 1101 _NNONEVENTS 59068 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 60169));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Diabetes_Predictionprediabetes * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_Diabetes_Predictionprediabetes * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Diabetes_Predictionprediabetes * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Diabetes_Predictionprediabetes);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Diabetes_Predictionprediabetes);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Diabetes_Predictionprediabetes * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Diabetes_Predictionprediabetes );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "PREDIABETES" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 4.2120795E-6 OVLMAX 0.3299900671 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 60169 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (60169/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 60169)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 60169/20) ) / ( AVGNUMRESP / (60169/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 60169 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 60169 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 60169/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 60169/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 60169;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS =
"Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best %
Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of
Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative %
Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Diabetes_Prediction";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
105986     %let _cn = %sysfunc(getoption(CENTER));
105987     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
105988     proc print data=EMWS2.Reg_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Reg_EMREPORTFIT noobs label;
105989     var STAT LABEL TRAIN
105990     VALIDATE
105991     TEST
105992     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
105993     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
105994     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
105995     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
105996     run;
 
NOTE: There were 20 observations read from the data set EMWS2.REG_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 80.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
105997     title10;
MPRINT(EM_DIAGRAM):   title10;
105998     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
105999     proc sort data=EMWS2.Reg_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Reg_EMCLASSIFICATION nothreads;
106000     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
106001     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS2.REG_EMCLASSIFICATION.
NOTE: The data set EMWS2.REG_EMCLASSIFICATION has 12 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
106002     %let _cn = %sysfunc(getoption(CENTER));
106003     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
106004     proc print data=EMWS2.Reg_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Reg_EMCLASSIFICATION noobs label;
106005     var from into pct_row pct_col count percent
106006     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
106007     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
106008     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
106009     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
106010     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
106011     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
106012     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
106013     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
106014     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
106015     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
106016     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
106017     run;
 
NOTE: There were 12 observations read from the data set EMWS2.REG_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 81.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
106018     title9;
MPRINT(EM_DIAGRAM):   title9;
106019     title10;
MPRINT(EM_DIAGRAM):   title10;
106020     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
106021     %let _cn = %sysfunc(getoption(CENTER));
106022     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
106023     data EMWS2.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS2.Reg_EMEVENTREPORT;
106024     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
106025     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
106025   ! FALSEEVENT
106026     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
106027        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True Positive" TRUENEVENT = "True Negative";
106028     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
106029     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
106030     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
106031     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
106032     set EMWS2.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMEVENTREPORT;
106033     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS2.REG_EMEVENTREPORT.
NOTE: The data set EMWS2.REG_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.09 seconds
 
 
106034     proc print data=EMWS2.Reg_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Reg_EMEVENTREPORT noobs label;
106035     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
106036     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
106037     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
106038     run;
 
NOTE: There were 2 observations read from the data set EMWS2.REG_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 82.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
106039     title10;
MPRINT(EM_DIAGRAM):   title10;
106040     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
106041     proc datasets library=EMWS2 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS2 nolist;
106042     modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
106043     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
106044     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
106045     run;
 
NOTE: MODIFY was successful for EMWS2.REG_EMRANK.DATA.
106046     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.77 seconds
      cpu time            0.54 seconds
 
 
106047     %let _cn = %sysfunc(getoption(CENTER));
106048     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
106049     proc print data=EMWS2.Reg_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Reg_EMRANK label noobs;
106050     var
106051     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
106052     by
106053     notsorted DATAROLE
106054     notsorted TARGET
106055     notsorted TARGETLABEL
106056     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
106057     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
106058     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
106059     run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG_EMRANK.
NOTE: The PROCEDURE PRINT printed page 83.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
106060     title10;
MPRINT(EM_DIAGRAM):   title10;
106061     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
106062     proc datasets library=EMWS2 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS2 nolist;
106063     modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
106064     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
106065     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
106066     run;
 
NOTE: MODIFY was successful for EMWS2.REG_EMSCOREDIST.DATA.
106067     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.77 seconds
      cpu time            0.50 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Reg_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Diabetes_Prediction" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
