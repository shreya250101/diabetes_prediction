MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:26:18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                March 04, 2024
Time:                11:26:18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2KL7RLJ "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2KL7RLJ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:26:18" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                shre2";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080107";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M7P080520";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 04, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:26:18" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                shre2";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ '\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\Workspaces\EMWS1\EMSave3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
34019      proc freq data=EMWS1.EMSave3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.EMSave3_VariableSet noprint;
34020      table ROLE*LEVEL/out=WORK.EMSave3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.EMSave3META;
34021      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 23 observations read from the data set EMWS1.EMSAVE3_VARIABLESET.
NOTE: The data set WORK.EMSAVE3META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
      

34022      proc print data=WORK.EMSave3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EMSave3META label noobs;
34023      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
34024      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
34025      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
34026      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
34027      run;

NOTE: There were 3 observations read from the data set WORK.EMSAVE3META.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

34028      title10;
MPRINT(EM_DIAGRAM):   title10;
34029      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EMSave3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EMSave3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'SV.PredictiveAnalysis';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'SV.Classification';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids3_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;
MPRINT(HPDM_ISGRID):  ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34355      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34356      * EMSave3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * EMSave3: Generation of macros and macro variables;
34357      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
34358      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

34359      %let EMEXCEPTIONSTRING=;
34360      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34361      * TRAIN: EMSave3;
MPRINT(EM_DIAGRAM):   * TRAIN: EMSave3;
34362      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34363      %let EM_ACTION = TRAIN;
34364      %let syscc = 0;
34365      *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
MPRINT(EM_DIAGRAM):     *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
34366      
34367      %macro EM_SAVEXT_MAIN;
34368      
34369         %if %upcase("&EM_ACTION") = "CREATE" %then %do;
34370             filename _create catalog 'sashelp.emutil.savext_create.source';
34371             %include _create;
34372             filename _create;
34373             %EM_SAVEXT_CREATE;
34374         %end;
34375         %else
34376         %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
34377             filename _train catalog 'sashelp.emutil.savext_train.source';
34378             %include _train;
34379             filename _train;
34380             %EM_SAVEXT_TRAIN;
34381         %end;
34382      
34383      %mend EM_SAVEXT_MAIN;
34384      
34385      %EM_SAVEXT_MAIN;
MPRINT(EM_SAVEXT_MAIN):   filename _train catalog 'sashelp.emutil.savext_train.source';
NOTE: %INCLUDE (level 1) file _TRAIN is file SASHELP.EMUTIL.SAVEXT_TRAIN.SOURCE.
34386     +*** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
MPRINT(EM_SAVEXT_MAIN):   *** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
34388     +%macro EM_SAVEXT_TRAIN;
34390     +    *** IMPORT UTILITY MACROS;
34392     +    filename _savutil catalog 'sashelp.emutil.savext_macros.source';
34393     +    %include _savutil;
34394     +    filename _savutil;
34396     +    *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
34397     +    *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
34398     +    *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
34400     +    data _null_;
34401     +        length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
34402     +        _i=0;
34404     +        *** TRAIN;
34405     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_DATA) and (("&EM_PROPERTY_TRAIN"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
34406     +            _i=_i+1;                                                        /* INCREMENT ARRAY INDEX */
34407     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_DATA, TRAIN, _i);                /* INSERT INTO MACRO ARRAY */
34408     +        %end;
34410     +        *** VALIDATE;
34411     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_VALIDATE) and (("&EM_PROPERTY_VALIDATE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
34412     +            _i=_i+1;
34413     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_VALIDATE, VALIDATE, _i);
34414     +        %end;
34416     +        *** TEST;
34417     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TEST) and (("&EM_PROPERTY_TEST"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
34418     +            _i=_i+1;
34419     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TEST, TEST, _i);
34420     +        %end;
34422     +        *** SCORE;
34423     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_SCORE) and (("&EM_PROPERTY_SCORE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
34424     +            _i=_i+1;
34425     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_SCORE, SCORE, _i);
34426     +        %end;
34428     +        *** TRANSACTION;
34429     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TRANSACTION) and (("&EM_PROPERTY_TRANSACTION"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
34430     +            _i=_i+1;
34431     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TRANSACTION, TRANSACTION, _i);
34432     +        %end;
34434     +        *** ESTABLISH NUMBER OF SETS TO SAVE;
34435     +        call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
34437     +    run;
34439     +    *** EXIT IF NO PARTITIONS TO SAVE;
34441     +    %if ^(&_NUM_SAVE_SETS) %then %do;
34442     +        %put &EM_CODEBAR;
34443     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nodata_warn, NOQUOTE));
34444     +        %put &WARNING;
34445     +        %put &EM_CODEBAR;
34446     +        %goto quit;
34447     +    %end;
34449     +    *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
34450     +    *** REVERT TO DEFAULT NAME;
34452     +    %if ^(%nrbquote(%sysfunc(compress("&EM_PROPERTY_NAME")))="") %then %do;
34453     +        %let _BAD_CHARS= <>:%str(%")%str(%')/\|?* %nrstr(&)%nrstr(%%);
34454     +        %let _BAD_CHAR_FLAG= 0;
34455     +        %do _i= 1 %to %length(%nrbquote(&_BAD_CHARS));
34456     +            %if %index(%nrbquote(&EM_PROPERTY_NAME), %nrbquote(%substr(%nrbquote(&_BAD_CHARS), &_i, 1)))
34457     +                %then %let _BAD_CHAR_FLAG= 1;
34458     +        %end;
34459     +        %if %sysfunc(kcount(%nrbquote(&EM_PROPERTY_NAME))) %then %let _BAD_CHAR_FLAG= 1;
34461     +        %if &_BAD_CHAR_FLAG %then %do;
34462     +           %put &EM_CODEBAR;
34463     +           %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_bad_char_err, NOQUOTE));
34464     +           %put &WARNING;
34465     +           %put &EM_CODEBAR;
34466     +           *** REVERT TO DEFAULT NAME;
34467     +           %let EM_PROPERTY_NAME = em_save;
34468     +        %end;
34469     +    %end;
34470     +    *** ACCOUNT FOR LIB ISSUES;
34472     +    %if (%upcase(%sysfunc(compress("&EM_PROPERTY_LIB"))) = "WORK") %then %do;
34473     +        %put &EM_CODEBAR;
34474     +        %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_work_lib_warn, NOQUOTE));
34475     +        %put &WARNING;                                                      /* WORK IS A TEMPORARY LIBRARY */
34476     +        %put &EM_CODEBAR;                                                   /* IT DISAPPEARS AFTER THE FLOW COMPLETES ALONG WITH DATA SAVED THERE */
34477     +    %end;
34480     +    %if (%sysfunc(compress("&EM_PROPERTY_LIB")) = "") %then %do;            /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
34481     +        libname _em_save "%nrbquote(&EM_NODEDIR)";                          /* AND IN OTHERS AS "" */
34482     +        %let EM_PROPERTY_LIB = _em_save;
34483     +    %end;
34485     +    *** CHECK FOR EXISTING LIB;
34487     +    %let _rc = %sysfunc(libref(&EM_PROPERTY_LIB));
34488     +    %if &_rc %then %do;
34489     +        %let EMEXCEPTIONSTRING=exception.server.DATASOURCE.LIBRARY.NOTASSIGNED,&EM_PROPERTY_LIB;
34490     +        %put &EM_CODEBAR;
34491     +        %let ERROR1 = %sysfunc(sasmsg(sashelp.dmine, DATASOURCE.LIBRARY.NOTASSIGNED_ERR, NOQUOTE, &EM_PROPERTY_LIB));
34492     +        %put &ERROR1;
34493     +        %put &EM_CODEBAR;
34494     +        %goto quit;
34495     +    %end;
34497     +    *** ACCOUNT FOR DEFAULT NAME;                                           /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
34498     +                                                                            /* AND IN OTHERS AS "" */
34499     +    %if (%sysfunc(compress("&EM_PROPERTY_NAME"))="") %then %let EM_PROPERTY_NAME = em_save;
34501     +    *** CALL UTILITY MACROS TO SAVE SETS *************************************;
34503     +    %if ("&EM_PROPERTY_TYPE"="SAS7BDAT") %then %do;                         /* OUTPUT SAS DATA SET */
34504     +        %do _i=1 %to &_num_save_sets;
34505     +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);           /* GET EXACT INPUT VARS FOR EACH INPUT SET */
34506     +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;                     /* IF NO VARIABLES WERE SELECTED CONTINUE TO NEXT PARTITION */
34507     +                %put &EM_CODEBAR;                                           /* REALLY ONLY MATTERS FOR TRANSACTION DATA - OTHERWISE ALL PARTITIONS WILL HAVE SAME NUMBER OF VARS */
34508     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
34509     +                %put &WARNING;
34510     +                %put &EM_CODEBAR;
34511     +                %goto continue_sas_loop;
34512     +            %end;
34513     +            %EM_SAVEXT_SAS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);                /* CYCLE THROUGH SETS TO SAVE */
34514     +            %continue_sas_loop:
34515     +        %end;
34516     +    %end;
34517     +    %else %do;                                                              /* OUTPUT JMP, EXCEL 2007, CSV OR TAB TABLE */
34518     +        %do _i=1 %to &_num_save_sets;
34519     +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
34520     +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;
34521     +                %put &EM_CODEBAR;
34522     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
34523     +                %put &WARNING;
34524     +                %put &EM_CODEBAR;
34525     +                %goto continue_pxpt_loop;
34526     +            %end;
34527     +            %EM_SAVEXT_PXPT(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
34528     +            %continue_pxpt_loop:
34529     +        %end;
34530     +    %end;
34532     +    *** OUTPUT ****************************************************************;
34534     +    %if %sysfunc(exist(_save_output_temp)) %then %do;
34536     +        %EM_GETNAME(key=SAVEOUT, type=DATA);
34538     +        *** SAVE OUTPUT DATA TO PROJECT;
34540     +        data &EM_USER_SAVEOUT;
34541     +            set _save_output_temp;
34542     +            label
34543     +                nobs="%sysfunc(sasmsg(sashelp.dmine, save_numobs_vlabel, NOQUOTE))"
34544     +                outnobs="%sysfunc(sasmsg(sashelp.dmine, save_numoutobs_vlabel, NOQUOTE))"
34545     +                vars="%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel, NOQUOTE))"
34546     +                name="%sysfunc(sasmsg(sashelp.dmine, save_location_vlabel, NOQUOTE))"
34547     +                %if ("&EM_PROPERTY_TYPE"= "SAS7BDAT") %then %do;
34548     +                    lib= "%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))"
34549     +                %end;
34550     +                ;
34551     +        run;
34553     +        *** PRINT TO OUTPUT;
34555     +        title "%sysfunc(sasmsg(sashelp.dmine, save_results_title, NOQUOTE))";
34556     +        proc print data=&EM_USER_SAVEOUT label noobs; run;
34557     +        %EM_REPORT(key=SAVEOUT, viewtype=DATA, autodisplay=Y);
34558     +        title;
34560     +    %end;
34562     +    *** SAVE FORMATS **********************************************************;
34564     +    *** CHECK REPLACE CONSTRAINT FOR FORMATS;
34566     +    %if ((%sysfunc(cexist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._FORMATS)) and
34567     +        "&EM_PROPERTY_TYPE"="SAS7BDAT") and
34568     +        ("&EM_PROPERTY_REPLACE"="N"))
34569     +            %then %do;
34570     +                %put &EM_CODEBAR;
34571     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
34572     +                %put &WARNING;
34573     +                %put &EM_CODEBAR;
34574     +                %goto quit;
34575     +            %end;
34577     +    %if ((%sysfunc(fileexist(&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt)) and
34578     +        "&EM_PROPERTY_TYPE" ne "SAS7BDAT") and
34579     +        ("&EM_PROPERTY_REPLACE"="N"))
34580     +           %then %do;
34581     +                %put &EM_CODEBAR;
34582     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
34583     +                %put &WARNING;
34584     +                %put &EM_CODEBAR;
34585     +                %goto quit;
34586     +            %end;
34588     +    *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
34589     +    *** CONTINGENT ON FORMATS EXISTING;
34590     +    *** PARSE NODE VARIABLE SET FOR FORMATS;
34592     +    %let _FORMAT_FLAG = 0;
34593     +    data _formats;
34594     +        length format $32; /* AVOID MERGE VARIABLE LENGTH WARNING */
34595     +        set &EM_DATA_VARIABLESET(keep=format where=(format ne '')) end=eof;
34596     +        format = tranwrd(format, '.', '');
34597     +        if indexc(format, '$') then fmttype = 'C';
34598     +        else fmttype = 'N';
34599     +        if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
34600     +    run;
34601     +    %if (&_FORMAT_FLAG) %then %EM_SAVEXT_CATALOG(_formats);
34602     +    proc delete data=_formats; run;
34604     +    *** HOUSEKEEPING **********************************************************;
34606     +    %quit:
34608     +    %if ^(%sysfunc(libref(_em_save))) %then %do;
34609     +        libname &EM_PROPERTY_LIB clear;
34610     +    %end;
34612     +    %if (%sysfunc(exist(_save_output_temp))) %then %do;
34613     +        proc delete data=_save_output_temp; run;
34614     +    %end;
34616     +%mend EM_SAVEXT_TRAIN;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SAVEXT_MAIN):   filename _train;
NOTE: Fileref _TRAIN has been deassigned.
MPRINT(EM_SAVEXT_TRAIN):   *** IMPORT UTILITY MACROS;
MPRINT(EM_SAVEXT_TRAIN):   filename _savutil catalog 'sashelp.emutil.savext_macros.source';
NOTE: %INCLUDE (level 1) file _SAVUTIL is file SASHELP.EMUTIL.SAVEXT_MACROS.SOURCE.
34617     +*** UTILITY MACROS FOR EMSAVE NODE ********************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** UTILITY MACROS FOR EMSAVE NODE ********************************************;
34619     +*** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
34620     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
34622     +%macro EM_SAVEXT_SAS(_SAVE_ROLE, _SAVE_SET);
34624     +    *** CHECK SAS SET NAME LENGTH;
34626     +    %if %symexist(EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
34627     +        %if ("&EM_SAVEXT_SAS_NAME_LENGTH"="") %then %let EM_SAVEXT_SAS_NAME_LENGTH=30;
34628     +    %end;
34629     +    %else %let EM_SAVEXT_SAS_NAME_LENGTH=30;                                /* 30 FOR OUTSIDE VENDOR LIBS */
34631     +    %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
34632     +        %put &EM_CODEBAR;
34633     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_namelengthsas_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
34634     +        %put &WARNING;
34635     +        %put &EM_CODEBAR;
34636     +        *** REVERTING TO DEFAULT NAME;
34637     +        %let EM_PROPERTY_NAME = em_save;
34638     +    %end;
34640     +    *** CHECK REPLACE CONSTRAINT FOR DATA SET;
34642     +    %if (%sysfunc(exist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE)) and
34643     +        ("&EM_PROPERTY_REPLACE"="N")) %then %do;
34644     +        %put &EM_CODEBAR;
34645     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
34646     +        %put &WARNING;
34647     +        %put &EM_CODEBAR;
34648     +        %goto quit;
34649     +    %end;
34651     +    *** WRITE SAVED DATA SET;
34653     +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;
34655     +    data &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
34656     +        set &_SAVE_SET (obs=&EM_PROPERTY_OUTOBS);
34657     +        keep %EM_SAVEXT_VARS;
34658     +    run;
34660     +    *** WRITE RESULTS *********************************************************;
34661     +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
34663     +    %let _dsid=%sysfunc(open(&_SAVE_SET));
34664     +    %if &_dsid %then %do;
34665     +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
34666     +        %let _rc=%sysfunc(close(&_dsid));
34667     +        %if %eval(&_SAVE_NOBS < 0) %then %do;
34668     +            proc sql noprint;
34669     +                select count(*) into: _SAVE_NOBS
34670     +                from &_SAVE_SET;
34671     +            ;
34672     +            quit;
34673     +        %end;
34674     +    %end;
34675     +    %else %do;
34676     +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
34677     +        %put &EM_CODEBAR;
34678     +        %let ERROR2 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
34679     +        %put &ERROR2;
34680     +        %put &EM_CODEBAR;
34681     +        %goto quit;
34682     +    %end;
34684     +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
34685     +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
34686     +    %end;
34688     +    data _save_output_temp_record;
34689     +        length lib $20 name $255 nobs $20 outnobs $20 vars $20;
34690     +        vars=left("&EM_NUM_SAVEXT_VARS");
34691     +        outnobs=left("&EM_PROPERTY_OUTOBS");
34692     +        nobs=left("&_SAVE_NOBS");
34693     +        lib= left("&EM_PROPERTY_LIB");
34694     +        name=left("%sysfunc(pathname(&EM_PROPERTY_LIB))&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE)");
34695     +    run;
34697     +    proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
34698     +    proc delete data=_save_output_temp_record; run;
34700     +    *** HOUSEKEEPING **********************************************************;
34702     +    %quit:
34704     +    %if %symexist(_SAVE_NOBS) %then %do;
34705     +        data _null_;
34706     +            call symdel('_SAVE_NOBS', 'NOWARN');
34707     +        run;
34708     +    %end;
34710     +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
34711     +        data _null_;
34712     +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
34713     +        run;
34714     +    %end;
34716     +%mend EM_SAVEXT_SAS;
34718     +*** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
34719     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
34721     +%macro EM_SAVEXT_PXPT(_SAVE_ROLE, _SAVE_SET);
34723     +    *** ACCOUNT FOR DEFAULT DIR;
34725     +    %if ("&EM_PROPERTY_DIRECTORYSELECTOR" = "") %then %let EM_PROPERTY_DIRECTORYSELECTOR = %nrbquote(&EM_NODEDIR);
34727     +    *** CHECK JMP NAME LENGTH;
34729     +    %if %symexist(EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
34730     +        %if ("&EM_SAVEXT_JMP_NAME_LENGTH"= "") %then %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
34731     +    %end;
34732     +    %else %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
34734     +    %if ("&EM_PROPERTY_TYPE"="JMP") %then %do;
34735     +        %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
34736     +            %put &EM_CODEBAR;
34737     +            %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_namelengthjmp_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
34738     +            %put &WARNING;
34739     +            %put &EM_CODEBAR;
34740     +            *** REVERTING TO DEFAULT NAME;
34741     +            %let EM_PROPERTY_NAME = em_save;
34742     +        %end;
34743     +    %end;
34745     +    *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
34747     +    %let _OUT_FILE_NAME=&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE);
34749     +    *** CHECK REPLACE CONSTRAINT;
34751     +    %if (%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
34752     +        %put &EM_CODEBAR;
34753     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &_OUT_FILE_NAME));
34754     +        %put &WARNING;
34755     +        %put &EM_CODEBAR;
34756     +        %goto quit;
34757     +    %end;
34758     +    %else %if (^%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
34759     +        %let _REPLACE= ;
34760     +    %end;
34761     +    %else %do;
34762     +        %let _REPLACE=replace;
34763     +    %end;
34765     +    *** EXCEL 2010 LIMITATIONS;
34766     +    *** CAN BE OVERRIDDEN BY STARTUP CODE;
34768     +    %if %symexist(_EXCEL_MAX_ROWS) %then %do;
34769     +        %if ("&_EXCEL_MAX_ROWS"= "") %then %let _EXCEL_MAX_ROWS= 1048575;
34770     +    %end;
34771     +    %else %let _EXCEL_MAX_ROWS= 1048575;
34773     +    %if %symexist(_EXCEL_MAX_COLS) %then %do;
34774     +        %if ("&_EXCEL_MAX_COLS"="") %then %let _EXCEL_MAX_COLS= 16384;
34775     +    %end;
34776     +    %else %let _EXCEL_MAX_COLS=16384;
34778     +    *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
34780     +    %let _dsid=%sysfunc(open(&_SAVE_SET));
34781     +    %if &_dsid %then %do;
34782     +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
34783     +        %let _rc=%sysfunc(close(&_dsid));
34784     +        %if %eval(&_SAVE_NOBS < 0) %then %do;
34785     +            proc sql noprint;
34786     +                select count(*) into: _SAVE_NOBS
34787     +                from &_SAVE_SET;
34788     +                ;
34789     +            quit;
34790     +        %end;
34791     +    %end;
34792     +    %else %do;
34793     +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&_SAVE_SET;
34794     +        %put &EM_CODEBAR;
34795     +        %let ERROR3 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &_SAVE_SET));
34796     +        %put &ERROR3;
34797     +        %put &EM_CODEBAR;
34798     +        %goto quit;
34799     +    %end;
34801     +    *** CHECK EXCEL FILE SIZE;
34803     +    %if ("&EM_PROPERTY_TYPE"="XLSX") and (%eval(&_SAVE_NOBS > &_EXCEL_MAX_ROWS) or %eval(&EM_NUM_SAVEXT_VARS > &_EXCEL_MAX_COLS)) %then %do;
34804     +        %put &EM_CODEBAR;
34805     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_excel_limit_warn, NOQUOTE, &_SAVE_SET));
34806     +        %put &WARNING;
34807     +        %put &EM_CODEBAR;
34808     +    %end;
34810     +    *** EXECUTE EXPORT ********************************************************;
34811     +    *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
34813     +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;      /* OTHERWISE ONLY EM_PROPERTY_OUTOBS WILL BE WRITTEN */
34815     +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
34816     +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
34817     +    %end;
34819     +    %if ("&EM_PROPERTY_TYPE"="TXT" or "&EM_PROPERTY_TYPE"="CSV") %then %do;
34821     +        *** SPECIAL CONDITION FOR TAB PROPERTY;
34823     +        %if ("&EM_PROPERTY_TYPE"="TXT") %then %let EM_PROPERTY_TYPE=tab;
34825     +        data _temp_save_view /view=_temp_save_view;
34826     +            set &_SAVE_SET;
34827     +            keep %EM_SAVEXT_VARS;
34828     +        run;
34830     +        %let SYSCC=0;
34831     +        proc export data=_temp_save_view(obs=&EM_PROPERTY_OUTOBS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
34832     +        run;
34833     +        quit;
34835     +    %end;
34836     +    %else %do;
34838     +        %let SYSCC=0;
34839     +        proc export data=&_SAVE_SET(obs=&EM_PROPERTY_OUTOBS keep=%EM_SAVEXT_VARS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
34840     +        run;
34841     +        quit;
34843     +    %end;
34845     +    %if (^&SYSCC=0) %then %do;
34846     +        %let EMEXCEPTIONSTRING=exception.server.IO.CREATE,&_OUT_FILE_NAME;
34847     +        %put &EM_CODEBAR;
34848     +        %let ERROR4 = %sysfunc(sasmsg(sashelp.dmine, IO.CREATE_ERR, NOQUOTE, &_OUT_FILE_NAME));
34849     +        %put &ERROR4;
34850     +        %put &EM_CODEBAR;
34851     +        %goto quit;
34852     +    %end;
34854     +    *** WRITE RESULTS *********************************************************;
34855     +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
34857     +    %if %sysfunc(fileexist(&_OUT_FILE_NAME)) %then %do;
34858     +        data _save_output_temp_record;
34859     +            length name $255 nobs $20 outnobs $20 vars $20;
34860     +            vars=left("&EM_NUM_SAVEXT_VARS");
34861     +            outnobs=left("&EM_PROPERTY_OUTOBS");
34862     +            nobs=left("&_SAVE_NOBS");
34863     +            name=left("&_OUT_FILE_NAME");
34864     +        run;
34865     +        proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
34866     +        proc delete data=_save_output_temp_record; run;
34867     +    %end;
34868     +    %else %do;
34869     +        %let EMEXCEPTIONSTRING=exception.server.IO.CANTREADFILE,&_OUT_FILE_NAME;
34870     +        %put &EM_CODEBAR;
34871     +        %let ERROR5 = %sysfunc(sasmsg(sashelp.dmine, IO.CANTREADFILE_ERR, NOQUOTE, &_OUT_FILE_NAME));
34872     +        %put &ERROR5;
34873     +        %put &EM_CODEBAR;
34874     +        %goto quit;
34875     +    %end;
34877     +    *** HOUSEKEEPING **********************************************************;
34879     +    %quit:
34881     +    %if ("&EM_PROPERTY_TYPE"="tab") %then %let EM_PROPERTY_TYPE=TXT;
34883     +    %if %sysfunc(exist(_temp_save_view, VIEW)) %then %do;
34884     +        proc datasets lib=work memtype=view nolist;
34885     +            delete _temp_save_view;
34886     +        run;
34887     +        quit;
34888     +    %end;
34890     +    %if %symexist(_SAVE_NOBS) %then %do;
34891     +        data _null_;
34892     +            call symdel('_SAVE_NOBS', 'NOWARN');
34893     +        run;
34894     +    %end;
34896     +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
34897     +        data _null_;
34898     +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
34899     +        run;
34900     +    %end;
34902     +%mend EM_SAVEXT_PXPT;
34904     +*** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
34905     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
34907     +%macro EM_SAVEXT_CATALOG(_FORMATS);
34909     +    *** SORT AND REMOVE DUPLICATES;
34911     +    proc sort data=&_FORMATS nodupkey;
34912     +        by format;
34913     +    run;
34914     +    quit;
34916     +    *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
34918     +    proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne ''))
34919     +        out=_formats2(rename=(fmtname=format));
34920     +        by fmtname;
34921     +    run;
34922     +    quit;
34924     +    *** MERGE SAS FORMATS WITH LOCATION;
34926     +    data &_FORMATS;
34927     +        merge &_FORMATS(in=_a) _formats2(in=_b);
34928     +        by format;
34929     +        if _a and _b then output;
34930     +    run;
34932     +    *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
34934     +    proc contents data=&_FORMATS out=_formats_content_temp noprint; run;
34935     +    data _null_;
34936     +        set _formats_content_temp (obs=1);
34937     +        if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
34938     +        else call symput('_USER_FORMATS_FLAG','0');
34939     +    run;
34940     +    %if (^&_USER_FORMATS_FLAG) %then %do;
34941     +        %put &EM_CODEBAR;
34942     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
34943     +        %put &WARNING;
34944     +        %put &EM_CODEBAR;
34945     +        %goto quit;
34946     +    %end;
34948     +    *** SAVE FORMATS AS CATALOG OR TRANSPORT FORMAT;
34950     +    proc sort data=&_FORMATS;
34951     +        by libname memname;
34952     +    run;
34953     +    quit;
34955     +    *** WRITING CATALOG IN WORK AVOIDS OVERWRITING SAS CATALOG;
34956     +    *** FOR CASE REPLACE=N, TYPE ne SAS7BDAT;
34958     +    data _null_;
34959     +        set &_FORMATS end=eof;
34960     +        by libname memname;
34961     +        if first.libname or first.memname then do;
34962     +            call execute('proc catalog cat='|| strip(libname)||'.'||strip(memname)||';');
34963     +            call execute('copy out=work.&EM_PROPERTY_NAME._FORMATS et=format ;');
34964     +            call execute('select ');
34965     +        end;
34966     +        if strip(fmttype) eq 'C' then do;
34967     +            call execute(' '||strip(tranwrd(format, '$', ''))||'.formatc');
34968     +        end;
34969     +        else call execute(' '||strip(format)||'.format');
34970     +        if last.libname or last.memname then do;
34971     +            call execute(';');
34972     +            call execute('run;');
34973     +        end;
34974     +        if eof then call execute('quit;');
34975     +    run;
34977     +    %if ("&EM_PROPERTY_TYPE" = "SAS7BDAT") %then %do;
34978     +        proc copy in=work out=&EM_PROPERTY_LIB; select &EM_PROPERTY_NAME._FORMATS; run; quit;
34979     +    %end;
34980     +    %else %do;
34981     +        proc cport cat=work.&EM_PROPERTY_NAME._formats file="&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt"; run;
34982     +    %end;
34984     +    *** HOUSEKEEPING **********************************************************;
34986     +    proc datasets lib=work memtype=catalog nolist;
34987     +        delete &EM_PROPERTY_NAME._FORMATS;
34988     +    run;
34989     +    quit;
34991     +    %quit:
34993     +    proc delete data=_formats_content_temp; run;
34994     +    proc delete data=_formats2; run;
34996     +%mend EM_SAVEXT_CATALOG;
34998     +*** FIND VARIABLES TO KEEP ****************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FIND VARIABLES TO KEEP ****************************************************;
34999     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
35001     +%macro EM_SAVEXT_GET_VARS(_SAVE_ROLE, _SAVE_SET);
35003     +    %if("%sysfunc(strip(%upcase(&_SAVE_ROLE)))" ne "TRANSACTION") %then %do;
35005     +        *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
35007     +        proc contents data=&_SAVE_SET out=_input_vars(keep=name) noprint; run;
35008     +        proc sort data=_input_vars; by name; run;
35010     +        *** EXCLUDE REJECTED OR UNUSED VARIABLES;
35012     +        proc sort data=&EM_DATA_VARIABLESET
35013     +            (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
35014     +            by name;
35015     +        run;
35017     +        data _em_savext_vars;
35018     +            merge _input_vars(in=_a) _train_vars(in=_b);
35019     +            by name;
35020     +            keep name;
35021     +            if _a and _b then output;
35022     +        run;
35024     +        *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
35026     +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
35028     +        *** HOUSEKEEPING;
35030     +        proc delete data=_input_vars; run;
35031     +        proc delete data=_train_vars; run;
35032     +        proc delete data=_em_savext_vars; run;
35034     +    %end;
35035     +    %else %do; /* TRANSCATION TABLE VARIABLES ARE NOT LISTED IN THE TRAINING VARIABLE SET */
35037     +        proc contents data=&_SAVE_SET out=_em_savext_vars(keep=name) noprint; run;
35038     +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
35039     +        proc delete data=_em_savext_vars; run;
35041     +    %end;
35043     +%mend EM_SAVEXT_GET_VARS;
35045     +*** CHECKS IF A SET OR VIEW EXISTS ********************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECKS IF A SET OR VIEW EXISTS ********************************************;
35046     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
35048     +%macro EM_SAVEXT_SET_EXISTS(_DATASET);
35050     +    %if (%sysfunc(exist(&_DATASET)) or
35051     +        %sysfunc(exist(&_DATASET, VIEW))) and
35052     +        "&_DATASET" ne "" %then %do;
35053     +            %let _rc=1;
35054     +    %end;
35055     +    %else %do;
35056     +            %let _rc=0;
35057     +    %end;
35059     +    &_rc.
35061     +%mend EM_SAVEXT_SET_EXISTS;
35063     +*** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
MPRINT(EM_SAVEXT_TRAIN):   *** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
35064     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
35066     +%macro EM_SAVEXT_REGISTER(_DATASET, _ROLE, _i);
35068     +    _save_set="&_DATASET";
35069     +    _save_role="&_ROLE";
35070     +    _save_set_index=cats('_save_set', strip(put(&_i,1.)));
35071     +    _save_role_index=cats('_save_role', strip(put(&_i,1.)));
35072     +    call symput(_save_set_index, _save_set);
35073     +    call symput(_save_role_index, _save_role);
35075     +%mend EM_SAVEXT_REGISTER;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SAVEXT_TRAIN):   filename _savutil;
NOTE: Fileref _SAVUTIL has been deassigned.
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
MPRINT(EM_SAVEXT_TRAIN):   *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
MPRINT(EM_SAVEXT_TRAIN):   *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
MPRINT(EM_SAVEXT_TRAIN):   data _null_;
MPRINT(EM_SAVEXT_TRAIN):   length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
MPRINT(EM_SAVEXT_TRAIN):   _i=0;
MPRINT(EM_SAVEXT_TRAIN):   *** TRAIN;
MPRINT(EM_SAVEXT_TRAIN):   _i=_i+1;
MPRINT(EM_SAVEXT_REGISTER):   _save_set="EMWS1.Smpl_DATA";
MPRINT(EM_SAVEXT_REGISTER):   _save_role="TRAIN";
MPRINT(EM_SAVEXT_REGISTER):   _save_set_index=cats('_save_set', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   _save_role_index=cats('_save_role', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_set_index, _save_set);
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_role_index, _save_role);
MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** VALIDATE;
MPRINT(EM_SAVEXT_TRAIN):   *** TEST;
MPRINT(EM_SAVEXT_TRAIN):   *** SCORE;
MPRINT(EM_SAVEXT_TRAIN):   *** TRANSACTION;
MPRINT(EM_SAVEXT_TRAIN):   *** ESTABLISH NUMBER OF SETS TO SAVE;
MPRINT(EM_SAVEXT_TRAIN):   call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** EXIT IF NO PARTITIONS TO SAVE;
MPRINT(EM_SAVEXT_TRAIN):   *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
MPRINT(EM_SAVEXT_TRAIN):   *** REVERT TO DEFAULT NAME;
MPRINT(EM_SAVEXT_TRAIN):   *** ACCOUNT FOR LIB ISSUES;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK FOR EXISTING LIB;
MPRINT(EM_SAVEXT_TRAIN):   *** ACCOUNT FOR DEFAULT NAME;
MPRINT(EM_SAVEXT_TRAIN):   *** CALL UTILITY MACROS TO SAVE SETS *************************************;
MPRINT(EM_SAVEXT_GET_VARS):   *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
MPRINT(EM_SAVEXT_GET_VARS):   proc contents data=EMWS1.Smpl_DATA out=_input_vars(keep=name) noprint;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: The data set WORK._INPUT_VARS has 23 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 23 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 23 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** EXCLUDE REJECTED OR UNUSED VARIABLES;
MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=EMWS1.EMSave3_VariableSet (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 23 observations read from the data set EMWS1.EMSAVE3_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 23 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   data _em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   merge _input_vars(in=_a) _train_vars(in=_b);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   keep name;
MPRINT(EM_SAVEXT_GET_VARS):   if _a and _b then output;
MPRINT(EM_SAVEXT_GET_VARS):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 23 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 23 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 23 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set _em_savext_vars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(name))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' "'!!trim(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = '"'!!TRIM(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Mon, Mar  4, 2024 11:26:21 AM,
      Last Modified=Mon, Mar  4, 2024 11:26:21 AM,
      Filename=C:\Users\shre2\AppData\Local\Temp\SAS Temporary Files\_TD14176_NUTVDIWIN104-02_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M7,
      Host Created=X64_10PRO,Owner Name=UISAD\shre2,
      File Size=             5KB,
      File Size (bytes)=5120

NOTE: 8 records were written to the file MACFILE.
      The minimum record length was 21.
      The maximum record length was 79.
NOTE: There were 23 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
35081     +%macro EM_SAVEXT_VARS;
35082     +"Age"n "AnyHealthcare"n "BMI"n "CholCheck"n "Diabetes_Prediction"n
35083     +"DiffWalk"n "Education"n "Fruits"n "GenHlth"n "HeartDiseaseorAttack"n "HighBP"n
35084     +"HighChol"n "HvyAlcoholConsump"n "Income"n "MentHlth"n "NoDocbcCost"n
35085     +"PhysActivity"n "PhysHlth"n "Sex"n "Smoker"n "Stroke"n "Veggies"n "_dataobs_"n
35086     +%mend EM_SAVEXT_VARS;
35087     +%global EM_NUM_SAVEXT_VARS;
35088     +%let EM_NUM_SAVEXT_VARS = 23 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_SAVEXT_GET_VARS):  ;
MPRINT(EM_SAVEXT_GET_VARS):   *** HOUSEKEEPING;
MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_train_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_SAS):   *** CHECK SAS SET NAME LENGTH;
MPRINT(EM_SAVEXT_SAS):   *** CHECK REPLACE CONSTRAINT FOR DATA SET;
MPRINT(EM_SAVEXT_SAS):   *** WRITE SAVED DATA SET;
MPRINT(EM_SAVEXT_SAS):   data ZETADATA.ZetaDiabetes_TRAIN;
MPRINT(EM_SAVEXT_SAS):   set EMWS1.Smpl_DATA (obs=MAX);
MPRINT(EM_SAVEXT_SAS):   keep
MPRINT(EM_SAVEXT_VARS):   "Age"n "AnyHealthcare"n "BMI"n "CholCheck"n "Diabetes_Prediction"n "DiffWalk"n "Education"n "Fruits"n "GenHlth"n "HeartDiseaseorAttack"n "HighBP"n "HighChol"n "HvyAlcoholConsump"n "Income"n "MentHlth"n "NoDocbcCost"n 
"PhysActivity"n "PhysHlth"n "Sex"n "Smoker"n "Stroke"n
MPRINT(EM_SAVEXT_SAS):   "Veggies"n "_dataobs_"n;
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: There were 200573 observations read from the data set EMWS1.SMPL_DATA.
NOTE: The data set ZETADATA.ZETADIABETES_TRAIN has 200573 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           1.01 seconds
      cpu time            0.28 seconds
      

MPRINT(EM_SAVEXT_SAS):   *** WRITE RESULTS *********************************************************;
MPRINT(EM_SAVEXT_SAS):   *** CONTINGENT ON SAVED FILE EXISTING *************************************;
MPRINT(EM_SAVEXT_SAS):   data _save_output_temp_record;
MPRINT(EM_SAVEXT_SAS):   length lib $20 name $255 nobs $20 outnobs $20 vars $20;
MPRINT(EM_SAVEXT_SAS):   vars=left("23");
MPRINT(EM_SAVEXT_SAS):   outnobs=left("MAX");
MPRINT(EM_SAVEXT_SAS):   nobs=left("200573");
MPRINT(EM_SAVEXT_SAS):   lib= left("ZETADATA");
MPRINT(EM_SAVEXT_SAS):   name=left(
MPRINT(EM_SAVEXT_SAS):  "\\uisnutvdiprof1a\redirected$\shre2\Documents\SV.SAS EM Assignments\SV.PredictiveAnalysis\ZetaDiabetes_TRAIN.sas7bdat");
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_SAS):   proc append base=_save_output_temp data=_save_output_temp_record force;
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD to WORK._SAVE_OUTPUT_TEMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_SAS):   quit;
MPRINT(EM_SAVEXT_SAS):   proc delete data=_save_output_temp_record;
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_SAS):   *** HOUSEKEEPING **********************************************************;
MPRINT(EM_SAVEXT_SAS):   data _null_;
MPRINT(EM_SAVEXT_SAS):   call symdel('_SAVE_NOBS', 'NOWARN');
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_SAS):   data _null_;
MPRINT(EM_SAVEXT_SAS):   call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** OUTPUT ****************************************************************;
MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVE OUTPUT DATA TO PROJECT;
MPRINT(EM_SAVEXT_TRAIN):   data EMWS1.EMSave3_SAVEOUT;
MPRINT(EM_SAVEXT_TRAIN):   set _save_output_temp;
MPRINT(EM_SAVEXT_TRAIN):   label nobs= "Total Observations" outnobs= "Saved Observations" vars= "Number of Variables" name= "Output Location" lib= "Data Library" ;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP.
NOTE: The data set EMWS1.EMSAVE3_SAVEOUT has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** PRINT TO OUTPUT;
MPRINT(EM_SAVEXT_TRAIN):   title "Saved Data Properties";
MPRINT(EM_SAVEXT_TRAIN):   proc print data=EMWS1.EMSave3_SAVEOUT label noobs;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.EMSAVE3_SAVEOUT.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SAVEOUT";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.90656284983575;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   title;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVE FORMATS **********************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK REPLACE CONSTRAINT FOR FORMATS;
MPRINT(EM_SAVEXT_TRAIN):   *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
MPRINT(EM_SAVEXT_TRAIN):   *** CONTINGENT ON FORMATS EXISTING;
MPRINT(EM_SAVEXT_TRAIN):   *** PARSE NODE VARIABLE SET FOR FORMATS;
MPRINT(EM_SAVEXT_TRAIN):   data _formats;
MPRINT(EM_SAVEXT_TRAIN):   length format $32;
MPRINT(EM_SAVEXT_TRAIN):   set EMWS1.EMSave3_VariableSet(keep=format where=(format ne '')) end=eof;
MPRINT(EM_SAVEXT_TRAIN):   format = tranwrd(format, '.', '');
MPRINT(EM_SAVEXT_TRAIN):   if indexc(format, '$') then fmttype = 'C';
MPRINT(EM_SAVEXT_TRAIN):   else fmttype = 'N';
MPRINT(EM_SAVEXT_TRAIN):   if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 21 observations read from the data set EMWS1.EMSAVE3_VARIABLESET.
      WHERE format not = ' ';
NOTE: The data set WORK._FORMATS has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_SAVEXT_CATALOG):   *** SORT AND REMOVE DUPLICATES;
MPRINT(EM_SAVEXT_CATALOG):   proc sort data=_formats nodupkey;
MPRINT(EM_SAVEXT_CATALOG):   by format;
MPRINT(EM_SAVEXT_CATALOG):   run;

NOTE: There were 21 observations read from the data set WORK._FORMATS.
NOTE: 20 observations with duplicate key values were deleted.
NOTE: The data set WORK._FORMATS has 1 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_CATALOG):   quit;
MPRINT(EM_SAVEXT_CATALOG):   *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
MPRINT(EM_SAVEXT_CATALOG):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=_formats2(rename=(fmtname=format));
MPRINT(EM_SAVEXT_CATALOG):   by fmtname;
MPRINT(EM_SAVEXT_CATALOG):   run;

NOTE: There were 9 observations read from the data set SASHELP.VFORMAT.
      WHERE (libname not = ' ') and (memname not = ' ');
NOTE: The data set WORK._FORMATS2 has 9 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.90 seconds
      cpu time            0.85 seconds
      

MPRINT(EM_SAVEXT_CATALOG):   quit;
MPRINT(EM_SAVEXT_CATALOG):   *** MERGE SAS FORMATS WITH LOCATION;
MPRINT(EM_SAVEXT_CATALOG):   data _formats;
MPRINT(EM_SAVEXT_CATALOG):   merge _formats(in=_a) _formats2(in=_b);
MPRINT(EM_SAVEXT_CATALOG):   by format;
MPRINT(EM_SAVEXT_CATALOG):   if _a and _b then output;
MPRINT(EM_SAVEXT_CATALOG):   run;

NOTE: There were 1 observations read from the data set WORK._FORMATS.
NOTE: There were 9 observations read from the data set WORK._FORMATS2.
NOTE: The data set WORK._FORMATS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_CATALOG):   *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
MPRINT(EM_SAVEXT_CATALOG):   proc contents data=_formats out=_formats_content_temp noprint;
MPRINT(EM_SAVEXT_CATALOG):   run;

NOTE: The data set WORK._FORMATS_CONTENT_TEMP has 4 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_CATALOG):   data _null_;
MPRINT(EM_SAVEXT_CATALOG):   set _formats_content_temp (obs=1);
MPRINT(EM_SAVEXT_CATALOG):   if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
MPRINT(EM_SAVEXT_CATALOG):   else call symput('_USER_FORMATS_FLAG','0');
MPRINT(EM_SAVEXT_CATALOG):   run;

NOTE: There were 1 observations read from the data set WORK._FORMATS_CONTENT_TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

*------------------------------------------------------------*
WARNING: Format catalogs will not be overwritten.
*------------------------------------------------------------*
MPRINT(EM_SAVEXT_CATALOG):   proc delete data=_formats_content_temp;
MPRINT(EM_SAVEXT_CATALOG):   run;

NOTE: Deleting WORK._FORMATS_CONTENT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_CATALOG):   proc delete data=_formats2;
MPRINT(EM_SAVEXT_CATALOG):   run;

NOTE: Deleting WORK._FORMATS2 (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   proc delete data=_formats;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: Deleting WORK._FORMATS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** HOUSEKEEPING **********************************************************;
MPRINT(EM_SAVEXT_TRAIN):   proc delete data=_save_output_temp;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: Deleting WORK._SAVE_OUTPUT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: EMSave3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35089      
35090      *------------------------------------------------------------*;
35091      * End TRAIN: EMSave3;
35092      *------------------------------------------------------------*;

35093      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35094      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
35095      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35096      ;
MPRINT(EM_DIAGRAM):   ;
35097      ;
MPRINT(EM_DIAGRAM):   ;
35098      ;
MPRINT(EM_DIAGRAM):   ;
35099      ;
MPRINT(EM_DIAGRAM):   ;
35100      quit;
MPRINT(EM_DIAGRAM):   quit;
35101      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35102      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
35103      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35104      /*; *"; *'; */
35105      ;
MPRINT(EM_DIAGRAM):   ;
35106      run;
MPRINT(EM_DIAGRAM):   run;
35107      quit;
MPRINT(EM_DIAGRAM):   quit;
35108      /* Reset EM Options */
35109      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
35110      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
35111      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
35112      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
35113      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
35114      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
