*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I_Diabetes_Prediction $ 11;
label I_Diabetes_Prediction = 'Into: Diabetes_Prediction' ;
*** Target Values;
array REGDRF [3] $11 _temporary_ ('PREDIABETES' 'NO DIABETES' 'DIABETES' );
label U_Diabetes_Prediction = 'Unnormalized Into: Diabetes_Prediction' ;
length U_Diabetes_Prediction $ 11;
*** Unnormalized target values;
array REGDRU[3] $ 11 _temporary_ ('prediabetes'  'no diabetes'  
'diabetes   ' );

*** Generate dummy variables for Diabetes_Prediction ;
drop _Y ;
label F_Diabetes_Prediction = 'From: Diabetes_Prediction' ;
length F_Diabetes_Prediction $ 11;
%DMNORMCP( Diabetes_Prediction , F_Diabetes_Prediction )
if missing( Diabetes_Prediction ) then do;
   _Y = .;
end;
else do;
   if F_Diabetes_Prediction = 'NO DIABETES'  then do;
      _Y = 1;
   end;
   else if F_Diabetes_Prediction = 'DIABETES'  then do;
      _Y = 2;
   end;
   else if F_Diabetes_Prediction = 'PREDIABETES'  then do;
      _Y = 0;
   end;
   else do;
      _Y = .;
   end;
end;

drop _DM_BAD;
_DM_BAD=0;

*** Check Age for missing values ;
if missing( Age ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check BMI for missing values ;
if missing( BMI ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for AnyHealthcare ;
drop _1_0 ;
if missing( AnyHealthcare ) then do;
   _1_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( AnyHealthcare , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _1_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _1_0 = 1;
   end;
   else do;
      _1_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for CholCheck ;
drop _2_0 ;
if missing( CholCheck ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( CholCheck , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _2_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _2_0 = 1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for DiffWalk ;
drop _3_0 ;
if missing( DiffWalk ) then do;
   _3_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( DiffWalk , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _3_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _3_0 = -1;
   end;
   else do;
      _3_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Education ;
drop _4_0 _4_1 _4_2 _4_3 _4_4 ;
*** encoding is sparse, initialize to zero;
_4_0 = 0;
_4_1 = 0;
_4_2 = 0;
_4_3 = 0;
_4_4 = 0;
if missing( Education ) then do;
   _4_0 = .;
   _4_1 = .;
   _4_2 = .;
   _4_3 = .;
   _4_4 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Education , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '3'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _4_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _4_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _4_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 <= '5'  then do;
         if _dm12 = '4'  then do;
            _4_3 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '5'  then do;
               _4_4 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '6'  then do;
            _4_0 = -1;
            _4_1 = -1;
            _4_2 = -1;
            _4_3 = -1;
            _4_4 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _4_0 = .;
      _4_1 = .;
      _4_2 = .;
      _4_3 = .;
      _4_4 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Fruits ;
drop _5_0 ;
if missing( Fruits ) then do;
   _5_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Fruits , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _5_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _5_0 = 1;
   end;
   else do;
      _5_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GenHlth ;
drop _6_0 _6_1 _6_2 _6_3 ;
*** encoding is sparse, initialize to zero;
_6_0 = 0;
_6_1 = 0;
_6_2 = 0;
_6_3 = 0;
if missing( GenHlth ) then do;
   _6_0 = .;
   _6_1 = .;
   _6_2 = .;
   _6_3 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( GenHlth , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '3'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _6_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _6_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _6_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm12 = '4'  then do;
         _6_3 = 1;
         _dm_find = 1;
      end;
      else do;
         if _dm12 = '5'  then do;
            _6_0 = -1;
            _6_1 = -1;
            _6_2 = -1;
            _6_3 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _6_0 = .;
      _6_1 = .;
      _6_2 = .;
      _6_3 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HeartDiseaseorAttack ;
drop _7_0 ;
if missing( HeartDiseaseorAttack ) then do;
   _7_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HeartDiseaseorAttack , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _7_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _7_0 = -1;
   end;
   else do;
      _7_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HighBP ;
drop _8_0 ;
if missing( HighBP ) then do;
   _8_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HighBP , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _8_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _8_0 = -1;
   end;
   else do;
      _8_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HighChol ;
drop _9_0 ;
if missing( HighChol ) then do;
   _9_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HighChol , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _9_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _9_0 = -1;
   end;
   else do;
      _9_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HvyAlcoholConsump ;
drop _10_0 ;
if missing( HvyAlcoholConsump ) then do;
   _10_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( HvyAlcoholConsump , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _10_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _10_0 = -1;
   end;
   else do;
      _10_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Income ;
drop _11_0 _11_1 _11_2 _11_3 _11_4 _11_5 _11_6 ;
*** encoding is sparse, initialize to zero;
_11_0 = 0;
_11_1 = 0;
_11_2 = 0;
_11_3 = 0;
_11_4 = 0;
_11_5 = 0;
_11_6 = 0;
if missing( Income ) then do;
   _11_0 = .;
   _11_1 = .;
   _11_2 = .;
   _11_3 = .;
   _11_4 = .;
   _11_5 = .;
   _11_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Income , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _11_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _11_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _11_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _11_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '6'  then do;
         if _dm12 = '5'  then do;
            _11_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '6'  then do;
               _11_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '7'  then do;
            _11_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '8'  then do;
               _11_0 = -1;
               _11_1 = -1;
               _11_2 = -1;
               _11_3 = -1;
               _11_4 = -1;
               _11_5 = -1;
               _11_6 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _11_0 = .;
      _11_1 = .;
      _11_2 = .;
      _11_3 = .;
      _11_4 = .;
      _11_5 = .;
      _11_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for MentHlth ;
drop _12_0 _12_1 _12_2 _12_3 _12_4 _12_5 _12_6 _12_7 _12_8 _12_9 _12_10 _12_11
         _12_12 _12_13 _12_14 _12_15 _12_16 _12_17 _12_18 _12_19 _12_20 _12_21
         _12_22 _12_23 _12_24 _12_25 _12_26 _12_27 _12_28 _12_29 ;
*** encoding is sparse, initialize to zero;
_12_0 = 0;
_12_1 = 0;
_12_2 = 0;
_12_3 = 0;
_12_4 = 0;
_12_5 = 0;
_12_6 = 0;
_12_7 = 0;
_12_8 = 0;
_12_9 = 0;
_12_10 = 0;
_12_11 = 0;
_12_12 = 0;
_12_13 = 0;
_12_14 = 0;
_12_15 = 0;
_12_16 = 0;
_12_17 = 0;
_12_18 = 0;
_12_19 = 0;
_12_20 = 0;
_12_21 = 0;
_12_22 = 0;
_12_23 = 0;
_12_24 = 0;
_12_25 = 0;
_12_26 = 0;
_12_27 = 0;
_12_28 = 0;
_12_29 = 0;
if missing( MentHlth ) then do;
   _12_0 = .;
   _12_1 = .;
   _12_2 = .;
   _12_3 = .;
   _12_4 = .;
   _12_5 = .;
   _12_6 = .;
   _12_7 = .;
   _12_8 = .;
   _12_9 = .;
   _12_10 = .;
   _12_11 = .;
   _12_12 = .;
   _12_13 = .;
   _12_14 = .;
   _12_15 = .;
   _12_16 = .;
   _12_17 = .;
   _12_18 = .;
   _12_19 = .;
   _12_20 = .;
   _12_21 = .;
   _12_22 = .;
   _12_23 = .;
   _12_24 = .;
   _12_25 = .;
   _12_26 = .;
   _12_27 = .;
   _12_28 = .;
   _12_29 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( MentHlth , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _12_0 = 1;
   end;
   else if _dm12 = '2'  then do;
      _12_2 = 1;
   end;
   else if _dm12 = '30'  then do;
      _12_0 = -1;
      _12_1 = -1;
      _12_2 = -1;
      _12_3 = -1;
      _12_4 = -1;
      _12_5 = -1;
      _12_6 = -1;
      _12_7 = -1;
      _12_8 = -1;
      _12_9 = -1;
      _12_10 = -1;
      _12_11 = -1;
      _12_12 = -1;
      _12_13 = -1;
      _12_14 = -1;
      _12_15 = -1;
      _12_16 = -1;
      _12_17 = -1;
      _12_18 = -1;
      _12_19 = -1;
      _12_20 = -1;
      _12_21 = -1;
      _12_22 = -1;
      _12_23 = -1;
      _12_24 = -1;
      _12_25 = -1;
      _12_26 = -1;
      _12_27 = -1;
      _12_28 = -1;
      _12_29 = -1;
   end;
   else if _dm12 = '5'  then do;
      _12_5 = 1;
   end;
   else if _dm12 = '1'  then do;
      _12_1 = 1;
   end;
   else if _dm12 = '3'  then do;
      _12_3 = 1;
   end;
   else if _dm12 = '10'  then do;
      _12_10 = 1;
   end;
   else if _dm12 = '15'  then do;
      _12_15 = 1;
   end;
   else if _dm12 = '4'  then do;
      _12_4 = 1;
   end;
   else if _dm12 = '20'  then do;
      _12_20 = 1;
   end;
   else if _dm12 = '7'  then do;
      _12_7 = 1;
   end;
   else if _dm12 = '14'  then do;
      _12_14 = 1;
   end;
   else if _dm12 = '25'  then do;
      _12_25 = 1;
   end;
   else if _dm12 = '6'  then do;
      _12_6 = 1;
   end;
   else if _dm12 = '8'  then do;
      _12_8 = 1;
   end;
   else if _dm12 = '12'  then do;
      _12_12 = 1;
   end;
   else if _dm12 = '28'  then do;
      _12_28 = 1;
   end;
   else if _dm12 = '21'  then do;
      _12_21 = 1;
   end;
   else if _dm12 = '16'  then do;
      _12_16 = 1;
   end;
   else if _dm12 = '27'  then do;
      _12_27 = 1;
   end;
   else if _dm12 = '29'  then do;
      _12_29 = 1;
   end;
   else if _dm12 = '18'  then do;
      _12_18 = 1;
   end;
   else if _dm12 = '9'  then do;
      _12_9 = 1;
   end;
   else if _dm12 = '22'  then do;
      _12_22 = 1;
   end;
   else if _dm12 = '13'  then do;
      _12_13 = 1;
   end;
   else if _dm12 = '17'  then do;
      _12_17 = 1;
   end;
   else if _dm12 = '26'  then do;
      _12_26 = 1;
   end;
   else if _dm12 = '23'  then do;
      _12_23 = 1;
   end;
   else if _dm12 = '11'  then do;
      _12_11 = 1;
   end;
   else if _dm12 = '24'  then do;
      _12_24 = 1;
   end;
   else if _dm12 = '19'  then do;
      _12_19 = 1;
   end;
   else do;
      _12_0 = .;
      _12_1 = .;
      _12_2 = .;
      _12_3 = .;
      _12_4 = .;
      _12_5 = .;
      _12_6 = .;
      _12_7 = .;
      _12_8 = .;
      _12_9 = .;
      _12_10 = .;
      _12_11 = .;
      _12_12 = .;
      _12_13 = .;
      _12_14 = .;
      _12_15 = .;
      _12_16 = .;
      _12_17 = .;
      _12_18 = .;
      _12_19 = .;
      _12_20 = .;
      _12_21 = .;
      _12_22 = .;
      _12_23 = .;
      _12_24 = .;
      _12_25 = .;
      _12_26 = .;
      _12_27 = .;
      _12_28 = .;
      _12_29 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for NoDocbcCost ;
drop _13_0 ;
if missing( NoDocbcCost ) then do;
   _13_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( NoDocbcCost , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _13_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _13_0 = -1;
   end;
   else do;
      _13_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for PhysActivity ;
drop _14_0 ;
if missing( PhysActivity ) then do;
   _14_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( PhysActivity , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _14_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _14_0 = 1;
   end;
   else do;
      _14_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for PhysHlth ;
drop _15_0 _15_1 _15_2 _15_3 _15_4 _15_5 _15_6 _15_7 _15_8 _15_9 _15_10 _15_11
         _15_12 _15_13 _15_14 _15_15 _15_16 _15_17 _15_18 _15_19 _15_20 _15_21
         _15_22 _15_23 _15_24 _15_25 _15_26 _15_27 _15_28 _15_29 ;
*** encoding is sparse, initialize to zero;
_15_0 = 0;
_15_1 = 0;
_15_2 = 0;
_15_3 = 0;
_15_4 = 0;
_15_5 = 0;
_15_6 = 0;
_15_7 = 0;
_15_8 = 0;
_15_9 = 0;
_15_10 = 0;
_15_11 = 0;
_15_12 = 0;
_15_13 = 0;
_15_14 = 0;
_15_15 = 0;
_15_16 = 0;
_15_17 = 0;
_15_18 = 0;
_15_19 = 0;
_15_20 = 0;
_15_21 = 0;
_15_22 = 0;
_15_23 = 0;
_15_24 = 0;
_15_25 = 0;
_15_26 = 0;
_15_27 = 0;
_15_28 = 0;
_15_29 = 0;
if missing( PhysHlth ) then do;
   _15_0 = .;
   _15_1 = .;
   _15_2 = .;
   _15_3 = .;
   _15_4 = .;
   _15_5 = .;
   _15_6 = .;
   _15_7 = .;
   _15_8 = .;
   _15_9 = .;
   _15_10 = .;
   _15_11 = .;
   _15_12 = .;
   _15_13 = .;
   _15_14 = .;
   _15_15 = .;
   _15_16 = .;
   _15_17 = .;
   _15_18 = .;
   _15_19 = .;
   _15_20 = .;
   _15_21 = .;
   _15_22 = .;
   _15_23 = .;
   _15_24 = .;
   _15_25 = .;
   _15_26 = .;
   _15_27 = .;
   _15_28 = .;
   _15_29 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( PhysHlth , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _15_0 = 1;
   end;
   else if _dm12 = '30'  then do;
      _15_0 = -1;
      _15_1 = -1;
      _15_2 = -1;
      _15_3 = -1;
      _15_4 = -1;
      _15_5 = -1;
      _15_6 = -1;
      _15_7 = -1;
      _15_8 = -1;
      _15_9 = -1;
      _15_10 = -1;
      _15_11 = -1;
      _15_12 = -1;
      _15_13 = -1;
      _15_14 = -1;
      _15_15 = -1;
      _15_16 = -1;
      _15_17 = -1;
      _15_18 = -1;
      _15_19 = -1;
      _15_20 = -1;
      _15_21 = -1;
      _15_22 = -1;
      _15_23 = -1;
      _15_24 = -1;
      _15_25 = -1;
      _15_26 = -1;
      _15_27 = -1;
      _15_28 = -1;
      _15_29 = -1;
   end;
   else if _dm12 = '2'  then do;
      _15_2 = 1;
   end;
   else if _dm12 = '1'  then do;
      _15_1 = 1;
   end;
   else if _dm12 = '3'  then do;
      _15_3 = 1;
   end;
   else if _dm12 = '5'  then do;
      _15_5 = 1;
   end;
   else if _dm12 = '10'  then do;
      _15_10 = 1;
   end;
   else if _dm12 = '15'  then do;
      _15_15 = 1;
   end;
   else if _dm12 = '7'  then do;
      _15_7 = 1;
   end;
   else if _dm12 = '4'  then do;
      _15_4 = 1;
   end;
   else if _dm12 = '20'  then do;
      _15_20 = 1;
   end;
   else if _dm12 = '14'  then do;
      _15_14 = 1;
   end;
   else if _dm12 = '6'  then do;
      _15_6 = 1;
   end;
   else if _dm12 = '25'  then do;
      _15_25 = 1;
   end;
   else if _dm12 = '8'  then do;
      _15_8 = 1;
   end;
   else if _dm12 = '21'  then do;
      _15_21 = 1;
   end;
   else if _dm12 = '12'  then do;
      _15_12 = 1;
   end;
   else if _dm12 = '28'  then do;
      _15_28 = 1;
   end;
   else if _dm12 = '29'  then do;
      _15_29 = 1;
   end;
   else if _dm12 = '9'  then do;
      _15_9 = 1;
   end;
   else if _dm12 = '18'  then do;
      _15_18 = 1;
   end;
   else if _dm12 = '17'  then do;
      _15_17 = 1;
   end;
   else if _dm12 = '27'  then do;
      _15_27 = 1;
   end;
   else if _dm12 = '16'  then do;
      _15_16 = 1;
   end;
   else if _dm12 = '22'  then do;
      _15_22 = 1;
   end;
   else if _dm12 = '13'  then do;
      _15_13 = 1;
   end;
   else if _dm12 = '24'  then do;
      _15_24 = 1;
   end;
   else if _dm12 = '26'  then do;
      _15_26 = 1;
   end;
   else if _dm12 = '23'  then do;
      _15_23 = 1;
   end;
   else if _dm12 = '11'  then do;
      _15_11 = 1;
   end;
   else if _dm12 = '19'  then do;
      _15_19 = 1;
   end;
   else do;
      _15_0 = .;
      _15_1 = .;
      _15_2 = .;
      _15_3 = .;
      _15_4 = .;
      _15_5 = .;
      _15_6 = .;
      _15_7 = .;
      _15_8 = .;
      _15_9 = .;
      _15_10 = .;
      _15_11 = .;
      _15_12 = .;
      _15_13 = .;
      _15_14 = .;
      _15_15 = .;
      _15_16 = .;
      _15_17 = .;
      _15_18 = .;
      _15_19 = .;
      _15_20 = .;
      _15_21 = .;
      _15_22 = .;
      _15_23 = .;
      _15_24 = .;
      _15_25 = .;
      _15_26 = .;
      _15_27 = .;
      _15_28 = .;
      _15_29 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Sex ;
drop _16_0 ;
if missing( Sex ) then do;
   _16_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Sex , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _16_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _16_0 = -1;
   end;
   else do;
      _16_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Smoker ;
drop _17_0 ;
if missing( Smoker ) then do;
   _17_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Smoker , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _17_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _17_0 = -1;
   end;
   else do;
      _17_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Stroke ;
drop _18_0 ;
if missing( Stroke ) then do;
   _18_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Stroke , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _18_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _18_0 = -1;
   end;
   else do;
      _18_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Veggies ;
drop _19_0 ;
if missing( Veggies ) then do;
   _19_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( Veggies , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      _19_0 = -1;
   end;
   else if _dm12 = '0'  then do;
      _19_0 = 1;
   end;
   else do;
      _19_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.0181482774;
   _P1 = 0.8452784564;
   _P2 = 0.1365732662;
   goto REGDR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0  _LP1;
_LP0 = 0;
_LP1 = 0;

***  Effect: Age ;
_TEMP = Age ;
_LP0 = _LP0 + (    0.00342093085618 * _TEMP);
_LP1 = _LP1 + (   -0.13749279922442 * _TEMP);

***  Effect: AnyHealthcare ;
_TEMP = 1;
_LP0 = _LP0 + (    0.04773172158769) * _TEMP * _1_0;
_LP1 = _LP1 + (    0.01332522992916) * _TEMP * _1_0;

***  Effect: BMI ;
_TEMP = BMI ;
_LP0 = _LP0 + (   -0.01743492506171 * _TEMP);
_LP1 = _LP1 + (    -0.0843019575451 * _TEMP);

***  Effect: CholCheck ;
_TEMP = 1;
_LP0 = _LP0 + (    0.13540008083114) * _TEMP * _2_0;
_LP1 = _LP1 + (    0.53305041095852) * _TEMP * _2_0;

***  Effect: DiffWalk ;
_TEMP = 1;
_LP0 = _LP0 + (     0.0274535531034) * _TEMP * _3_0;
_LP1 = _LP1 + (    0.02971917200501) * _TEMP * _3_0;

***  Effect: Education ;
_TEMP = 1;
_LP0 = _LP0 + (   -3.12994852634141) * _TEMP * _4_0;
_LP1 = _LP1 + (     0.2057612197695) * _TEMP * _4_0;
_LP0 = _LP0 + (    0.64657283845041) * _TEMP * _4_1;
_LP1 = _LP1 + (   -0.23013946573756) * _TEMP * _4_1;
_LP0 = _LP0 + (    0.76708340214746) * _TEMP * _4_2;
_LP1 = _LP1 + (   -0.00613340743619) * _TEMP * _4_2;
_LP0 = _LP0 + (     0.6491463483749) * _TEMP * _4_3;
_LP1 = _LP1 + (    0.05750339156598) * _TEMP * _4_3;
_LP0 = _LP0 + (    0.51612488742476) * _TEMP * _4_4;
_LP1 = _LP1 + (   -0.06909266736624) * _TEMP * _4_4;

***  Effect: Fruits ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.00117979218251) * _TEMP * _5_0;
_LP1 = _LP1 + (   -0.02074681229421) * _TEMP * _5_0;

***  Effect: GenHlth ;
_TEMP = 1;
_LP0 = _LP0 + (    0.54078373030763) * _TEMP * _6_0;
_LP1 = _LP1 + (    1.18508503729781) * _TEMP * _6_0;
_LP0 = _LP0 + (    0.15457829643522) * _TEMP * _6_1;
_LP1 = _LP1 + (    0.46052284720818) * _TEMP * _6_1;
_LP0 = _LP0 + (   -0.09855495013452) * _TEMP * _6_2;
_LP1 = _LP1 + (   -0.21126292066342) * _TEMP * _6_2;
_LP0 = _LP0 + (   -0.21437321655979) * _TEMP * _6_3;
_LP1 = _LP1 + (   -0.64756426784037) * _TEMP * _6_3;

***  Effect: HeartDiseaseorAttack ;
_TEMP = 1;
_LP0 = _LP0 + (    0.13139660299919) * _TEMP * _7_0;
_LP1 = _LP1 + (    0.09545343568658) * _TEMP * _7_0;

***  Effect: HighBP ;
_TEMP = 1;
_LP0 = _LP0 + (    0.17117655764057) * _TEMP * _8_0;
_LP1 = _LP1 + (    0.34240009863307) * _TEMP * _8_0;

***  Effect: HighChol ;
_TEMP = 1;
_LP0 = _LP0 + (    0.04325985588951) * _TEMP * _9_0;
_LP1 = _LP1 + (    0.30000035155094) * _TEMP * _9_0;

***  Effect: HvyAlcoholConsump ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.21143521046676) * _TEMP * _10_0;
_LP1 = _LP1 + (   -0.37592366607664) * _TEMP * _10_0;

***  Effect: Income ;
_TEMP = 1;
_LP0 = _LP0 + (    0.08325667171786) * _TEMP * _11_0;
_LP1 = _LP1 + (   -0.20486872878748) * _TEMP * _11_0;
_LP0 = _LP0 + (    -0.0567830279225) * _TEMP * _11_1;
_LP1 = _LP1 + (   -0.10190469669104) * _TEMP * _11_1;
_LP0 = _LP0 + (   -0.09919571123276) * _TEMP * _11_2;
_LP1 = _LP1 + (   -0.08408476400604) * _TEMP * _11_2;
_LP0 = _LP0 + (   -0.02014813934992) * _TEMP * _11_3;
_LP1 = _LP1 + (   -0.06003403007965) * _TEMP * _11_3;
_LP0 = _LP0 + (   -0.05101065729434) * _TEMP * _11_4;
_LP1 = _LP1 + (     0.0370791844593) * _TEMP * _11_4;
_LP0 = _LP0 + (    0.03309086708724) * _TEMP * _11_5;
_LP1 = _LP1 + (    0.06659323468288) * _TEMP * _11_5;
_LP0 = _LP0 + (    0.12627842731482) * _TEMP * _11_6;
_LP1 = _LP1 + (     0.1144250226416) * _TEMP * _11_6;

***  Effect: MentHlth ;
_TEMP = 1;
_LP0 = _LP0 + (     1.0186846614186) * _TEMP * _12_0;
_LP1 = _LP1 + (   -0.18193766044716) * _TEMP * _12_0;
_LP0 = _LP0 + (    1.46436890821813) * _TEMP * _12_1;
_LP1 = _LP1 + (    0.06267004986234) * _TEMP * _12_1;
_LP0 = _LP0 + (    1.25677914955836) * _TEMP * _12_2;
_LP1 = _LP1 + (   -0.12942713797267) * _TEMP * _12_2;
_LP0 = _LP0 + (    0.98119996641813) * _TEMP * _12_3;
_LP1 = _LP1 + (   -0.13766435534874) * _TEMP * _12_3;
_LP0 = _LP0 + (    1.21496471449298) * _TEMP * _12_4;
_LP1 = _LP1 + (   -0.08344035805681) * _TEMP * _12_4;
_LP0 = _LP0 + (    1.27836616123077) * _TEMP * _12_5;
_LP1 = _LP1 + (   -0.14116366996797) * _TEMP * _12_5;
_LP0 = _LP0 + (    1.28115663581678) * _TEMP * _12_6;
_LP1 = _LP1 + (    -0.3873604611645) * _TEMP * _12_6;
_LP0 = _LP0 + (     1.1875121295338) * _TEMP * _12_7;
_LP1 = _LP1 + (   -0.12628521711465) * _TEMP * _12_7;
_LP0 = _LP0 + (    0.43934771033646) * _TEMP * _12_8;
_LP1 = _LP1 + (   -0.22187039566796) * _TEMP * _12_8;
_LP0 = _LP0 + (    1.73197330619634) * _TEMP * _12_9;
_LP1 = _LP1 + (    0.33697045682317) * _TEMP * _12_9;
_LP0 = _LP0 + (    1.17446997747404) * _TEMP * _12_10;
_LP1 = _LP1 + (   -0.16529126194786) * _TEMP * _12_10;
_LP0 = _LP0 + (    6.65880142884166) * _TEMP * _12_11;
_LP1 = _LP1 + (    4.14905119198054) * _TEMP * _12_11;
_LP0 = _LP0 + (    0.17141255423145) * _TEMP * _12_12;
_LP1 = _LP1 + (   -0.07671853985337) * _TEMP * _12_12;
_LP0 = _LP0 + (   -3.99901318937409) * _TEMP * _12_13;
_LP1 = _LP1 + (   -2.03464657387444) * _TEMP * _12_13;
_LP0 = _LP0 + (     1.4680992693136) * _TEMP * _12_14;
_LP1 = _LP1 + (   -0.33293934050533) * _TEMP * _12_14;
_LP0 = _LP0 + (    1.32324147499712) * _TEMP * _12_15;
_LP1 = _LP1 + (   -0.01496166193857) * _TEMP * _12_15;
_LP0 = _LP0 + (    1.73576730709259) * _TEMP * _12_16;
_LP1 = _LP1 + (    0.44325004863534) * _TEMP * _12_16;
_LP0 = _LP0 + (   -2.68837597293271) * _TEMP * _12_17;
_LP1 = _LP1 + (     0.0974574586419) * _TEMP * _12_17;
_LP0 = _LP0 + (    1.99430284119397) * _TEMP * _12_18;
_LP1 = _LP1 + (    0.44635571456212) * _TEMP * _12_18;
_LP0 = _LP0 + (   -29.3374630965006) * _TEMP * _12_19;
_LP1 = _LP1 + (   -0.55288908435748) * _TEMP * _12_19;
_LP0 = _LP0 + (    1.48300856913359) * _TEMP * _12_20;
_LP1 = _LP1 + (   -0.14745834703191) * _TEMP * _12_20;
_LP0 = _LP0 + (    0.46605543691888) * _TEMP * _12_21;
_LP1 = _LP1 + (   -0.24272070541941) * _TEMP * _12_21;
_LP0 = _LP0 + (    2.93804494851349) * _TEMP * _12_22;
_LP1 = _LP1 + (   -0.28021549244921) * _TEMP * _12_22;
_LP0 = _LP0 + (   -3.60101171404121) * _TEMP * _12_23;
_LP1 = _LP1 + (   -1.18395526177871) * _TEMP * _12_23;
_LP0 = _LP0 + (    2.48762651568996) * _TEMP * _12_24;
_LP1 = _LP1 + (   -0.58353968460561) * _TEMP * _12_24;
_LP0 = _LP0 + (    1.31166745391214) * _TEMP * _12_25;
_LP1 = _LP1 + (   -0.26367096761504) * _TEMP * _12_25;
_LP0 = _LP0 + (    2.85904487292257) * _TEMP * _12_26;
_LP1 = _LP1 + (    0.37743060707592) * _TEMP * _12_26;
_LP0 = _LP0 + (    1.62078649972739) * _TEMP * _12_27;
_LP1 = _LP1 + (    0.12341525840028) * _TEMP * _12_27;
_LP0 = _LP0 + (    0.53237653812383) * _TEMP * _12_28;
_LP1 = _LP1 + (    0.13921873363908) * _TEMP * _12_28;
_LP0 = _LP0 + (   -1.72621432844895) * _TEMP * _12_29;
_LP1 = _LP1 + (     1.2677164628173) * _TEMP * _12_29;

***  Effect: NoDocbcCost ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.12094754706378) * _TEMP * _13_0;
_LP1 = _LP1 + (    0.03809651954341) * _TEMP * _13_0;

***  Effect: PhysActivity ;
_TEMP = 1;
_LP0 = _LP0 + (    0.00565619564341) * _TEMP * _14_0;
_LP1 = _LP1 + (   -0.02603855926796) * _TEMP * _14_0;

***  Effect: PhysHlth ;
_TEMP = 1;
_LP0 = _LP0 + (    0.15308933332258) * _TEMP * _15_0;
_LP1 = _LP1 + (     0.0272622631624) * _TEMP * _15_0;
_LP0 = _LP0 + (   -0.01103875116984) * _TEMP * _15_1;
_LP1 = _LP1 + (   -0.05689656088358) * _TEMP * _15_1;
_LP0 = _LP0 + (   -0.11256675603902) * _TEMP * _15_2;
_LP1 = _LP1 + (   -0.04627716517527) * _TEMP * _15_2;
_LP0 = _LP0 + (   -0.06788525354938) * _TEMP * _15_3;
_LP1 = _LP1 + (     0.0895067281553) * _TEMP * _15_3;
_LP0 = _LP0 + (    0.21860985555606) * _TEMP * _15_4;
_LP1 = _LP1 + (     -0.023121564074) * _TEMP * _15_4;
_LP0 = _LP0 + (    0.18256840088647) * _TEMP * _15_5;
_LP1 = _LP1 + (    0.05883632308824) * _TEMP * _15_5;
_LP0 = _LP0 + (    0.21212119488598) * _TEMP * _15_6;
_LP1 = _LP1 + (   -0.07315239615252) * _TEMP * _15_6;
_LP0 = _LP0 + (   -0.01974664320458) * _TEMP * _15_7;
_LP1 = _LP1 + (    0.00769103939275) * _TEMP * _15_7;
_LP0 = _LP0 + (    0.68942125200831) * _TEMP * _15_8;
_LP1 = _LP1 + (    0.19915168779307) * _TEMP * _15_8;
_LP0 = _LP0 + (   -0.11094088999479) * _TEMP * _15_9;
_LP1 = _LP1 + (    0.17015681011806) * _TEMP * _15_9;
_LP0 = _LP0 + (   -0.01339074750299) * _TEMP * _15_10;
_LP1 = _LP1 + (    -0.0494683119278) * _TEMP * _15_10;
_LP0 = _LP0 + (    1.22694134160595) * _TEMP * _15_11;
_LP1 = _LP1 + (   -0.04808035034469) * _TEMP * _15_11;
_LP0 = _LP0 + (    0.74195382166195) * _TEMP * _15_12;
_LP1 = _LP1 + (    0.21853214177389) * _TEMP * _15_12;
_LP0 = _LP0 + (    1.06672986191085) * _TEMP * _15_13;
_LP1 = _LP1 + (   -0.19282044488809) * _TEMP * _15_13;
_LP0 = _LP0 + (    0.26806951929123) * _TEMP * _15_14;
_LP1 = _LP1 + (    0.06517758638472) * _TEMP * _15_14;
_LP0 = _LP0 + (     0.0778713217308) * _TEMP * _15_15;
_LP1 = _LP1 + (   -0.03668032161874) * _TEMP * _15_15;
_LP0 = _LP0 + (   -0.09194177747459) * _TEMP * _15_16;
_LP1 = _LP1 + (    -0.4977760533232) * _TEMP * _15_16;
_LP0 = _LP0 + (   -3.98937357410699) * _TEMP * _15_17;
_LP1 = _LP1 + (   -0.31018538823981) * _TEMP * _15_17;
_LP0 = _LP0 + (    0.35287679571719) * _TEMP * _15_18;
_LP1 = _LP1 + (   -0.02015783290157) * _TEMP * _15_18;
_LP0 = _LP0 + (    1.52563373276332) * _TEMP * _15_19;
_LP1 = _LP1 + (   -0.22325150269765) * _TEMP * _15_19;
_LP0 = _LP0 + (   -0.36322872498094) * _TEMP * _15_20;
_LP1 = _LP1 + (    0.07951354600856) * _TEMP * _15_20;
_LP0 = _LP0 + (   -0.22971230249915) * _TEMP * _15_21;
_LP1 = _LP1 + (   -0.07212711575221) * _TEMP * _15_21;
_LP0 = _LP0 + (    0.77272753993083) * _TEMP * _15_22;
_LP1 = _LP1 + (   -0.64182873353759) * _TEMP * _15_22;
_LP0 = _LP0 + (    0.60718149732812) * _TEMP * _15_23;
_LP1 = _LP1 + (    0.00777637954482) * _TEMP * _15_23;
_LP0 = _LP0 + (   -4.91535453928939) * _TEMP * _15_24;
_LP1 = _LP1 + (    1.51965885101281) * _TEMP * _15_24;
_LP0 = _LP0 + (   -0.02109868296266) * _TEMP * _15_25;
_LP1 = _LP1 + (    0.09330281936371) * _TEMP * _15_25;
_LP0 = _LP0 + (    0.93522054664957) * _TEMP * _15_26;
_LP1 = _LP1 + (   -0.32406978782428) * _TEMP * _15_26;
_LP0 = _LP0 + (    0.47161253734908) * _TEMP * _15_27;
_LP1 = _LP1 + (    0.42260135446099) * _TEMP * _15_27;
_LP0 = _LP0 + (    0.08908491486572) * _TEMP * _15_28;
_LP1 = _LP1 + (    0.10834416667657) * _TEMP * _15_28;
_LP0 = _LP0 + (    0.29723259483099) * _TEMP * _15_29;
_LP1 = _LP1 + (    -0.5372116931974) * _TEMP * _15_29;

***  Effect: Sex ;
_TEMP = 1;
_LP0 = _LP0 + (    0.10625343434254) * _TEMP * _16_0;
_LP1 = _LP1 + (    0.13192871431405) * _TEMP * _16_0;

***  Effect: Smoker ;
_TEMP = 1;
_LP0 = _LP0 + (    0.00352878145396) * _TEMP * _17_0;
_LP1 = _LP1 + (    0.02094228404501) * _TEMP * _17_0;

***  Effect: Stroke ;
_TEMP = 1;
_LP0 = _LP0 + (    0.13932842959329) * _TEMP * _18_0;
_LP1 = _LP1 + (    0.09391050809749) * _TEMP * _18_0;

***  Effect: Veggies ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.00847958389324) * _TEMP * _19_0;
_LP1 = _LP1 + (   -0.00540402181676) * _TEMP * _19_0;

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1 _P2;
drop _LPMAX;
_LPMAX= 0;
_LP0 =    -2.92217243381275 + _LP0;
if _LPMAX < _LP0 then _LPMAX = _LP0;
_LP1 =      6.2656369753849 + _LP1;
if _LPMAX < _LP1 then _LPMAX = _LP1;
_LP0 = exp(_LP0 - _LPMAX);
_LP1 = exp(_LP1 - _LPMAX);
_LPMAX = exp(-_LPMAX);
_P2 = 1 / (_LPMAX + _LP0 + _LP1);
_P0 = _LP0 * _P2;
_P1 = _LP1 * _P2;
_P2 = _LPMAX * _P2;

REGDR1:

*** Residuals;
if (_Y = .) then do;
   R_Diabetes_Predictionprediabetes = .;
   R_Diabetes_Predictionno_diabetes = .;
   R_Diabetes_Predictiondiabetes = .;
end;
else do;
    label R_Diabetes_Predictionprediabetes = 
'Residual: Diabetes_Prediction=prediabetes' ;
    label R_Diabetes_Predictionno_diabetes = 
'Residual: Diabetes_Prediction=no diabetes' ;
    label R_Diabetes_Predictiondiabetes = 
'Residual: Diabetes_Prediction=diabetes' ;
   R_Diabetes_Predictionprediabetes = - _P0;
   R_Diabetes_Predictionno_diabetes = - _P1;
   R_Diabetes_Predictiondiabetes = - _P2;
   select( _Y );
      when (0)  R_Diabetes_Predictionprediabetes = 
        R_Diabetes_Predictionprediabetes + 1;
      when (1)  R_Diabetes_Predictionno_diabetes = 
        R_Diabetes_Predictionno_diabetes + 1;
      when (2)  R_Diabetes_Predictiondiabetes = R_Diabetes_Predictiondiabetes
         + 1;
   end;
end;

*** Posterior Probabilities and Predicted Level;
label P_Diabetes_Predictionprediabetes = 
'Predicted: Diabetes_Prediction=prediabetes' ;
label P_Diabetes_Predictionno_diabetes = 
'Predicted: Diabetes_Prediction=no diabetes' ;
label P_Diabetes_Predictiondiabetes = 
'Predicted: Diabetes_Prediction=diabetes' ;
P_Diabetes_Predictionprediabetes = _P0;
_MAXP = _P0;
_IY = 1;
P_Diabetes_Predictionno_diabetes = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
P_Diabetes_Predictiondiabetes = _P2;
if (_P2 >  _MAXP + 1E-8) then do;
   _MAXP = _P2;
   _IY = 3;
end;
I_Diabetes_Prediction = REGDRF[_IY];
U_Diabetes_Prediction = REGDRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;
