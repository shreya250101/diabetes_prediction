MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 03, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:00:46" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                March 03, 2024
Time:                20:00:46
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0FHECAM "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0FHECAM new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M2HNKMWT;
MPRINT(EM_DIAGRAM):   set WORK.M2HNKMWT;
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M2HNKMWT;
MPRINT(EM_DIAGRAM):   set WORK.M2HNKMWT end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   ROLE = 'TARGET';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
MPRINT(EM_DIAGRAM):   FORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
MPRINT(EM_DIAGRAM):   USE='Y';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Create decision matrix;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data EMWS2.EM_Clus / view=EMWS2.EM_Clus;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_TRAIN(keep
MPRINT(EM_DIAGRAM):  =Age AnyHealthcare BMI CholCheck DiffWalk Education GenHlth HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump Income MentHlth NoDocbcCost PhysHlth _SEGMENT_);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Binary and Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Run ARBOR procedure;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS2.EM_Clus MAXSURRS=5 ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
MPRINT(INTINPUTS):   Age BMI
MPRINT(EM_DIAGRAM):   / level = interval;
MPRINT(EM_DIAGRAM):   input
MPRINT(NOMINPUTS):   AnyHealthcare CholCheck DiffWalk HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump NoDocbcCost
MPRINT(EM_DIAGRAM):   / level=nominal;
MPRINT(EM_DIAGRAM):   input
MPRINT(ORDINPUTS):   Education GenHlth Income MentHlth PhysHlth
MPRINT(EM_DIAGRAM):   / level=ordinal;
MPRINT(EM_DIAGRAM):   target _SEGMENT_ / level=NOMINAL Criterion=PROBCHISQ ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS2.Clus_PLOTDS SEQUENCE=EMWS2.Clus_OUTSEQ IMPORTANCE=EMWS2.Clus_OUTIMPORT NODESTAT=EMWS2.Clus_OUTNODES SUMMARY=WORK.OUTSUMMARY_TREE_20QSAA4 STATSBYNODE=WORK.OUTSTATS_TREE_20QSAA4 Pathlistnonmissing = 
WORK.OUTPATH_TREE_20QSAA4 Rules = WORK.OUTRULES_TREE_20QSAA4 ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS2.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename x "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):    data temp;
MPRINT(EM_DIAGRAM):   length varname $20;
MPRINT(EM_DIAGRAM):   retain varname;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_20QSAA4;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp;
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P__SEGMENT_3 P__SEGMENT_2 P__SEGMENT_1 );
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   if _a;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file x;
MPRINT(EM_DIAGRAM):   set temp;
MPRINT(EM_DIAGRAM):   by node descending varname;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   origvar = varname;
MPRINT(EM_DIAGRAM):   oldnode = node;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if first.node then do;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put " Node = " node;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if first.varname then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   oldnode=node;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   oldnode=node;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if last.varname then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   oldnode=node;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if last.node then do;
MPRINT(EM_DIAGRAM):   put "then ";
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
MPRINT(EM_DIAGRAM):   put " ";
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   oldnode=node;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename x;
MPRINT(EM_DIAGRAM):    data templabel;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_20QSAA4;
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempvar;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_20QSAA4;
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   keep NODE character_value;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempbelow;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   keep node belowtext;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempoutrules;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_20QSAA4;
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   by node numeric_value;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempabove;
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   by parent numeric_value;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   *length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   length abovetext $256;
MPRINT(EM_DIAGRAM):   length tempstring origchar $64;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   branch = 1;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   branch = 1;
MPRINT(EM_DIAGRAM):   origchar = character_value;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   branch = branch + 1;
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   origval = numeric_value;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   origchar = character_value;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   origval = numeric_value;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   origval = character_value;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   flag = 0;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   if length < 32 then do;
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   flag = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   if length < 32 then do;
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   flag=1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempmissing;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_20QSAA4;
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   by parent branch;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   by parent branch;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   by parent branch;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   by parent branch;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   if _a then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Or Missing";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   abovetext = " Missing Values Only";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Non-Missing Values";
MPRINT(EM_DIAGRAM):   if node=1 then do;
MPRINT(EM_DIAGRAM):   traintotal = N;
MPRINT(EM_DIAGRAM):   validtotal=VN;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label traintotal = "Train Total";
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data tempoutstats;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_20QSAA4;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
MPRINT(EM_DIAGRAM):   tarlevel ="NOMINAL";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N NODECOLOR 8;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   label parent = "Parent Id" depth = "Depth" belowtext= "Below Text" abovetext = "Above Text" linkwidth = "Link Width" nodetext = "Node Text" textall = "All Text" N = "Train: Number of Observations" nodecolor = "Node Color" node = 
"Node";
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus_TREE_PLOT tempoutstats;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ P__SEGMENT_3 8;
MPRINT(EM_DIAGRAM):   retain P__SEGMENT_3 eventlevel;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   if statname='N' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='PREDICTION' then eventlevel=category;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PROBABILITY' then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   P__SEGMENT_3 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   textall = strip(textall)||'0A'x||strip( text);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if last.node then do;
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||" Count:"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||" Count:"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   output EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if statname='RASE' then _RASE_=statvalue;
MPRINT(EM_DIAGRAM):   label _RASE_ = "Train: Root Average Square Error";
MPRINT(EM_DIAGRAM):   if STATNAME = 'PREDICTION' then do;
MPRINT(EM_DIAGRAM):   nodetext= "Average"|| put(STATVALUE, 13.4)||'0A'x|| "Count:"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = nodetext;
MPRINT(EM_DIAGRAM):   P__SEGMENT_3 = STATVALUE;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if last.node then do;
MPRINT(EM_DIAGRAM):   output EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label P__SEGMENT_3 = "Predicted Variable";
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempcolor;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_20QSAA4;
MPRINT(EM_DIAGRAM):   retain eventlevel;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus_TREE_PLOT tempcolor;
MPRINT(EM_DIAGRAM):   by node;
MPRINT(EM_DIAGRAM):   length traintotal 8;
MPRINT(EM_DIAGRAM):   retain traintotal;
MPRINT(EM_DIAGRAM):   label traintotal = "Train Total";
MPRINT(EM_DIAGRAM):   if node=1 then do;
MPRINT(EM_DIAGRAM):   traintotal = N;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   textall = "Node Id:"|| put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tempout;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
MPRINT(EM_DIAGRAM):   by descending P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tree_temp;
MPRINT(EM_DIAGRAM):   set tempout;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
MPRINT(EM_DIAGRAM):   label index= "Leaf Index";
MPRINT(EM_DIAGRAM):   label percevent_train = "Percent Cases";
MPRINT(EM_DIAGRAM):   label perc_train = "Event Percentage";
MPRINT(EM_DIAGRAM):   label tprob= "Training Percent ";
MPRINT(EM_DIAGRAM):   tprob = round(P__SEGMENT_3, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   index = _n_;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   by NODE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   by NODE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   by NODE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   by node index;
MPRINT(EM_DIAGRAM):   run;
ERROR: Invalid file, \\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2.
MPRINT(EM_DIAGRAM):    title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Variable Importance";
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    data WORK.M1Q33WWW;
MPRINT(EM_DIAGRAM):   set WORK.M1Q33WWW;
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
MPRINT(EM_DIAGRAM):   where IMPORTANCE>0;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data = WORK.M1Q33WWW;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.M1Q33WWW;
MPRINT(EM_DIAGRAM):   merge WORK.M1Q33WWW WORK.Clus_GRAPHVARS(in=_b_);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M1Q33WWW;
MPRINT(EM_DIAGRAM):   set WORK.M1Q33WWW end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   ROLE = 'BY';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
MPRINT(EM_DIAGRAM):   FORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS2.Clus_TRAIN out=_null_ outstat=WORK.Clus_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   Age BMI
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):   set WORK.Clus_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('P0','P100');
MPRINT(EM_DIAGRAM):   if _TYPE_='P0' then _TYPE_='MIN';
MPRINT(EM_DIAGRAM):   else if _TYPE_='P100' then _TYPE_='MAX';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
MPRINT(EM_DIAGRAM):    data WORK.Clus_UGRID;
MPRINT(EM_DIAGRAM):   set WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):   B1 = MIN + (1-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B2 = MIN + (2-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B3 = MIN + (3-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B4 = MIN + (4-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B5 = MIN + (5-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B6 = MIN + (6-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B7 = MIN + (7-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B8 = MIN + (8-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B9 = MIN + (9-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   drop MIN MAX;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating formats for binning interval variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc format;
MPRINT(EM_DIAGRAM):   value F1_ 1-2.5 = "1:2.5" 2.5-4 = "2.5:4" 4-5.5 = "4:5.5" 5.5-7 = "5.5:7" 7-8.5 = "7:8.5" 8.5-10 = "8.5:10" 10-11.5 = "10:11.5" 11.5-13 = "11.5:13" ;
MPRINT(EM_DIAGRAM):   value F2_ 12-16 = "12:16" 16-20 = "16:20" 20-24 = "20:24" 24-28 = "24:28" 28-32 = "28:32" 32-36 = "32:36" 36-40 = "36:40" 40-44 = "40:44" ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    ods listing close;
MPRINT(EM_DIAGRAM):   ods output crosstabfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS2.Clus_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   table Age * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table AnyHealthcare * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BMI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CholCheck * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table DiffWalk * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table Education * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table GenHlth * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HeartDiseaseorAttack * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HighBP * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HighChol * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HvyAlcoholConsump * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table Income * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table MentHlth * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table NoDocbcCost * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PhysHlth * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   format AGE F1_.;
MPRINT(EM_DIAGRAM):   format BMI F2_.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   ods listing;
MPRINT(EM_DIAGRAM):    data EMWS2.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" _SEGMENT_ = "Segment Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'ROWVARIABLE');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   bynum = varnum(dsid, "_SEGMENT_");
MPRINT(EM_DIAGRAM):   length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   percent = getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   varblnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   _SEGMENT_ = getvarn(dsid, bynum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, varblnum);
MPRINT(EM_DIAGRAM):   varformat = varfmt(dsid, varblnum);
MPRINT(EM_DIAGRAM):   if varformat eq '' then varformat = 'best12.';
MPRINT(EM_DIAGRAM):   _X_=.;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
MPRINT(EM_DIAGRAM):   _X_ = getvarn(dsid, varblnum);
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(putn(_X_, varformat));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _XLABEL_ = getvarc(dsid, varblnum);
MPRINT(EM_DIAGRAM):   if getvarc(dsid, typenum) = '11' then output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc means data=EMWS2.Clus_PROFILE noprint missing NWAY;
MPRINT(EM_DIAGRAM):   class _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   var COUNT;
MPRINT(EM_DIAGRAM):   output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_PROFILE(drop=SUM);
MPRINT(EM_DIAGRAM):   label BYPERCENT= "Percent";
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus_PROFILE WORK.Clus_STATCOUNT;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   if SUM ne . then BYPERCENT = 100*COUNT/SUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M1Q33WWW;
MPRINT(EM_DIAGRAM):   by Name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus_PROFILE(in=_a) WORK.M1Q33WWW(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
MPRINT(EM_DIAGRAM):   by _Variable_;
MPRINT(EM_DIAGRAM):   label Role = "Role";
MPRINT(EM_DIAGRAM):   label Label = "Label";
MPRINT(EM_DIAGRAM):   if _a then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable _VARIABLE_ by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_ _X_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   retain orderedValue 0;
MPRINT(EM_DIAGRAM):   label OrderedValue = "Ordered Values";
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_;
MPRINT(EM_DIAGRAM):   if first._variable_ then orderedValue=1;
MPRINT(EM_DIAGRAM):   else orderedValue+1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_temp;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   _idvar_=left(put(_SEGMENT_,4.));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc distance data=WORK.Clus_temp out=EMWS2.Clus_DISTANCE method=l(2) shape=square;
MPRINT(EM_DIAGRAM):   id _idvar_;
MPRINT(EM_DIAGRAM):   var interval(
MPRINT(DMVQVARS):  Age BMI AnyHealthcare0 AnyHealthcare1 CholCheck0 CholCheck1 DiffWalk0 DiffWalk1 HeartDiseaseorAttack0 HeartDiseaseorAttack1 HighBP0 HighBP1 HighChol0 HighChol1 HvyAlcoholConsump0 HvyAlcoholConsump1 NoDocbcCost0 NoDocbcCost1 T_Education 
T_GenHlth T_Income T_MentHlth T_PhysHlth
MPRINT(EM_DIAGRAM):  );
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS2 nolist;
MPRINT(EM_DIAGRAM):   modify Clus_DISTANCE;
MPRINT(EM_DIAGRAM):   rename _idvar_=_SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating data set for Input Mean report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data temp(drop=_type_ over_all);
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
MPRINT(EM_DIAGRAM):   where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
MPRINT(EM_DIAGRAM):   set tstat;
MPRINT(EM_DIAGRAM):   if std ^in (0, .) then do;
MPRINT(EM_DIAGRAM):   stdmin = abs((min-mean)/std);
MPRINT(EM_DIAGRAM):   stdmax = abs((max-mean)/std);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if mean ^in(0, .) then cv = std/mean;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tstat;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tstdtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data tstdtemp;
MPRINT(EM_DIAGRAM):   merge tstdtemp tstat;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
MPRINT(EM_DIAGRAM):   drop stdmin stdmax mean;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS2.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   id _type_;
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempVar;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
MPRINT(EM_DIAGRAM):   Length _SEGMENT_CHAR_ $7;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Segment Name" _SEGMENT_CHAR_ = "Segment Id" NAME = "Variable" INPUT = "Input" LABEL = "Label" CV = "Coefficient of Variation" STDMEAN = "Normalized Mean";
MPRINT(EM_DIAGRAM):   merge tempvar tstdtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if LABEL='' then LABEL=NAME;
MPRINT(EM_DIAGRAM):   _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus_INPUTMEAN;
MPRINT(EM_DIAGRAM):   by descending cv;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Determining the important variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    data keepvars(rename=(NAME=INPUT));
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
MPRINT(EM_DIAGRAM):   if eof then call symput('_nobs', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS2.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   id _type_;
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=keepvars;
MPRINT(EM_DIAGRAM):   by INPUT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   by INPUT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data vars;
MPRINT(EM_DIAGRAM):   merge tempvar keepvars(in=b);
MPRINT(EM_DIAGRAM):   by INPUT;
MPRINT(EM_DIAGRAM):   if b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable INPUT by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=vars;
MPRINT(EM_DIAGRAM):   by descending importance;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set vars;
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
MPRINT(EM_DIAGRAM):   else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * mergeVarMeansandClusLabel;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data temp(keep=_SEGMENT_ BMI T_GenHlth T_PhysHlth DiffWalk0 DiffWalk1 T_Income AnyHealthcare0 AnyHealthcare1);
MPRINT(EM_DIAGRAM):   length _SEGMENT_ BMI T_GenHlth T_PhysHlth DiffWalk0 DiffWalk1 T_Income AnyHealthcare0 AnyHealthcare1 8;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   where _type_ ='CLUS_MEAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus_LABEL;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
