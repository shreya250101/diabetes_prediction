*------------------------------------------------------------*
User:                bkris2
Date:                March 09, 2024
Time:                15:48:50
Site:                70080107
Platform:            X64_10PRO
Maintenance Release: 9.04.01M7P080520
EM Version:          15.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 09, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:36" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                March 09, 2024
Time:                15:47:36
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O19586HD "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O19586HD new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 09, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:37" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bkris2";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080107";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M7P080520";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 09, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:37" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bkris2";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ '\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
44882      proc freq data=EMWS2.Clus3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Clus3_VariableSet noprint;
44883      table ROLE*LEVEL/out=WORK.Clus3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Clus3META;
44884      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS2.CLUS3_VARIABLESET.
NOTE: The data set WORK.CLUS3META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
44885      proc print data=WORK.Clus3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Clus3META label noobs;
44886      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
44887      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
44888      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
44889      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
44890      run;
 
NOTE: There were 3 observations read from the data set WORK.CLUS3META.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
44891      title10;
MPRINT(EM_DIAGRAM):   title10;
44892      data WORK.M14VRE0T;
MPRINT(EM_DIAGRAM):    data WORK.M14VRE0T;
44893      set WORK.M14VRE0T;
MPRINT(EM_DIAGRAM):   set WORK.M14VRE0T;
44894      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
44895      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M14VRE0T.
NOTE: The data set WORK.M14VRE0T has 21 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M14VRE0T;
MPRINT(EM_DIAGRAM):   set WORK.M14VRE0T;
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
44904      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
44905      * Clus3: Preliminary Clustering;
MPRINT(EM_DIAGRAM):   * Clus3: Preliminary Clustering;
44906      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44907      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44908      * Clus3: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: DMDBClass Macro ;
44909      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44910      %macro DMDBClass;
44911          AnyHealthcare(ASC) CholCheck(ASC) DiffWalk(ASC) Education(ASC) Fruits(ASC)
44912         GenHlth(ASC) HeartDiseaseorAttack(ASC) HighBP(ASC) HighChol(ASC)
44913         HvyAlcoholConsump(ASC) Income(ASC) MentHlth(ASC) NoDocbcCost(ASC)
44914         PhysActivity(ASC) PhysHlth(ASC) Sex(ASC) Smoker(ASC) Stroke(ASC) Veggies(ASC)
44915      %mend DMDBClass;
44916      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44917      * Clus3: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: DMDBVar Macro ;
44918      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44919      %macro DMDBVar;
44920          Age BMI
44921      %mend DMDBVar;
44922      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44923      * Clus3: Create DMDB;
MPRINT(EM_DIAGRAM):   * Clus3: Create DMDB;
44924      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44925      proc dmdb batch data=EMWS2.Varsel_TRAIN
44926      dmdbcat=WORK.Clus3_DMDB
44927      maxlevel = 513
44928      out=WORK.Clus3_DMDB
44929      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS2.Varsel_TRAIN dmdbcat=WORK.Clus3_DMDB maxlevel = 513 out=WORK.Clus3_DMDB ;
MPRINT(EM_DIAGRAM):   class
44930      class %DMDBClass;
MPRINT(DMDBCLASS):   AnyHealthcare(ASC) CholCheck(ASC) DiffWalk(ASC) Education(ASC) Fruits(ASC) GenHlth(ASC) HeartDiseaseorAttack(ASC) HighBP(ASC) HighChol(ASC) HvyAlcoholConsump(ASC) Income(ASC) MentHlth(ASC) NoDocbcCost(ASC) PhysActivity(ASC)
PhysHlth(ASC) Sex(ASC) Smoker(ASC) Stroke(ASC) Veggies(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
44931      var %DMDBVar;
MPRINT(DMDBVAR):   Age BMI
MPRINT(EM_DIAGRAM):  ;
44932      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 100000   Memory used = 511K.
NOTE: Records processed = 200000   Memory used = 511K.
NOTE: Records processed = 247875   Memory used = 511K.
NOTE: There were 250716 observations read from the data set ZETADATA.ZETADIABITIES_TRAIN.
NOTE: There were 250716 observations read from the data set EMWS2.IDS_DATA.
NOTE: View EMWS2.VARSEL_TRAIN.VIEW used (Total process time):
      real time           1.74 seconds
      cpu time            1.34 seconds
 
NOTE: There were 247875 observations read from the data set EMWS2.FILTER_TRAIN.
NOTE: There were 247875 observations read from the data set EMWS2.VARSEL_TRAIN.
NOTE: The data set WORK.CLUS3_DMDB has 247875 observations and 21 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           1.78 seconds
      cpu time            1.39 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
44933      quit;
44934      *--- end code ---*;
 
44935      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
44936      * Clus3: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: Interval Inputs Macro ;
44937      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44938      %macro DMVQINTERVAL;
44939          Age BMI
44940      %mend DMVQINTERVAL;
44941      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44942      * Clus3: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: Nominal Inputs Macro ;
44943      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44944      %macro DMVQNOMINAL;
44945          AnyHealthcare CholCheck DiffWalk Fruits HeartDiseaseorAttack HighBP HighChol
44946         HvyAlcoholConsump NoDocbcCost PhysActivity Sex Smoker Stroke Veggies
44947      %mend DMVQNOMINAL;
44948      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44949      * Clus3: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: Ordinal Inputs Macro ;
44950      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44951      %macro DMVQORDINAL;
44952          Education GenHlth Income MentHlth PhysHlth
44953      %mend DMVQORDINAL;
44954      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44955      * Clus3: Run DMVQ procedure;
MPRINT(EM_DIAGRAM):   * Clus3: Run DMVQ procedure;
44956      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44957      title;
MPRINT(EM_DIAGRAM):   title;
44958      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
44959      proc dmvq data=WORK.Clus3_DMDB dmdbcat=WORK.Clus3_DMDB std=STD nominal=GLM ordinal=RANK
44960      ;
MPRINT(EM_DIAGRAM):   proc dmvq data=WORK.Clus3_DMDB dmdbcat=WORK.Clus3_DMDB std=STD nominal=GLM ordinal=RANK ;
NOTE: The training set WORK.CLUS3_DMDB.DATA has 21 variable(s).
NOTE: The DMVQ statement has finished with return code=0 and status=begin.
MPRINT(EM_DIAGRAM):   input
44961      input %DMVQINTERVAL / level=interval;
MPRINT(DMVQINTERVAL):   Age BMI
MPRINT(EM_DIAGRAM):   / level=interval;
NOTE: 2 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
MPRINT(EM_DIAGRAM):   input
44962      input %DMVQNOMINAL / level=nominal;
MPRINT(DMVQNOMINAL):   AnyHealthcare CholCheck DiffWalk Fruits HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump NoDocbcCost PhysActivity Sex Smoker Stroke Veggies
MPRINT(EM_DIAGRAM):   / level=nominal;
NOTE: 14 input variable(s) defined for ID=I2.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
MPRINT(EM_DIAGRAM):   input
44963      input %DMVQORDINAL / level=ordinal;
MPRINT(DMVQORDINAL):   Education GenHlth Income MentHlth PhysHlth
MPRINT(EM_DIAGRAM):   / level=ordinal;
NOTE: 5 input variable(s) defined for ID=I3.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
44964      VQ maxc = 50 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
MPRINT(EM_DIAGRAM):   VQ maxc = 50 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
NOTE: A maximum of 50 clusters have been requested.
NOTE: The VQ statement has finished with return code=0 and status=architecture.
44965      MAKE outvar=EMWS2.Clus3_OUTVAR;
MPRINT(EM_DIAGRAM):   MAKE outvar=EMWS2.Clus3_OUTVAR;
 
NOTE: 21 input variable(s).
NOTE: Number of cases=247875
NOTE: Sum of frequencies=247875
NOTE: Sum of weights=247875
NOTE: VARDEF=DF
NOTE: Maximum number of categories=31
NOTE: The total number of variables is 21 with dimensionality 35.
NOTE: 21 variables will be used for clustering.
NOTE: Open output data set EMWS2.CLUS3_OUTVAR.DATA with 36 variables.
NOTE: The data set EMWS2.CLUS3_OUTVAR has 4 observations and 36 variables.
NOTE: The MAKE statement has finished with return code=0 and status=made.
44966      INITIAL radius=0
44967      ;
MPRINT(EM_DIAGRAM):   INITIAL radius=0 ;
NOTE: 50 seeds were selected from data set WORK.CLUS3_DMDB.DATA using the SEPARATE algorithm.
NOTE: The INITIAL statement has finished with return code=0 and status=initialized.
44968      TRAIN tech=FORGY
44969      ;
MPRINT(EM_DIAGRAM):   TRAIN tech=FORGY ;
WARNING: The limit of 10 iterations was reached without convergence.
NOTE: The TRAIN statement has finished with return code=0 and status=trained.
44970      SAVE outstat=WORK.Clus3_OUTSTAT outmean=EMWS2.Clus3_OUTMEAN;
MPRINT(EM_DIAGRAM):   SAVE outstat=WORK.Clus3_OUTSTAT outmean=EMWS2.Clus3_OUTMEAN;
NOTE: The data set WORK.CLUS3_OUTSTAT has 316 observations and 38 variables.
NOTE: The data set EMWS2.CLUS3_OUTMEAN has 50 observations and 44 variables.
NOTE: The SAVE statement has finished with return code=0 and status=statistics.
44971      code file="\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\DMVQSCORECODE.sas"
44972      group=Clus3
44973      ;
MPRINT(EM_DIAGRAM):   code file="\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\DMVQSCORECODE.sas" group=Clus3 ;
NOTE: External file \\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\DMVQSCORECODE.sas opened.
NOTE: The CODE statement has finished with return code=0 and status=statistics.
44974      run;
MPRINT(EM_DIAGRAM):   run;
 
44975      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 247875 observations read from the data set WORK.CLUS3_DMDB.
NOTE: PROCEDURE DMVQ used (Total process time):
      real time           8.50 seconds
      cpu time            8.31 seconds
 
 
44976      proc transpose data=EMWS2.Clus3_OUTVAR out=WORK.Clus3_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS2.Clus3_OUTVAR out=WORK.Clus3_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
44977      var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
44978      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
44979      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS2.CLUS3_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS3_OUTVAR has 35 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
44980      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
44981      * Clus3: DMVQ Variables;
MPRINT(EM_DIAGRAM):   * Clus3: DMVQ Variables;
44982      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44983      %macro dmvqvars;
44984          Age BMI AnyHealthcare0 AnyHealthcare1 CholCheck0 CholCheck1 DiffWalk0
44985         DiffWalk1 Fruits0 Fruits1 HeartDiseaseorAttack0 HeartDiseaseorAttack1 HighBP0
44986         HighBP1 HighChol0 HighChol1 HvyAlcoholConsump0 HvyAlcoholConsump1 NoDocbcCost0
44987         NoDocbcCost1 PhysActivity0 PhysActivity1 Sex0 Sex1 Smoker0 Smoker1 Stroke0
44988         Stroke1 Veggies0 Veggies1 T_Education T_GenHlth T_Income T_MentHlth T_PhysHlth
44989      %mend ;
44990
44991
 
44992      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
44993      * Clus3: Determining the number of clusters;
MPRINT(EM_DIAGRAM):   * Clus3: Determining the number of clusters;
44994      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44995      proc cluster data=EMWS2.Clus3_OUTMEAN method=AVERAGE pseudo outtree=EMWS2.Clus3_CLUSSEED
44996      ;
MPRINT(EM_DIAGRAM):   proc cluster data=EMWS2.Clus3_OUTMEAN method=AVERAGE pseudo outtree=EMWS2.Clus3_CLUSSEED ;
MPRINT(EM_DIAGRAM):   var
44997      var %dmvqvars;
MPRINT(DMVQVARS):   Age BMI AnyHealthcare0 AnyHealthcare1 CholCheck0 CholCheck1 DiffWalk0 DiffWalk1 Fruits0 Fruits1 HeartDiseaseorAttack0 HeartDiseaseorAttack1 HighBP0 HighBP1 HighChol0 HighChol1 HvyAlcoholConsump0 HvyAlcoholConsump1 NoDocbcCost0
NoDocbcCost1 PhysActivity0 PhysActivity1 Sex0 Sex1 Smoker0 Smoker1 Stroke0 Stroke1 Veggies0 Veggies1 T_Education T_GenHlth T_Income T_MentHlth T_PhysHlth
MPRINT(EM_DIAGRAM):  ;
44998      copy _SEGMENT_;
MPRINT(EM_DIAGRAM):   copy _SEGMENT_;
44999      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS2.CLUS3_CLUSSEED has 99 observations and 52 variables.
NOTE: The PROCEDURE CLUSTER printed page 12.
NOTE: PROCEDURE CLUSTER used (Total process time):
      real time           0.13 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
45000      quit;
45001      proc sort data =EMWS2.Clus3_CLUSSEED out=WORK._SEED_;
MPRINT(EM_DIAGRAM):   proc sort data =EMWS2.Clus3_CLUSSEED out=WORK._SEED_;
45002      by _ncl_;
MPRINT(EM_DIAGRAM):   by _ncl_;
45003      where (_ccc_ > -99999.0);
MPRINT(EM_DIAGRAM):   where (_ccc_ > -99999.0);
45004      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 49 observations read from the data set EMWS2.CLUS3_CLUSSEED.
      WHERE _ccc_>-99999;
NOTE: The data set WORK._SEED_ has 49 observations and 52 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
45005      data WORK._SEED2_;
MPRINT(EM_DIAGRAM):   data WORK._SEED2_;
45006      retain oJump occc oncl;
MPRINT(EM_DIAGRAM):   retain oJump occc oncl;
45007      set WORK._SEED_;
MPRINT(EM_DIAGRAM):   set WORK._SEED_;
45008      _lccc_=lag(_ccc_);
MPRINT(EM_DIAGRAM):   _lccc_=lag(_ccc_);
45009      if _lccc_ > . then jump = _ccc_ - _lccc_;
MPRINT(EM_DIAGRAM):   if _lccc_ > . then jump = _ccc_ - _lccc_;
45010      if jump<0 and ojump>0 then do;
MPRINT(EM_DIAGRAM):   if jump<0 and ojump>0 then do;
45011      * Have a local Max;
MPRINT(EM_DIAGRAM):   * Have a local Max;
45012      numclus = oncl;
MPRINT(EM_DIAGRAM):   numclus = oncl;
45013      cccvalue = occc;
MPRINT(EM_DIAGRAM):   cccvalue = occc;
45014      output;
MPRINT(EM_DIAGRAM):   output;
45015      end;
MPRINT(EM_DIAGRAM):   end;
45016      ojump = jump;
MPRINT(EM_DIAGRAM):   ojump = jump;
45017      occc = _ccc_;
MPRINT(EM_DIAGRAM):   occc = _ccc_;
45018      oncl = _ncl_;
MPRINT(EM_DIAGRAM):   oncl = _ncl_;
45019      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 49 observations read from the data set WORK._SEED_.
NOTE: The data set WORK._SEED2_ has 9 observations and 59 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
45020      proc print data=WORK._SEED2_ label;
MPRINT(EM_DIAGRAM):   proc print data=WORK._SEED2_ label;
45021      var numclus cccvalue;
MPRINT(EM_DIAGRAM):   var numclus cccvalue;
45022      label numclus="%sysfunc(sasmsg(sashelp.dmine, rpt_numclus_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label numclus= "Number of Clusters";
45023      label cccvalue="%sysfunc(sasmsg(sashelp.dmine, rpt_ccc_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label cccvalue= "Clustering Cubic Criterion";
45024      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_OptClus_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Candidates for Optimum Number of Clusters";
MPRINT(EM_DIAGRAM):   run;
45025      run;
 
NOTE: There were 9 observations read from the data set WORK._SEED2_.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
45026      title10;
MPRINT(EM_DIAGRAM):   title10;
45027      data WORK._SEED2_;
MPRINT(EM_DIAGRAM):    data WORK._SEED2_;
45028      length msg $200;
MPRINT(EM_DIAGRAM):   length msg $200;
45029      set WORK._SEED2_ end=eof;
MPRINT(EM_DIAGRAM):   set WORK._SEED2_ end=eof;
45030      retain select cccSelect 0 numSel;
MPRINT(EM_DIAGRAM):   retain select cccSelect 0 numSel;
45031      if _N_=1 then numSel = numClus;
MPRINT(EM_DIAGRAM):   if _N_=1 then numSel = numClus;
45032      if cccvalue>=3 then do;
MPRINT(EM_DIAGRAM):   if cccvalue>=3 then do;
45033      if 20>= numclus >= 2 and cccSelect<1 then do;
MPRINT(EM_DIAGRAM):   if 20>= numclus >= 2 and cccSelect<1 then do;
45034      cccSelect = 1;
MPRINT(EM_DIAGRAM):   cccSelect = 1;
45035      select =1;
MPRINT(EM_DIAGRAM):   select =1;
45036      numSel = numClus;
MPRINT(EM_DIAGRAM):   numSel = numClus;
45037      end;
MPRINT(EM_DIAGRAM):   end;
45038      end;
MPRINT(EM_DIAGRAM):   end;
45039      else if 20>= numclus >= 2 and select<1 then do;
MPRINT(EM_DIAGRAM):   else if 20>= numclus >= 2 and select<1 then do;
45040      select = 1;
MPRINT(EM_DIAGRAM):   select = 1;
45041      numSel = numClus;
MPRINT(EM_DIAGRAM):   numSel = numClus;
45042      end;
MPRINT(EM_DIAGRAM):   end;
45043      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
45044      if ^(select=1 and cccselect=1) then do;
MPRINT(EM_DIAGRAM):   if ^(select=1 and cccselect=1) then do;
45045      put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
45046      put '*;';
MPRINT(EM_DIAGRAM):   put '*;';
45047      put "WARNING: The number of clusters selected based on the CCC values may not be valid.  Please refer to the documentation on the Cubic Clustering Criterion.";
MPRINT(EM_DIAGRAM):   put "WARNING: The number of clusters selected based on the CCC values may not be valid.  Please refer to the documentation on the Cubic Clustering Criterion.";
45048      put '*;';
MPRINT(EM_DIAGRAM):   put '*;';
45049      put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
45050      end;
MPRINT(EM_DIAGRAM):   end;
45051      if select<1 then do;
MPRINT(EM_DIAGRAM):   if select<1 then do;
45052      msg = sasmsg('sashelp.dmine', 'rpt_noCCCclusternum_note', 'NOQUOTE');
MPRINT(EM_DIAGRAM):   msg = sasmsg('sashelp.dmine', 'rpt_noCCCclusternum_note', 'NOQUOTE');
45053      put msg;
MPRINT(EM_DIAGRAM):   put msg;
45054      end;
MPRINT(EM_DIAGRAM):   end;
45055      if cccselect<1 then do;
MPRINT(EM_DIAGRAM):   if cccselect<1 then do;
45056      msg = sasmsg('sashelp.dmine', 'rpt_noValidclusterNum_note', 'NOQUOTE');
MPRINT(EM_DIAGRAM):   msg = sasmsg('sashelp.dmine', 'rpt_noValidclusterNum_note', 'NOQUOTE');
45057      put msg;
MPRINT(EM_DIAGRAM):   put msg;
45058      end;
MPRINT(EM_DIAGRAM):   end;
45059      call symput('em_maxC', strip(put(numSel,best.)));
MPRINT(EM_DIAGRAM):   call symput('em_maxC', strip(put(numSel,best.)));
45060      end;
MPRINT(EM_DIAGRAM):   end;
45061      run;
MPRINT(EM_DIAGRAM):   run;
 
*------------------------------------------------------------*
*;
WARNING: The number of clusters selected based on the CCC values may not be valid.  Please refer to the documentation on the Cubic Clustering Criterion.
*;
*------------------------------------------------------------*
There are no number of cluster matching the specified minimum and maximum number of clusters.  The number of clusters will be set to the first local peak.
NOTE: There were 9 observations read from the data set WORK._SEED2_.
NOTE: The data set WORK._SEED2_ has 9 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
45062      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45063      * Clus3: Training;
MPRINT(EM_DIAGRAM):   * Clus3: Training;
45064      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45065      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45066      * Clus3: Run DMVQ procedure;
MPRINT(EM_DIAGRAM):   * Clus3: Run DMVQ procedure;
45067      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45068      title;
MPRINT(EM_DIAGRAM):   title;
45069      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
45070      proc dmvq data=WORK.Clus3_DMDB dmdbcat=WORK.Clus3_DMDB std=STD nominal=GLM ordinal=RANK
45071      ;
MPRINT(EM_DIAGRAM):   proc dmvq data=WORK.Clus3_DMDB dmdbcat=WORK.Clus3_DMDB std=STD nominal=GLM ordinal=RANK ;
NOTE: The training set WORK.CLUS3_DMDB.DATA has 21 variable(s).
NOTE: The DMVQ statement has finished with return code=0 and status=begin.
MPRINT(EM_DIAGRAM):   input
45072      input %DMVQINTERVAL / level=interval;
MPRINT(DMVQINTERVAL):   Age BMI
MPRINT(EM_DIAGRAM):   / level=interval;
NOTE: 2 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
MPRINT(EM_DIAGRAM):   input
45073      input %DMVQNOMINAL / level=nominal;
MPRINT(DMVQNOMINAL):   AnyHealthcare CholCheck DiffWalk Fruits HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump NoDocbcCost PhysActivity Sex Smoker Stroke Veggies
MPRINT(EM_DIAGRAM):   / level=nominal;
NOTE: 14 input variable(s) defined for ID=I2.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
MPRINT(EM_DIAGRAM):   input
45074      input %DMVQORDINAL / level=ordinal;
MPRINT(DMVQORDINAL):   Education GenHlth Income MentHlth PhysHlth
MPRINT(EM_DIAGRAM):   / level=ordinal;
NOTE: 5 input variable(s) defined for ID=I3.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
45075      VQ maxc = 4 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
MPRINT(EM_DIAGRAM):   VQ maxc = 4 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
NOTE: A maximum of 4 clusters have been requested.
NOTE: The VQ statement has finished with return code=0 and status=architecture.
45076      MAKE outvar=EMWS2.Clus3_OUTVAR;
MPRINT(EM_DIAGRAM):   MAKE outvar=EMWS2.Clus3_OUTVAR;
 
NOTE: 21 input variable(s).
NOTE: Number of cases=247875
NOTE: Sum of frequencies=247875
NOTE: Sum of weights=247875
NOTE: VARDEF=DF
NOTE: Maximum number of categories=31
NOTE: The total number of variables is 21 with dimensionality 35.
NOTE: 21 variables will be used for clustering.
NOTE: Open output data set EMWS2.CLUS3_OUTVAR.DATA with 36 variables.
NOTE: The data set EMWS2.CLUS3_OUTVAR has 4 observations and 36 variables.
NOTE: The MAKE statement has finished with return code=0 and status=made.
45077      INITIAL radius=0
45078      ;
MPRINT(EM_DIAGRAM):   INITIAL radius=0 ;
NOTE: 4 seeds were selected from data set WORK.CLUS3_DMDB.DATA using the SEPARATE algorithm.
NOTE: The INITIAL statement has finished with return code=0 and status=initialized.
45079      TRAIN tech=FORGY
45080      ;
MPRINT(EM_DIAGRAM):   TRAIN tech=FORGY ;
NOTE: F-Convergence criterion is satisfied.
NOTE: The TRAIN statement has finished with return code=0 and status=trained.
45081      SAVE outstat=EMWS2.Clus3_OUTSTAT outmean=EMWS2.Clus3_OUTMEAN;
MPRINT(EM_DIAGRAM):   SAVE outstat=EMWS2.Clus3_OUTSTAT outmean=EMWS2.Clus3_OUTMEAN;
NOTE: The data set EMWS2.CLUS3_OUTSTAT has 40 observations and 38 variables.
NOTE: The data set EMWS2.CLUS3_OUTMEAN has 4 observations and 44 variables.
NOTE: The SAVE statement has finished with return code=0 and status=statistics.
45082      code file="\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\DMVQSCORECODE.sas"
45083      group=Clus3
45084      ;
MPRINT(EM_DIAGRAM):   code file="\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\DMVQSCORECODE.sas" group=Clus3 ;
NOTE: External file \\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\DMVQSCORECODE.sas opened.
NOTE: The CODE statement has finished with return code=0 and status=statistics.
45085      run;
MPRINT(EM_DIAGRAM):   run;
 
45086      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 247875 observations read from the data set WORK.CLUS3_DMDB.
NOTE: PROCEDURE DMVQ used (Total process time):
      real time           3.22 seconds
      cpu time            2.90 seconds
 
 
45087      libname _spdslib;
MPRINT(EM_DIAGRAM):    libname _spdslib;
WARNING: Libref _SPDSLIB is not assigned.
45088      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45089      * Clus3: Cluster Label;
MPRINT(EM_DIAGRAM):   * Clus3: Cluster Label;
45090      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45091      data EMWS2.Clus3_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_LABEL;
45092      length _SEGMENT_ 8 Label $80;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ 8 Label $80;
45093      format _SEGMENT_ 4.;
MPRINT(EM_DIAGRAM):   format _SEGMENT_ 4.;
45094      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Segment Name";
45095      label Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentLabel_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Segment Label";
45096      _SEGMENT_= 1;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 1;
45097      Label='Cluster1';
MPRINT(EM_DIAGRAM):   Label='Cluster1';
45098      output;
MPRINT(EM_DIAGRAM):   output;
45099      _SEGMENT_= 2;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 2;
45100      Label='Cluster2';
MPRINT(EM_DIAGRAM):   Label='Cluster2';
45101      output;
MPRINT(EM_DIAGRAM):   output;
45102      _SEGMENT_= 3;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 3;
45103      Label='Cluster3';
MPRINT(EM_DIAGRAM):   Label='Cluster3';
45104      output;
MPRINT(EM_DIAGRAM):   output;
45105      _SEGMENT_= 4;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 4;
45106      Label='Cluster4';
MPRINT(EM_DIAGRAM):   Label='Cluster4';
45107      output;
MPRINT(EM_DIAGRAM):   output;
45108      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS2.CLUS3_LABEL has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 09, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:55" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                March 09, 2024
Time:                15:47:55
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2XOV40F "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2XOV40F new;
MPRINT(EM_DIAGRAM):   run;
45210      proc transpose data=EMWS2.Clus3_OUTVAR out=WORK.Clus3_OUTVAR(rename=(COl2=NAME) where=(COL1='IMPUTED'));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS2.Clus3_OUTVAR out=WORK.Clus3_OUTVAR(rename=(COl2=NAME) where=(COL1='IMPUTED'));
45211      var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
45212      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
45213      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS2.CLUS3_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS3_OUTVAR has 0 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
45214      proc sort data=WORK.Clus3_OUTVAR;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus3_OUTVAR;
45215      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
45216      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.CLUS3_OUTVAR has 0 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
45217      proc sort data=EMWS2.Clus3_VariableSet(KEEP=NAME ROLE LEVEL) out=WORK.Clus3_SORTEDVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_VariableSet(KEEP=NAME ROLE LEVEL) out=WORK.Clus3_SORTEDVARS;
45218      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
45219      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS2.CLUS3_VARIABLESET.
NOTE: The data set WORK.CLUS3_SORTEDVARS has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
45220      data WORK.Clus3_OUTVAR;
MPRINT(EM_DIAGRAM):   data WORK.Clus3_OUTVAR;
45221      merge WORK.Clus3_OUTVAR(in=INVAR) WORK.Clus3_SORTEDVARS;
MPRINT(EM_DIAGRAM):   merge WORK.Clus3_OUTVAR(in=INVAR) WORK.Clus3_SORTEDVARS;
45222      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
45223      if INVAR then output;
MPRINT(EM_DIAGRAM):   if INVAR then output;
45224      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 0 observations read from the data set WORK.CLUS3_OUTVAR.
NOTE: There were 21 observations read from the data set WORK.CLUS3_SORTEDVARS.
NOTE: The data set WORK.CLUS3_OUTVAR has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
45225      filename emflow "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45226      *------------------------------------------------------------*;
45227      * Clus3: Scoring DATA data;
45228      *------------------------------------------------------------*;
45229      data EMWS2.Clus3_TRAIN
45230      / view=EMWS2.Clus3_TRAIN
45231      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_TRAIN / view=EMWS2.Clus3_TRAIN ;
45232      set EMWS2.Varsel_TRAIN
45233      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_TRAIN ;
45234      %inc emflow;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Age ;
MPRINT(EM_DIAGRAM):   drop T_Age ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then T_Age = .;
MPRINT(EM_DIAGRAM):   else T_Age = (Age - 8.05176802824004) * 0.32679747529256;
MPRINT(EM_DIAGRAM):   *** Standardize BMI ;
MPRINT(EM_DIAGRAM):   drop T_BMI ;
MPRINT(EM_DIAGRAM):   if missing( BMI ) then T_BMI = .;
MPRINT(EM_DIAGRAM):   else T_BMI = (BMI - 27.8250408472012) * 0.18851519374223;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AnyHealthcare ;
MPRINT(EM_DIAGRAM):   drop AnyHealthcare0 AnyHealthcare1 ;
MPRINT(EM_DIAGRAM):   if missing( AnyHealthcare ) then do;
MPRINT(EM_DIAGRAM):   AnyHealthcare0 = .;
MPRINT(EM_DIAGRAM):   AnyHealthcare1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( AnyHealthcare , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   AnyHealthcare0 = -0.15940630304357;
MPRINT(EM_DIAGRAM):   AnyHealthcare1 = 0.15940630304357;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   AnyHealthcare0 = 3.13662617667999;
MPRINT(EM_DIAGRAM):   AnyHealthcare1 = -3.13662617667999;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   AnyHealthcare0 = .;
MPRINT(EM_DIAGRAM):   AnyHealthcare1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CholCheck ;
MPRINT(EM_DIAGRAM):   drop CholCheck0 CholCheck1 ;
MPRINT(EM_DIAGRAM):   if missing( CholCheck ) then do;
MPRINT(EM_DIAGRAM):   CholCheck0 = .;
MPRINT(EM_DIAGRAM):   CholCheck1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( CholCheck , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   CholCheck0 = -0.13978817572022;
MPRINT(EM_DIAGRAM):   CholCheck1 = 0.13978817572022;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   CholCheck0 = 3.57682601034125;
MPRINT(EM_DIAGRAM):   CholCheck1 = -3.57682601034125;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CholCheck0 = .;
MPRINT(EM_DIAGRAM):   CholCheck1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DiffWalk ;
MPRINT(EM_DIAGRAM):   drop DiffWalk0 DiffWalk1 ;
MPRINT(EM_DIAGRAM):   if missing( DiffWalk ) then do;
MPRINT(EM_DIAGRAM):   DiffWalk0 = .;
MPRINT(EM_DIAGRAM):   DiffWalk1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( DiffWalk , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   DiffWalk0 = 0.3095643103152;
MPRINT(EM_DIAGRAM):   DiffWalk1 = -0.3095643103152;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   DiffWalk0 = -1.6151667559647;
MPRINT(EM_DIAGRAM):   DiffWalk1 = 1.6151667559647;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   DiffWalk0 = .;
MPRINT(EM_DIAGRAM):   DiffWalk1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Fruits ;
MPRINT(EM_DIAGRAM):   drop Fruits0 Fruits1 ;
MPRINT(EM_DIAGRAM):   if missing( Fruits ) then do;
MPRINT(EM_DIAGRAM):   Fruits0 = .;
MPRINT(EM_DIAGRAM):   Fruits1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Fruits , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   Fruits0 = -0.5342681311123;
MPRINT(EM_DIAGRAM):   Fruits1 = 0.5342681311123;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   Fruits0 = 0.93585590031975;
MPRINT(EM_DIAGRAM):   Fruits1 = -0.93585590031975;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Fruits0 = .;
MPRINT(EM_DIAGRAM):   Fruits1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HeartDiseaseorAttack ;
MPRINT(EM_DIAGRAM):   drop HeartDiseaseorAttack0 HeartDiseaseorAttack1 ;
MPRINT(EM_DIAGRAM):   if missing( HeartDiseaseorAttack ) then do;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack0 = .;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HeartDiseaseorAttack , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack0 = 0.22710871668592;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack1 = -0.22710871668592;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack0 = -2.20157988715912;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack1 = 2.20157988715912;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack0 = .;
MPRINT(EM_DIAGRAM):   HeartDiseaseorAttack1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighBP ;
MPRINT(EM_DIAGRAM):   drop HighBP0 HighBP1 ;
MPRINT(EM_DIAGRAM):   if missing( HighBP ) then do;
MPRINT(EM_DIAGRAM):   HighBP0 = .;
MPRINT(EM_DIAGRAM):   HighBP1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighBP , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   HighBP0 = 0.60662950455921;
MPRINT(EM_DIAGRAM):   HighBP1 = -0.60662950455921;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   HighBP0 = -0.82422298799588;
MPRINT(EM_DIAGRAM):   HighBP1 = 0.82422298799588;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   HighBP0 = .;
MPRINT(EM_DIAGRAM):   HighBP1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HighChol ;
MPRINT(EM_DIAGRAM):   drop HighChol0 HighChol1 ;
MPRINT(EM_DIAGRAM):   if missing( HighChol ) then do;
MPRINT(EM_DIAGRAM):   HighChol0 = .;
MPRINT(EM_DIAGRAM):   HighChol1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HighChol , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   HighChol0 = 0.60519767235518;
MPRINT(EM_DIAGRAM):   HighChol1 = -0.60519767235518;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   HighChol0 = -0.82617301039587;
MPRINT(EM_DIAGRAM):   HighChol1 = 0.82617301039587;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   HighChol0 = .;
MPRINT(EM_DIAGRAM):   HighChol1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HvyAlcoholConsump ;
MPRINT(EM_DIAGRAM):   drop HvyAlcoholConsump0 HvyAlcoholConsump1 ;
MPRINT(EM_DIAGRAM):   if missing( HvyAlcoholConsump ) then do;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump0 = .;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( HvyAlcoholConsump , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump0 = 0.17357304228491;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump1 = -0.17357304228491;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump0 = -2.88062003334322;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump1 = 2.88062003334322;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump0 = .;
MPRINT(EM_DIAGRAM):   HvyAlcoholConsump1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for NoDocbcCost ;
MPRINT(EM_DIAGRAM):   drop NoDocbcCost0 NoDocbcCost1 ;
MPRINT(EM_DIAGRAM):   if missing( NoDocbcCost ) then do;
MPRINT(EM_DIAGRAM):   NoDocbcCost0 = .;
MPRINT(EM_DIAGRAM):   NoDocbcCost1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( NoDocbcCost , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   NoDocbcCost0 = 0.21203136396168;
MPRINT(EM_DIAGRAM):   NoDocbcCost1 = -0.21203136396168;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   NoDocbcCost0 = -2.35813218154186;
MPRINT(EM_DIAGRAM):   NoDocbcCost1 = 2.35813218154186;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   NoDocbcCost0 = .;
MPRINT(EM_DIAGRAM):   NoDocbcCost1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysActivity ;
MPRINT(EM_DIAGRAM):   drop PhysActivity0 PhysActivity1 ;
MPRINT(EM_DIAGRAM):   if missing( PhysActivity ) then do;
MPRINT(EM_DIAGRAM):   PhysActivity0 = .;
MPRINT(EM_DIAGRAM):   PhysActivity1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysActivity , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   PhysActivity0 = -0.39540760740426;
MPRINT(EM_DIAGRAM):   PhysActivity1 = 0.39540760740426;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   PhysActivity0 = 1.26451280524572;
MPRINT(EM_DIAGRAM):   PhysActivity1 = -1.26451280524572;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   PhysActivity0 = .;
MPRINT(EM_DIAGRAM):   PhysActivity1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Sex ;
MPRINT(EM_DIAGRAM):   drop Sex0 Sex1 ;
MPRINT(EM_DIAGRAM):   if missing( Sex ) then do;
MPRINT(EM_DIAGRAM):   Sex0 = .;
MPRINT(EM_DIAGRAM):   Sex1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Sex , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   Sex0 = 0.63067022233455;
MPRINT(EM_DIAGRAM):   Sex1 = -0.63067022233455;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   Sex0 = -0.79280417109819;
MPRINT(EM_DIAGRAM):   Sex1 = 0.79280417109819;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Sex0 = .;
MPRINT(EM_DIAGRAM):   Sex1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Smoker ;
MPRINT(EM_DIAGRAM):   drop Smoker0 Smoker1 ;
MPRINT(EM_DIAGRAM):   if missing( Smoker ) then do;
MPRINT(EM_DIAGRAM):   Smoker0 = .;
MPRINT(EM_DIAGRAM):   Smoker1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Smoker , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   Smoker0 = 0.63114466603367;
MPRINT(EM_DIAGRAM):   Smoker1 = -0.63114466603367;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   Smoker0 = -0.7922082048105;
MPRINT(EM_DIAGRAM):   Smoker1 = 0.7922082048105;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Smoker0 = .;
MPRINT(EM_DIAGRAM):   Smoker1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Stroke ;
MPRINT(EM_DIAGRAM):   drop Stroke0 Stroke1 ;
MPRINT(EM_DIAGRAM):   if missing( Stroke ) then do;
MPRINT(EM_DIAGRAM):   Stroke0 = .;
MPRINT(EM_DIAGRAM):   Stroke1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Stroke , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   Stroke0 = 0.14489743273379;
MPRINT(EM_DIAGRAM):   Stroke1 = -0.14489743273378;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   Stroke0 = -3.45070284145663;
MPRINT(EM_DIAGRAM):   Stroke1 = 3.45070284145663;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Stroke0 = .;
MPRINT(EM_DIAGRAM):   Stroke1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Veggies ;
MPRINT(EM_DIAGRAM):   drop Veggies0 Veggies1 ;
MPRINT(EM_DIAGRAM):   if missing( Veggies ) then do;
MPRINT(EM_DIAGRAM):   Veggies0 = .;
MPRINT(EM_DIAGRAM):   Veggies1 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Veggies , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   Veggies0 = -0.33925255015504;
MPRINT(EM_DIAGRAM):   Veggies1 = 0.33925255015504;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   Veggies0 = 1.47382232683513;
MPRINT(EM_DIAGRAM):   Veggies1 = -1.47382232683513;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Veggies0 = .;
MPRINT(EM_DIAGRAM):   Veggies1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   drop T_Education ;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   T_Education = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Education , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   T_Education = -1.81032358932347;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   T_Education = -1.71362805228958;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   T_Education = -1.19282563753062;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   T_Education = -0.23450021957985;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   T_Education = 1.05502095498466;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   T_Education = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GenHlth ;
MPRINT(EM_DIAGRAM):   drop T_GenHlth ;
MPRINT(EM_DIAGRAM):   if missing( GenHlth ) then do;
MPRINT(EM_DIAGRAM):   T_GenHlth = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GenHlth , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   T_GenHlth = -1.4767070194314;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   T_GenHlth = -0.50697937184535;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   T_GenHlth = 0.67028858758655;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   T_GenHlth = 1.42327294300141;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   T_GenHlth = 1.72271200300089;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   T_GenHlth = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Income ;
MPRINT(EM_DIAGRAM):   drop T_Income ;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   T_Income = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( Income , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   T_Income = -1.71654961353095;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   T_Income = -1.56939520629206;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   T_Income = -1.37834052561171;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   T_Income = -1.12755068098766;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   T_Income = -0.8060973677071;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   T_Income = -0.36823854405569;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   T_Income = 0.19328494694827;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   T_Income = 1.14079558485619;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   T_Income = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for MentHlth ;
MPRINT(EM_DIAGRAM):   drop T_MentHlth ;
MPRINT(EM_DIAGRAM):   if missing( MentHlth ) then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( MentHlth , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = -0.64642594988229;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.08940309912206;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 2.0307349089589;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.46046162551661;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 0.90779440570373;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.26081745228278;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.66859965091116;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.79355117273767;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.35391488142563;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.87030502183819;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.57788118743921;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.73878343236461;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.91314358056186;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.54375977729304;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.60909115584375;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.72520529256066;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.92738302129238;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.89955685243419;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.93136800349923;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.84186049367204;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.61517168903869;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.83945576302997;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.92402498671721;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.90191864145764;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.84062377505612;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.9230287411655;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.72885533014237;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.9027345322112;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.72158101995012;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.90333571487172;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   T_MentHlth = 1.84278803263398;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   T_MentHlth = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PhysHlth ;
MPRINT(EM_DIAGRAM):   drop T_PhysHlth ;
MPRINT(EM_DIAGRAM):   if missing( PhysHlth ) then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( PhysHlth , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = -0.73130504087574;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '30' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.86306848927175;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 0.84738417559862;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 0.63962005317307;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.03135467225463;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.22952668497363;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.44021226213214;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.57306541611342;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.13397888490182;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.34557335908836;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '20' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.64186567507459;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '14' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.51486354571126;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.29966594402074;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '25' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.69046732061816;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.38749623450632;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '21' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.67194042851999;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.48915474406123;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '28' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.70734683685303;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '29' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.71297875236601;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.39522997439662;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '18' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.61545085519742;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '16' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.61191264890973;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '27' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.7025588971518;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '17' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.61351133386082;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '24' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.67964982295418;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '22' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.67765349555333;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '26' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.701252357674;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.49412933225929;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.48425319223149;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '23' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.67863542894968;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '19' then do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = 1.61680608558743;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   T_PhysHlth = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS3vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS3vads [4] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 4;
MPRINT(EM_DIAGRAM):   CLUS3vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Age ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_Age - -0.17073687768612 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_Age - -0.54886255831279 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_Age - -0.37557884096061 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_Age - 0.56908428667211 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_BMI ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_BMI - -0.17320313019188 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_BMI - -0.13454865662491 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_BMI - 0.18899468881167 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_BMI - 0.33368216796073 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( AnyHealthcare0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( AnyHealthcare0 - -0.15929186780222 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( AnyHealthcare0 - 1.47335052719 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( AnyHealthcare0 - 0.48333921173056 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( AnyHealthcare0 - -0.11640393798596 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( AnyHealthcare1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( AnyHealthcare1 - 0.15929186780222 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( AnyHealthcare1 - -1.47335052719 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( AnyHealthcare1 - -0.48333921173056 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( AnyHealthcare1 - 0.11640393798596 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( CholCheck0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( CholCheck0 - -0.1397881757199 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( CholCheck0 - 2.14569015326873 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( CholCheck0 - -0.11658637305622 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( CholCheck0 - -0.13766609385084 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( CholCheck1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( CholCheck1 - 0.1397881757199 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( CholCheck1 - -2.14569015326873 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( CholCheck1 - 0.11658637305622 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( CholCheck1 - 0.13766609385084 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( DiffWalk0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( DiffWalk0 - 0.28101671004593 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( DiffWalk0 - 0.1964359948253 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( DiffWalk0 - -0.29630543068391 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( DiffWalk0 - -0.53952518385211 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( DiffWalk1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( DiffWalk1 - -0.28101671004593 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( DiffWalk1 - -0.1964359948253 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( DiffWalk1 - 0.29630543068391 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( DiffWalk1 - 0.53952518385211 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Fruits0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Fruits0 - -0.07653937436545 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Fruits0 - 0.06960326719869 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Fruits0 - 0.09805164327887 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Fruits0 - 0.1160775046378 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Fruits1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Fruits1 - 0.07653937436545 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Fruits1 - -0.06960326719869 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Fruits1 - -0.09805164327887 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Fruits1 - -0.1160775046378 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( HeartDiseaseorAttack0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HeartDiseaseorAttack0 - 0.17794907637385 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HeartDiseaseorAttack0 - 0.17235567247688 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HeartDiseaseorAttack0 - -0.08421878765838 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HeartDiseaseorAttack0 - -0.37975142392051 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( HeartDiseaseorAttack1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HeartDiseaseorAttack1 - -0.17794907637385 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HeartDiseaseorAttack1 - -0.17235567247688 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HeartDiseaseorAttack1 - 0.08421878765838 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HeartDiseaseorAttack1 - 0.37975142392051 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( HighBP0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HighBP0 - 0.1984858679318 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HighBP0 - 0.31727165347489 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HighBP0 - -0.06201508684588 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HighBP0 - -0.4587894377384 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( HighBP1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HighBP1 - -0.1984858679318 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HighBP1 - -0.31727165347489 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HighBP1 - 0.06201508684588 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HighBP1 - 0.4587894377384 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( HighChol0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HighChol0 - 0.1337924512141 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HighChol0 - 0.29114895170325 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HighChol0 - -0.04998268671593 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HighChol0 - -0.32348925871518 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( HighChol1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HighChol1 - -0.1337924512141 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HighChol1 - -0.29114895170325 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HighChol1 - 0.04998268671593 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HighChol1 - 0.32348925871518 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( HvyAlcoholConsump0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HvyAlcoholConsump0 - -0.02090211276025 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HvyAlcoholConsump0 - -0.06331955000076 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HvyAlcoholConsump0 - -0.00529648129567 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HvyAlcoholConsump0 - 0.05786805737679 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( HvyAlcoholConsump1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HvyAlcoholConsump1 - 0.02090211276025 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HvyAlcoholConsump1 - 0.06331955000076 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HvyAlcoholConsump1 - 0.00529648129567 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HvyAlcoholConsump1 - -0.05786805737679 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( NoDocbcCost0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( NoDocbcCost0 - 0.20985406085303 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( NoDocbcCost0 - -0.0324997624154 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( NoDocbcCost0 - -2.35813218154295 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( NoDocbcCost0 - 0.2117745530562 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( NoDocbcCost1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( NoDocbcCost1 - -0.20985406085303 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( NoDocbcCost1 - 0.0324997624154 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( NoDocbcCost1 - 2.35813218154295 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( NoDocbcCost1 - -0.2117745530562 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( PhysActivity0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( PhysActivity0 - -0.19560119858489 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( PhysActivity0 - 0.00565072632846 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( PhysActivity0 - 0.14703913838663 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( PhysActivity0 - 0.3612190703559 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( PhysActivity1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( PhysActivity1 - 0.19560119858489 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( PhysActivity1 - -0.00565072632846 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( PhysActivity1 - -0.14703913838663 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( PhysActivity1 - -0.3612190703559 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Sex0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Sex0 - -0.01646782778892 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Sex0 - -0.09940480875774 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Sex0 - 0.10765521533053 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Sex0 - 0.02595368951866 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Sex1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Sex1 - 0.01646782778892 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Sex1 - 0.09940480875774 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Sex1 - -0.10765521533053 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Sex1 - -0.02595368951866 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Smoker0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Smoker0 - 0.12342913357978 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Smoker0 - -0.00747319811924 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Smoker0 - -0.11509525302599 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Smoker0 - -0.22108725586349 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Smoker1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Smoker1 - -0.12342913357978 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Smoker1 - 0.00747319811924 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Smoker1 - 0.11509525302599 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Smoker1 - 0.22108725586349 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Stroke0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Stroke0 - 0.12040461702293 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Stroke0 - 0.10653857312591 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Stroke0 - -0.09155009349719 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Stroke0 - -0.24547791963416 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Stroke1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Stroke1 - -0.12040461702293 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Stroke1 - -0.10653857312591 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Stroke1 - 0.09155009349719 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Stroke1 - 0.24547791963416 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Veggies0 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Veggies0 - -0.10664597000402 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Veggies0 - 0.03032081781974 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Veggies0 - 0.08039630112162 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Veggies0 - 0.19108789719126 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Veggies1 ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Veggies1 - 0.10664597000402 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Veggies1 - -0.03032081781974 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Veggies1 - -0.08039630112162 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Veggies1 - -0.19108789719126 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( T_Education ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_Education - 0.31576135265849 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_Education - -0.17069319486655 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_Education - -0.33445003742183 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_Education - -0.52255272491837 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_GenHlth ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_GenHlth - -0.44868687869402 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_GenHlth - -0.20808827020188 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_GenHlth - 0.54915773785372 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_GenHlth - 0.81845825453329 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Income ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_Income - 0.41051066481661 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_Income - -0.21797853361429 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_Income - -0.65959569897287 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_Income - -0.61953926009677 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_MentHlth ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_MentHlth - -0.17899400019841 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_MentHlth - 0.00147572456578 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_MentHlth - 0.61267346099112 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_MentHlth - 0.20233406120762 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PhysHlth ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_PhysHlth - -0.3410116964186 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_PhysHlth - -0.2245141060454 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_PhysHlth - 0.5362193726298 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_PhysHlth - 0.60409753755895 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 21 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 8.3559825725387E-11 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 4;
MPRINT(EM_DIAGRAM):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (21 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS3vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
46276      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS2.CLUS3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.37 seconds
      cpu time            0.28 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.39 seconds
      cpu time            0.29 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
46277      quit;
46278      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
46279      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46280      * Clus3: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Clus3: Computing metadata for TRAIN data;
46281      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS2.CLUS3_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.28 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Clus3_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Clus3_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Clus3_TRAIN out=WORK.M21P50EQ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21P50EQ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M21P50EQ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21P50EQ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M21P50EQ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M06TCCSY NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06TCCSY;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TCCSY;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2A2UMVL(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TCCSY;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06TCCSY;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TCCSY;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06TCCSY;
MPRINT(EMADVISECOLUMNS):   set WORK.M06TCCSY;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Clus3";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   retain _segFlag_ 0;
MPRINT(EM_DIAGRAM):   drop _segFlag_;
MPRINT(EM_DIAGRAM):   if upcase(name) = '_SEGMENT_' then do;
MPRINT(EM_DIAGRAM):   _segFlag_ = 1;
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Variable';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = '_SEGMENT_LABEL_' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Description';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = 'DISTANCE' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = '_IMPUTE_' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if ^_segFlag_ and _eof_ then do;
MPRINT(EM_DIAGRAM):   type = 'N';
MPRINT(EM_DIAGRAM):   index = 'N';
MPRINT(EM_DIAGRAM):   indexType = 'NONE';
MPRINT(EM_DIAGRAM):   format = '';
MPRINT(EM_DIAGRAM):   informat = '';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Variable';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_LABEL_';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Description';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = 'Distance';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   label = 'Distance to Cluster Seed';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = '_Impute_';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   label = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS2.CLUS3_TRAIN.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.25 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "March 09, 2024" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:58" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                March 09, 2024
Time:                15:47:58
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0G832Y4 "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0G832Y4 new;
MPRINT(EM_DIAGRAM):   run;
46691      data WORK.M1O77DCH;
MPRINT(EM_DIAGRAM):    data WORK.M1O77DCH;
46692      set WORK.M1O77DCH;
MPRINT(EM_DIAGRAM):   set WORK.M1O77DCH;
46693      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
46694      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M1O77DCH.
NOTE: The data set WORK.M1O77DCH has 21 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
46695      data WORK.M1O77DCH;
MPRINT(EM_DIAGRAM):    data WORK.M1O77DCH;
46696      set WORK.M1O77DCH end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M1O77DCH end=_eof_ nobs=_nobs_;
46697      output;
MPRINT(EM_DIAGRAM):   output;
46698      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
46699      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
46700      ROLE = 'TARGET';
MPRINT(EM_DIAGRAM):   ROLE = 'TARGET';
46701      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
46702      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
46703      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
46704      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
46705      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
46706      USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
46707      output;
MPRINT(EM_DIAGRAM):   output;
46708      end;
MPRINT(EM_DIAGRAM):   end;
46709      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M1O77DCH.
NOTE: The data set WORK.M1O77DCH has 22 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
46710      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46711      * Clus3: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Clus3: Create decision matrix;
46712      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46713      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46714      * Clus3: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: Tree Variables Macro ;
46715      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46716      %macro EM_TREEVARS;
46717          Age AnyHealthcare BMI CholCheck DiffWalk Education Fruits GenHlth
46718         HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump Income MentHlth
46719         NoDocbcCost PhysActivity PhysHlth Sex Smoker Stroke Veggies
46720      %mend EM_TREEVARS;
46721      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46722      * Clus3: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: Tree Targets Macro ;
46723      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46724      %macro EM_TREETARGETS;
46725          _SEGMENT_
46726      %mend EM_TREETARGETS;
46727      data EMWS2.EM_Clus3 / view=EMWS2.EM_Clus3;
MPRINT(EM_DIAGRAM):   data EMWS2.EM_Clus3 / view=EMWS2.EM_Clus3;
46728      set
46728    ! EMWS2.Clus3_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_TRAIN(keep
MPRINT(EM_DIAGRAM):  =Age AnyHealthcare BMI CholCheck DiffWalk Education Fruits GenHlth HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump Income MentHlth NoDocbcCost PhysActivity PhysHlth Sex Smoker Stroke Veggies _SEGMENT_);
46729      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS2.EM_CLUS3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.CLUS3_TRAIN.VIEW used (Total process time):
      real time           0.36 seconds
      cpu time            0.31 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.38 seconds
      cpu time            0.34 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus3: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46730      *------------------------------------------------------------* ;
46731      * Clus3: Interval Inputs Macro ;
46732      *------------------------------------------------------------* ;
46733      %macro INTINPUTS;
46734          Age BMI
46735      %mend INTINPUTS;
46736      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46737      * Clus3: Binary and Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: Binary and Nominal Inputs Macro ;
46738      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46739      %macro NOMINPUTS;
46740          AnyHealthcare CholCheck DiffWalk Fruits HeartDiseaseorAttack HighBP HighChol
46741         HvyAlcoholConsump NoDocbcCost PhysActivity Sex Smoker Stroke Veggies
46742      %mend NOMINPUTS;
46743      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46744      * Clus3: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: Ordinal Inputs Macro ;
46745      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46746      %macro ORDINPUTS;
46747          Education GenHlth Income MentHlth PhysHlth
46748      %mend ORDINPUTS;
46749      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46750      * Clus3: Run ARBOR procedure;
MPRINT(EM_DIAGRAM):   * Clus3: Run ARBOR procedure;
46751      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
46752      proc arbor data=EMWS2.EM_Clus3
46753      MAXSURRS=5
46754      ;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS2.EM_Clus3 MAXSURRS=5 ;
46755      ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
46756      input %INTINPUTS
MPRINT(INTINPUTS):   Age BMI
46757      / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
MPRINT(EM_DIAGRAM):   input
46758      input %NOMINPUTS
MPRINT(NOMINPUTS):   AnyHealthcare CholCheck DiffWalk Fruits HeartDiseaseorAttack HighBP HighChol HvyAlcoholConsump NoDocbcCost PhysActivity Sex Smoker Stroke Veggies
46759      / level=nominal;
MPRINT(EM_DIAGRAM):   / level=nominal;
MPRINT(EM_DIAGRAM):   input
46760      input %ORDINPUTS
MPRINT(ORDINPUTS):   Education GenHlth Income MentHlth PhysHlth
46761      / level=ordinal;
MPRINT(EM_DIAGRAM):   / level=ordinal;
46762      target _SEGMENT_ / level=NOMINAL
46763      Criterion=PROBCHISQ
46764      ;
MPRINT(EM_DIAGRAM):   target _SEGMENT_ / level=NOMINAL Criterion=PROBCHISQ ;
46765      ;
MPRINT(EM_DIAGRAM):   ;
46766      Performance DISK
46767      ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
46768      MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: 1366994 kilobytes of physical memory.
NOTE: Will use 247875 out of 247875 training cases.
NOTE: Using memory pool with 526268416 bytes.
NOTE: Passed training data 18 times.
NOTE: Training used 21142944 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 25 nodes and 13 leaves.
NOTE: Created macro variable NLEAVES equal to 13.
46769      save
46770      MODEL=EMWS2.Clus3_PLOTDS
46771      SEQUENCE=EMWS2.Clus3_OUTSEQ
46772      IMPORTANCE=EMWS2.Clus3_OUTIMPORT
46773      NODESTAT=EMWS2.Clus3_OUTNODES
46774      SUMMARY=WORK.OUTSUMMARY_TREE_3O09_WZ
46775      STATSBYNODE=WORK.OUTSTATS_TREE_3O09_WZ
46776      Pathlistnonmissing = WORK.OUTPATH_TREE_3O09_WZ
46777      Rules = WORK.OUTRULES_TREE_3O09_WZ
46778      ;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS2.Clus3_PLOTDS SEQUENCE=EMWS2.Clus3_OUTSEQ IMPORTANCE=EMWS2.Clus3_OUTIMPORT NODESTAT=EMWS2.Clus3_OUTNODES SUMMARY=WORK.OUTSUMMARY_TREE_3O09_WZ STATSBYNODE=WORK.OUTSTATS_TREE_3O09_WZ Pathlistnonmissing =
WORK.OUTPATH_TREE_3O09_WZ Rules = WORK.OUTRULES_TREE_3O09_WZ ;
NOTE: The data set EMWS2.CLUS3_OUTIMPORT has 21 observations and 5 variables.
NOTE: The data set EMWS2.CLUS3_PLOTDS has 2223 observations and 4 variables.
NOTE: The data set EMWS2.CLUS3_OUTNODES has 25 observations and 24 variables.
NOTE: The data set WORK.OUTPATH_TREE_3O09_WZ has 106 observations and 7 variables.
NOTE: The data set WORK.OUTRULES_TREE_3O09_WZ has 435 observations and 6 variables.
NOTE: The data set EMWS2.CLUS3_OUTSEQ has 26 observations and 11 variables.
NOTE: The data set WORK.OUTSTATS_TREE_3O09_WZ has 150 observations and 5 variables.
NOTE: The data set WORK.OUTSUMMARY_TREE_3O09_WZ has 20 observations and 7 variables.
46779      run;
MPRINT(EM_DIAGRAM):   run;
 
46780      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 250716 observations read from the data set ZETADATA.ZETADIABITIES_TRAIN.
NOTE: There were 250716 observations read from the data set EMWS2.IDS_DATA.
NOTE: There were 247875 observations read from the data set EMWS2.FILTER_TRAIN.
NOTE: There were 247875 observations read from the data set EMWS2.VARSEL_TRAIN.
NOTE: View EMWS2.EM_CLUS3.VIEW used (Total process time):
      real time           30.50 seconds
      cpu time            29.67 seconds
 
NOTE: There were 247875 observations read from the data set EMWS2.CLUS3_TRAIN.
NOTE: There were 247875 observations read from the data set EMWS2.EM_CLUS3.
NOTE: The data set WORK._NAMEDAT has 4 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           30.53 seconds
      cpu time            29.70 seconds
 
 
46781      data EMWS2.Clus3_OUTIMPORT;
MPRINT(EM_DIAGRAM):    data EMWS2.Clus3_OUTIMPORT;
46782      set EMWS2.Clus3_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_OUTIMPORT;
46783      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
46784         "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
46785      ;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" ;
46786      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS2.CLUS3_OUTIMPORT.
NOTE: The data set EMWS2.CLUS3_OUTIMPORT has 21 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.07 seconds
 
 
46787      filename x "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
46788      data temp;
MPRINT(EM_DIAGRAM):    data temp;
46789      length varname $20;
MPRINT(EM_DIAGRAM):   length varname $20;
46790      retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
46791      set WORK.OUTPATH_TREE_3O09_WZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_3O09_WZ;
46792      if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
46793      else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
46794      output;
MPRINT(EM_DIAGRAM):   output;
46795      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 106 observations read from the data set WORK.OUTPATH_TREE_3O09_WZ.
NOTE: The data set WORK.TEMP has 106 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46796      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
46797      by node;
MPRINT(EM_DIAGRAM):   by node;
46798      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 106 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 106 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
46799      proc sort data=EMWS2.Clus3_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_OUTNODES out=outnodes;
46800      by node;
MPRINT(EM_DIAGRAM):   by node;
46801      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
46802      data temp;
MPRINT(EM_DIAGRAM):   data temp;
46803      merge temp(in=_a) outnodes(keep= node
46804      NPRIORS
46805      P__SEGMENT_4
46806      P__SEGMENT_2
46807      P__SEGMENT_3
46808      P__SEGMENT_1
46809      );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P__SEGMENT_4 P__SEGMENT_2 P__SEGMENT_3 P__SEGMENT_1 );
46810      by node;
MPRINT(EM_DIAGRAM):   by node;
46811      if _a;
MPRINT(EM_DIAGRAM):   if _a;
46812      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 106 observations read from the data set WORK.TEMP.
NOTE: There were 25 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 106 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
46813      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
46814      by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
46815      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 106 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 106 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
46816      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
46817      file x;
MPRINT(EM_DIAGRAM):   file x;
46818      set temp;
MPRINT(EM_DIAGRAM):   set temp;
46819      by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
46820      retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
46821      length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
46822      if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
46823      origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
46824      oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
46825      end;
MPRINT(EM_DIAGRAM):   end;
46826      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
46827      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
46828      put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
46829      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
46830      end;
MPRINT(EM_DIAGRAM):   end;
46831      if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
46832      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
46833      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
46834      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
46835      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
46836      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
46837      end;
MPRINT(EM_DIAGRAM):   end;
46838      else do;
MPRINT(EM_DIAGRAM):   else do;
46839      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
46840      end;
MPRINT(EM_DIAGRAM):   end;
46841      end;
MPRINT(EM_DIAGRAM):   end;
46842      end;
MPRINT(EM_DIAGRAM):   end;
46843      else do;
MPRINT(EM_DIAGRAM):   else do;
46844      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
46845      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
46846      end;
MPRINT(EM_DIAGRAM):   end;
46847      else do;
MPRINT(EM_DIAGRAM):   else do;
46848      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
46849      end;
MPRINT(EM_DIAGRAM):   end;
46850      end;
MPRINT(EM_DIAGRAM):   end;
46851      end;
MPRINT(EM_DIAGRAM):   end;
46852      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
46853      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
46854      string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
46855      end;
MPRINT(EM_DIAGRAM):   end;
46856      else do;
MPRINT(EM_DIAGRAM):   else do;
46857      string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
46858      end;
MPRINT(EM_DIAGRAM):   end;
46859      end;
MPRINT(EM_DIAGRAM):   end;
46860      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
46861      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
46862      string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
46863      end;
MPRINT(EM_DIAGRAM):   end;
46864      else do;
MPRINT(EM_DIAGRAM):   else do;
46865      string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
46866      end;
MPRINT(EM_DIAGRAM):   end;
46867      end;
MPRINT(EM_DIAGRAM):   end;
46868      else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
46869      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
46870      string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
46871      end;
MPRINT(EM_DIAGRAM):   end;
46872      else do;
MPRINT(EM_DIAGRAM):   else do;
46873      string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
46874      end;
MPRINT(EM_DIAGRAM):   end;
46875      end;
MPRINT(EM_DIAGRAM):   end;
46876      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
46877      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
46878      end;
MPRINT(EM_DIAGRAM):   end;
46879      else do;
MPRINT(EM_DIAGRAM):   else do;
46880      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
46881      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
46882      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
46883      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
46884      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
46885      end;
MPRINT(EM_DIAGRAM):   end;
46886      end;
MPRINT(EM_DIAGRAM):   end;
46887      else do;
MPRINT(EM_DIAGRAM):   else do;
46888      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
46889      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
46890      end;
MPRINT(EM_DIAGRAM):   end;
46891      end;
MPRINT(EM_DIAGRAM):   end;
46892      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
46893      string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
46894      end;
MPRINT(EM_DIAGRAM):   end;
46895      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
46896      end;
MPRINT(EM_DIAGRAM):   end;
46897      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
46898      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
46899      end;
MPRINT(EM_DIAGRAM):   end;
46900      if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
46901      if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
46902      if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
46903      string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
46904      end;
MPRINT(EM_DIAGRAM):   end;
46905      end;
MPRINT(EM_DIAGRAM):   end;
46906      put string;
MPRINT(EM_DIAGRAM):   put string;
46907      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
46908      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
46909      end;
MPRINT(EM_DIAGRAM):   end;
46910      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
46911      put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
46912      put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
46913      put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
46914      put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
46915      put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
46916      put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
46917      put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
46918      put " ";
MPRINT(EM_DIAGRAM):   put " ";
46919      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
46920      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
46921      end;
MPRINT(EM_DIAGRAM):   end;
46922      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      46836:67    46839:66    46883:108   46884:72
NOTE: The file X is:
      Filename=\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\Clus3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09Mar2024:15:48:30,
      Create Time=09Mar2024:15:48:30
 
NOTE: 203 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 106 observations read from the data set WORK.TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
46923      filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
46924      /* belowtext */
46925      data templabel;
MPRINT(EM_DIAGRAM):    data templabel;
46926      set WORK.OUTRULES_TREE_3O09_WZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3O09_WZ;
46927      if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
46928      rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
46929      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
46930      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 435 observations read from the data set WORK.OUTRULES_TREE_3O09_WZ.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
46931      data tempvar;
MPRINT(EM_DIAGRAM):   data tempvar;
46932      set WORK.OUTRULES_TREE_3O09_WZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3O09_WZ;
46933      if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
46934      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
46935      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 435 observations read from the data set WORK.OUTRULES_TREE_3O09_WZ.
NOTE: The data set WORK.TEMPVAR has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46936      proc sort data=templabel;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
46937      by node;
MPRINT(EM_DIAGRAM):   by node;
46938      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46939      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
46940      by node;
MPRINT(EM_DIAGRAM):   by node;
46941      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
46942      data tempbelow;
MPRINT(EM_DIAGRAM):   data tempbelow;
46943      merge templabel tempvar;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
46944      by node;
MPRINT(EM_DIAGRAM):   by node;
46945      if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
46946      keep node belowtext;
MPRINT(EM_DIAGRAM):   keep node belowtext;
46947      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.TEMPLABEL.
NOTE: There were 12 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPBELOW has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.28 seconds
      cpu time            0.01 seconds
 
 
46948      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
46949      by node;
MPRINT(EM_DIAGRAM):   by node;
46950      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TEMPBELOW has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
46951      /* abovetext */
46952      data tempoutrules;
MPRINT(EM_DIAGRAM):   data tempoutrules;
46953      set WORK.OUTRULES_TREE_3O09_WZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3O09_WZ;
46954      if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
46955      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 435 observations read from the data set WORK.OUTRULES_TREE_3O09_WZ.
NOTE: The data set WORK.TEMPOUTRULES has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
46956      proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
46957      by node numeric_value;
MPRINT(EM_DIAGRAM):   by node numeric_value;
46958      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 23 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46959      data tempabove;
MPRINT(EM_DIAGRAM):   data tempabove;
46960      set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
46961      by parent numeric_value;
MPRINT(EM_DIAGRAM):   by parent numeric_value;
46962      retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
46963      *length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   *length abovetext tempstring origchar $45;
46964      length abovetext $256;
MPRINT(EM_DIAGRAM):   length abovetext $256;
46965      length tempstring origchar $64;
MPRINT(EM_DIAGRAM):   length tempstring origchar $64;
46966      if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
46967      if first.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
46968      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
46969      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
46970      abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
46971      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
46972      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
46973      output;
MPRINT(EM_DIAGRAM):   output;
46974      end;
MPRINT(EM_DIAGRAM):   end;
46975      else do;
MPRINT(EM_DIAGRAM):   else do;
46976      abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
46977      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
46978      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
46979      output;
MPRINT(EM_DIAGRAM):   output;
46980      end;
MPRINT(EM_DIAGRAM):   end;
46981      if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
46982      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
46983      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
46984      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
46985      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
46986      output;
MPRINT(EM_DIAGRAM):   output;
46987      end;
MPRINT(EM_DIAGRAM):   end;
46988      else do;
MPRINT(EM_DIAGRAM):   else do;
46989      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
46990      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
46991      output;
MPRINT(EM_DIAGRAM):   output;
46992      end;
MPRINT(EM_DIAGRAM):   end;
46993      end;
MPRINT(EM_DIAGRAM):   end;
46994      end;
MPRINT(EM_DIAGRAM):   end;
46995      else if last.parent then do;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
46996      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
46997      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
46998      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
46999      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
47000      end;
MPRINT(EM_DIAGRAM):   end;
47001      else do;
MPRINT(EM_DIAGRAM):   else do;
47002      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
47003      end;
MPRINT(EM_DIAGRAM):   end;
47004      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
47005      output;
MPRINT(EM_DIAGRAM):   output;
47006      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
47007      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
47008      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
47009      end;
MPRINT(EM_DIAGRAM):   end;
47010      else do;
MPRINT(EM_DIAGRAM):   else do;
47011      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
47012      end;
MPRINT(EM_DIAGRAM):   end;
47013      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
47014      output;
MPRINT(EM_DIAGRAM):   output;
47015      end;
MPRINT(EM_DIAGRAM):   end;
47016      else do;
MPRINT(EM_DIAGRAM):   else do;
47017      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
47018      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
47019      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
47020      end;
MPRINT(EM_DIAGRAM):   end;
47021      else do;
MPRINT(EM_DIAGRAM):   else do;
47022      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
47023      end;
MPRINT(EM_DIAGRAM):   end;
47024      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
47025      output;
MPRINT(EM_DIAGRAM):   output;
47026      end;
MPRINT(EM_DIAGRAM):   end;
47027      end;
MPRINT(EM_DIAGRAM):   end;
47028      else do;
MPRINT(EM_DIAGRAM):   else do;
47029      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
47030      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
47031      numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
47032      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
47033      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
47034      end;
MPRINT(EM_DIAGRAM):   end;
47035      else do;
MPRINT(EM_DIAGRAM):   else do;
47036      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
47037      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
47038      end;
MPRINT(EM_DIAGRAM):   end;
47039      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
47040      output;
MPRINT(EM_DIAGRAM):   output;
47041      end;
MPRINT(EM_DIAGRAM):   end;
47042      else do;
MPRINT(EM_DIAGRAM):   else do;
47043      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
47044      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
47045      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
47046      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
47047      end;
MPRINT(EM_DIAGRAM):   end;
47048      else do;
MPRINT(EM_DIAGRAM):   else do;
47049      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
47050      origval = character_value;
MPRINT(EM_DIAGRAM):   origval = character_value;
47051      end;
MPRINT(EM_DIAGRAM):   end;
47052      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
47053      output;
MPRINT(EM_DIAGRAM):   output;
47054      end;
MPRINT(EM_DIAGRAM):   end;
47055      end;
MPRINT(EM_DIAGRAM):   end;
47056      end;
MPRINT(EM_DIAGRAM):   end;
47057      else do;
MPRINT(EM_DIAGRAM):   else do;
47058      if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
47059      flag = 0;
MPRINT(EM_DIAGRAM):   flag = 0;
47060      abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
47061      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
47062      if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
47063      output;
MPRINT(EM_DIAGRAM):   output;
47064      end;
MPRINT(EM_DIAGRAM):   end;
47065      end;
MPRINT(EM_DIAGRAM):   end;
47066      else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
47067      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
47068      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
47069      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
47070      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
47071      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
47072      end;
MPRINT(EM_DIAGRAM):   end;
47073      else do;
MPRINT(EM_DIAGRAM):   else do;
47074      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
47075      flag = 1;
MPRINT(EM_DIAGRAM):   flag = 1;
47076      end;
MPRINT(EM_DIAGRAM):   end;
47077      end;
MPRINT(EM_DIAGRAM):   end;
47078      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
47079      output;
MPRINT(EM_DIAGRAM):   output;
47080      end;
MPRINT(EM_DIAGRAM):   end;
47081      else do;
MPRINT(EM_DIAGRAM):   else do;
47082      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
47083      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
47084      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
47085      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
47086      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
47087      end;
MPRINT(EM_DIAGRAM):   end;
47088      else do;
MPRINT(EM_DIAGRAM):   else do;
47089      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
47090      flag=1;
MPRINT(EM_DIAGRAM):   flag=1;
47091      end;
MPRINT(EM_DIAGRAM):   end;
47092      end;
MPRINT(EM_DIAGRAM):   end;
47093      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
47094      end;
MPRINT(EM_DIAGRAM):   end;
47095      end;
MPRINT(EM_DIAGRAM):   end;
47096      keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
47097      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      46970:25   46985:26   46999:24   46999:47   47008:26   47019:26   47032:24   47032:47   47045:26
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      47050:11
NOTE: There were 23 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPABOVE has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47098      /* MIssing value to abovetext */
47099      data tempmissing;
MPRINT(EM_DIAGRAM):   data tempmissing;
47100      set WORK.OUTRULES_TREE_3O09_WZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3O09_WZ;
47101      if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
47102      rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
47103      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 435 observations read from the data set WORK.OUTRULES_TREE_3O09_WZ.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47104      proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
47105      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
47106      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.TEMPABOVE.
NOTE: The data set WORK.TEMPABOVE has 24 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
47107      proc sort data=EMWS2.Clus3_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_OUTNODES out=tempoutnodes;
47108      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
47109      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
47110      proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
47111      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
47112      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47113      data WORK.Clus3_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus3_outnodes;
47114      merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
47115      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
47116      length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
47117      retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
47118      if _a then do;
MPRINT(EM_DIAGRAM):   if _a then do;
47119      if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
47120      abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Or Missing";
47121      end;
MPRINT(EM_DIAGRAM):   end;
47122      else do;
MPRINT(EM_DIAGRAM):   else do;
47123      abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext = " Missing Values Only";
47124      end;
MPRINT(EM_DIAGRAM):   end;
47125      end;
MPRINT(EM_DIAGRAM):   end;
47126      if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Non-Missing Values";
47127      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
47128      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
47129      validtotal=VN;
MPRINT(EM_DIAGRAM):   validtotal=VN;
47130      end;
MPRINT(EM_DIAGRAM):   end;
47131      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Train Total";
47132      drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
47133      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VN is uninitialized.
NOTE: There were 24 observations read from the data set WORK.TEMPABOVE.
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.CLUS3_OUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
47134      proc sort data=WORK.Clus3_outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus3_outnodes;
47135      by node;
MPRINT(EM_DIAGRAM):   by node;
47136      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.CLUS3_OUTNODES.
NOTE: The data set WORK.CLUS3_OUTNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47137      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
47138      by node;
MPRINT(EM_DIAGRAM):   by node;
47139      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47140      data WORK.Clus3_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus3_outnodes;
47141      merge WORK.Clus3_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   merge WORK.Clus3_outnodes tempbelow;
47142      by node;
MPRINT(EM_DIAGRAM):   by node;
47143      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.CLUS3_OUTNODES.
NOTE: There were 12 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.CLUS3_OUTNODES has 25 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
NOTE: There were 250716 observations read from the data set ZETADATA.ZETADIABITIES_TRAIN.
NOTE: There were 250716 observations read from the data set EMWS2.IDS_DATA.
NOTE: There were 247875 observations read from the data set EMWS2.FILTER_TRAIN.
NOTE: There were 247875 observations read from the data set EMWS2.VARSEL_TRAIN.
NOTE: View EMWS2.EM_CLUS3.VIEW used (Total process time):
      real time           2.25 seconds
      cpu time            2.21 seconds
 
NOTE: There were 247875 observations read from the data set EMWS2.CLUS3_TRAIN.
47144      data tempoutstats;
MPRINT(EM_DIAGRAM):    data tempoutstats;
47145      set WORK.OUTSTATS_TREE_3O09_WZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_3O09_WZ;
47146      length tarlevel $8;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
47147      tarlevel ="NOMINAL";
MPRINT(EM_DIAGRAM):   tarlevel ="NOMINAL";
47148      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 150 observations read from the data set WORK.OUTSTATS_TREE_3O09_WZ.
NOTE: The data set WORK.TEMPOUTSTATS has 150 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.04 seconds
 
 
47149      data EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS2.Clus3_TREE_PLOT;
47150      length NODETEXT TEXTALL $800 N NODECOLOR 8;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N NODECOLOR 8;
47151      set WORK.Clus3_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus3_outnodes;
47152      label parent = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentID_vlabel, noquote))" depth = "%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, noquote))" belowtext= "%sysfunc(sasmsg(sashelp.dmine, rpt_belowtext_vlabel, noquote))" abovetext =
47153         "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))" linkwidth = "%sysfunc(sasmsg(sashelp.dmine, rpt_linkwidth_vlabel, noquote))" nodetext = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodetext_vlabel, noquote))" textall =
47154         "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))" N = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainn_vlabel, noquote))" nodecolor = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))" node =
47155         "%sysfunc(sasmsg(sashelp.dmine, rpt_node_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label parent = "Parent Id" depth = "Depth" belowtext= "Below Text" abovetext = "Above Text" linkwidth = "Link Width" nodetext = "Node Text" textall = "All Text" N = "Train: Number of Observations" nodecolor = "Node Color" node =
"Node";
47156      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
47157      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TEXTALL is uninitialized.
NOTE: Variable NODECOLOR is uninitialized.
NOTE: There were 25 observations read from the data set WORK.CLUS3_OUTNODES.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.06 seconds
 
 
47158      proc sort data=EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_TREE_PLOT;
47159      by node;
MPRINT(EM_DIAGRAM):   by node;
47160      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
 
 
47161      proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
47162      by node;
MPRINT(EM_DIAGRAM):   by node;
47163      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 150 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 150 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47164      data EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS2.Clus3_TREE_PLOT;
47165      merge EMWS2.Clus3_TREE_PLOT tempoutstats;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus3_TREE_PLOT tempoutstats;
47166      length text $800 _RASE_ P__SEGMENT_4 8;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ P__SEGMENT_4 8;
47167      retain P__SEGMENT_4 eventlevel;
MPRINT(EM_DIAGRAM):   retain P__SEGMENT_4 eventlevel;
47168      by node;
MPRINT(EM_DIAGRAM):   by node;
47169      if statname='N' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='N' then N=statvalue;
47170      if statname='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='NPRIORS' then N=statvalue;
47171      if statname='PREDICTION' then eventlevel=category;
MPRINT(EM_DIAGRAM):   if statname='PREDICTION' then eventlevel=category;
47172      _RASE_ = .;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
47173      if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
47174      if STATNAME = 'PROBABILITY' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PROBABILITY' then do;
47175      if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
47176      nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
47177      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
47178      P__SEGMENT_4 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   P__SEGMENT_4 = round(STATVALUE, .01);
47179      end;
MPRINT(EM_DIAGRAM):   end;
47180      else do;
MPRINT(EM_DIAGRAM):   else do;
47181      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
47182      end;
MPRINT(EM_DIAGRAM):   end;
47183      textall = strip(textall)||'0A'x||strip( text);
MPRINT(EM_DIAGRAM):   textall = strip(textall)||'0A'x||strip( text);
47184      end;
MPRINT(EM_DIAGRAM):   end;
47185      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
47186      nodetext = trim(nodetext)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||" Count:"|| put(N, 13.);
47187      textall = trim(textall)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||" Count:"|| put(N, 13.);
47188      output EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS2.Clus3_TREE_PLOT;
47189      end;
MPRINT(EM_DIAGRAM):   end;
47190      end;
MPRINT(EM_DIAGRAM):   end;
47191      else do;
MPRINT(EM_DIAGRAM):   else do;
47192      if statname='RASE' then _RASE_=statvalue;
MPRINT(EM_DIAGRAM):   if statname='RASE' then _RASE_=statvalue;
47193      label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Train: Root Average Square Error";
47194      if STATNAME = 'PREDICTION' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PREDICTION' then do;
47195      nodetext= "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"|| put(STATVALUE, 13.4)||'0A'x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext= "Average"|| put(STATVALUE, 13.4)||'0A'x|| "Count:"|| put(N, 13.);
47196      textall = nodetext;
MPRINT(EM_DIAGRAM):   textall = nodetext;
47197      P__SEGMENT_4 = STATVALUE;
MPRINT(EM_DIAGRAM):   P__SEGMENT_4 = STATVALUE;
47198      ;
MPRINT(EM_DIAGRAM):   ;
47199      ;
MPRINT(EM_DIAGRAM):   ;
47200      end;
MPRINT(EM_DIAGRAM):   end;
47201      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
47202      output EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS2.Clus3_TREE_PLOT;
47203      end;
MPRINT(EM_DIAGRAM):   end;
47204      ;
MPRINT(EM_DIAGRAM):   ;
47205      end;
MPRINT(EM_DIAGRAM):   end;
47206      label P__SEGMENT_4 = "%sysfunc(sasmsg(sashelp.dmine, rpt_predictedvar_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label P__SEGMENT_4 = "Predicted Variable";
47207      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_4;
47208      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: There were 150 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.06 seconds
 
 
47209      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
47210      set WORK.OUTSTATS_TREE_3O09_WZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_3O09_WZ;
47211      retain eventlevel;
MPRINT(EM_DIAGRAM):   retain eventlevel;
47212      if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
47213      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 150 observations read from the data set WORK.OUTSTATS_TREE_3O09_WZ.
NOTE: The data set WORK.TEMPCOLOR has 150 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47214      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
47215      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
47216      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
47217      if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
47218      end;
MPRINT(EM_DIAGRAM):   end;
47219      else do;
MPRINT(EM_DIAGRAM):   else do;
47220      if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
47221      end;
MPRINT(EM_DIAGRAM):   end;
47222      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 150 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47223      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
47224      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
47225      length nodecolor 8;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
47226      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
47227      nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
47228      end;
MPRINT(EM_DIAGRAM):   end;
47229      else do;
MPRINT(EM_DIAGRAM):   else do;
47230      nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
47231      end;
MPRINT(EM_DIAGRAM):   end;
47232      keep node nodecolor;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
47233      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47234      proc sort data=EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_TREE_PLOT;
47235      by node;
MPRINT(EM_DIAGRAM):   by node;
47236      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.13 seconds
      cpu time            0.04 seconds
 
 
47237      proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
47238      by node;
MPRINT(EM_DIAGRAM):   by node;
47239      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 25 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47240      data EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_TREE_PLOT;
47241      merge EMWS2.Clus3_TREE_PLOT tempcolor;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus3_TREE_PLOT tempcolor;
47242      by node;
MPRINT(EM_DIAGRAM):   by node;
47243      length traintotal 8;
MPRINT(EM_DIAGRAM):   length traintotal 8;
47244      retain traintotal;
MPRINT(EM_DIAGRAM):   retain traintotal;
47245      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Train Total";
47246      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
47247      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
47248      end;
MPRINT(EM_DIAGRAM):   end;
47249      if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
47250      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: There were 25 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
47251      data EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_TREE_PLOT;
47252      set EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_TREE_PLOT;
47253      textall = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote, )):"|| put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   textall = "Node Id:"|| put(Node, 13.)||'0A'x||trim(textall);
47254      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.04 seconds
 
 
47255      data tempout;
MPRINT(EM_DIAGRAM):   data tempout;
47256      set WORK.Clus3_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus3_outnodes;
47257      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.CLUS3_OUTNODES.
NOTE: The data set WORK.TEMPOUT has 25 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47258      proc sort data=tempout;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
47259      by descending P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   by descending P__SEGMENT_4;
47260      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TEMPOUT has 25 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47261      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
47262      set tempout;
MPRINT(EM_DIAGRAM):   set tempout;
47263      if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
47264      label index="%sysfunc(sasmsg(sashelp.dmine, rpt_leafindex_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label index= "Leaf Index";
47265      label percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_train = "Percent Cases";
47266      label perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_train = "Event Percentage";
47267      label tprob="%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel  , NOQUOTE, %nrbquote()))";
MPRINT(EM_DIAGRAM):   label tprob= "Training Percent ";
47268      tprob = round(P__SEGMENT_4, .01);
MPRINT(EM_DIAGRAM):   tprob = round(P__SEGMENT_4, .01);
47269      percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
47270      *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
47271      perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
47272      if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
47273      index = _n_;
MPRINT(EM_DIAGRAM):   index = _n_;
47274      keep NODE index tprob perc_train percevent_train
47275      ;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train ;
47276      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TREE_TEMP has 13 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
47277      proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
47278      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
47279      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47280      proc sort data=EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_TREE_PLOT;
47281      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
47282      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
 
 
47283      data EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_TREE_PLOT;
47284      merge EMWS2.Clus3_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus3_TREE_PLOT tree_temp;
47285      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
47286      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: There were 13 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
47287      proc sort data=EMWS2.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_TREE_PLOT;
47288      by node index;
MPRINT(EM_DIAGRAM):   by node index;
47289      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set EMWS2.CLUS3_TREE_PLOT.
NOTE: The data set EMWS2.CLUS3_TREE_PLOT has 25 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.06 seconds
 
 
ERROR: Invalid file, \\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2.
47290      title9 ' ';
MPRINT(EM_DIAGRAM):    title9 ' ';
47291      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_VariableImportance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Importance";
47292      proc print data=EMWS2.Clus3_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Clus3_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
47293      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS2.CLUS3_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47294      title10;
MPRINT(EM_DIAGRAM):   title10;
47295      data WORK.M0CMO7IV;
MPRINT(EM_DIAGRAM):    data WORK.M0CMO7IV;
47296      set WORK.M0CMO7IV;
MPRINT(EM_DIAGRAM):   set WORK.M0CMO7IV;
47297      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
47298      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M0CMO7IV.
NOTE: The data set WORK.M0CMO7IV has 21 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
47299      proc sort data=EMWS2.Clus3_OUTIMPORT out=WORK.Clus3_GRAPHVARS(keep=NAME);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Clus3_OUTIMPORT out=WORK.Clus3_GRAPHVARS(keep=NAME);
47300      where IMPORTANCE>0;
MPRINT(EM_DIAGRAM):   where IMPORTANCE>0;
47301      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47302      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS2.CLUS3_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The data set WORK.CLUS3_GRAPHVARS has 14 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
47303      proc sort data = WORK.M0CMO7IV;
MPRINT(EM_DIAGRAM):   proc sort data = WORK.M0CMO7IV;
47304      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47305      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M0CMO7IV.
NOTE: The data set WORK.M0CMO7IV has 21 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47306      data WORK.M0CMO7IV;
MPRINT(EM_DIAGRAM):   data WORK.M0CMO7IV;
47307      merge WORK.M0CMO7IV WORK.Clus3_GRAPHVARS(in=_b_);
MPRINT(EM_DIAGRAM):   merge WORK.M0CMO7IV WORK.Clus3_GRAPHVARS(in=_b_);
47308      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47309      if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
MPRINT(EM_DIAGRAM):   if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
47310      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M0CMO7IV.
NOTE: There were 14 observations read from the data set WORK.CLUS3_GRAPHVARS.
NOTE: The data set WORK.M0CMO7IV has 14 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47311      data WORK.M0CMO7IV;
MPRINT(EM_DIAGRAM):    data WORK.M0CMO7IV;
47312      set WORK.M0CMO7IV end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M0CMO7IV end=_eof_ nobs=_nobs_;
47313      output;
MPRINT(EM_DIAGRAM):   output;
47314      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
47315      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
47316      ROLE = 'BY';
MPRINT(EM_DIAGRAM):   ROLE = 'BY';
47317      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
47318      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
47319      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
47320      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
47321      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
47322      output;
MPRINT(EM_DIAGRAM):   output;
47323      end;
MPRINT(EM_DIAGRAM):   end;
47324      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.M0CMO7IV.
NOTE: The data set WORK.M0CMO7IV has 15 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
47325      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
47326      * Clus3: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus3: STDIZE Variables Macro ;
47327      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47328      %macro stdizevar;
47329          Age BMI
47330      %mend stdizevar;
47331      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47332      * Clus3: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Clus3: Computing Summary Statistics;
47333      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47334      proc stdize
47335      data = EMWS2.Clus3_TRAIN
47336      out=_null_
47337      outstat=WORK.Clus3_STAT
47338      add=0 fuzz=1E-14 initial=MAD
47339      vardef=df
47340      method=STD
47341      mult=1
47342      pctlmtd=ORD_STAT pctldef=2
47343      pctlpts=(
47344      0
47345      100
47346      )
47347      ;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS2.Clus3_TRAIN out=_null_ outstat=WORK.Clus3_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 100 ) ;
MPRINT(EM_DIAGRAM):   var
47348      var %stdizevar;
MPRINT(STDIZEVAR):   Age BMI
MPRINT(EM_DIAGRAM):  ;
47349      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: INITIAL= will be ignored.
NOTE: There were 250716 observations read from the data set ZETADATA.ZETADIABITIES_TRAIN.
NOTE: There were 250716 observations read from the data set EMWS2.IDS_DATA.
NOTE: There were 247875 observations read from the data set EMWS2.FILTER_TRAIN.
NOTE: View EMWS2.CLUS3_TRAIN.VIEW used (Total process time):
      real time           2.89 seconds
      cpu time            2.89 seconds
 
NOTE: There were 247875 observations read from the data set EMWS2.VARSEL_TRAIN.
NOTE: There were 247875 observations read from the data set EMWS2.CLUS3_TRAIN.
NOTE: The data set WORK.CLUS3_STAT has 10 observations and 3 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           2.93 seconds
      cpu time            2.93 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
47350      quit;
 
47351      data WORK.Clus3_MINMAX;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_MINMAX;
47352      set WORK.Clus3_STAT;
MPRINT(EM_DIAGRAM):   set WORK.Clus3_STAT;
47353      where _TYPE_ in('P0','P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('P0','P100');
47354      if _TYPE_='P0' then _TYPE_='MIN';
MPRINT(EM_DIAGRAM):   if _TYPE_='P0' then _TYPE_='MIN';
47355      else if _TYPE_='P100' then _TYPE_='MAX';
MPRINT(EM_DIAGRAM):   else if _TYPE_='P100' then _TYPE_='MAX';
47356      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.CLUS3_STAT.
      WHERE _TYPE_ in ('P0', 'P100');
NOTE: The data set WORK.CLUS3_MINMAX has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47357      proc transpose data=WORK.Clus3_MINMAX out=WORK.Clus3_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Clus3_MINMAX out=WORK.Clus3_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
47358      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
47359      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set WORK.CLUS3_MINMAX.
NOTE: The data set WORK.CLUS3_MINMAX has 2 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
47360      data WORK.Clus3_UGRID;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_UGRID;
47361      set WORK.Clus3_MINMAX;
MPRINT(EM_DIAGRAM):   set WORK.Clus3_MINMAX;
47362      B1 = MIN + (1-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B1 = MIN + (1-1)*(MAX-MIN)/8;
47363      B2 = MIN + (2-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B2 = MIN + (2-1)*(MAX-MIN)/8;
47364      B3 = MIN + (3-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B3 = MIN + (3-1)*(MAX-MIN)/8;
47365      B4 = MIN + (4-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B4 = MIN + (4-1)*(MAX-MIN)/8;
47366      B5 = MIN + (5-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B5 = MIN + (5-1)*(MAX-MIN)/8;
47367      B6 = MIN + (6-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B6 = MIN + (6-1)*(MAX-MIN)/8;
47368      B7 = MIN + (7-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B7 = MIN + (7-1)*(MAX-MIN)/8;
47369      B8 = MIN + (8-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B8 = MIN + (8-1)*(MAX-MIN)/8;
47370      B9 = MIN + (9-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B9 = MIN + (9-1)*(MAX-MIN)/8;
47371      drop MIN MAX;
MPRINT(EM_DIAGRAM):   drop MIN MAX;
47372      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.CLUS3_MINMAX.
NOTE: The data set WORK.CLUS3_UGRID has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47373      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47374      * Clus3: Creating formats for binning interval variables;
MPRINT(EM_DIAGRAM):   * Clus3: Creating formats for binning interval variables;
47375      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47376      proc format;
MPRINT(EM_DIAGRAM):   proc format;
47377      value F1_
47378      1-2.5 = "1:2.5"
47379      2.5-4 = "2.5:4"
47380      4-5.5 = "4:5.5"
47381      5.5-7 = "5.5:7"
47382      7-8.5 = "7:8.5"
47383      8.5-10 = "8.5:10"
47384      10-11.5 = "10:11.5"
47385      11.5-13 = "11.5:13"
47386      ;
MPRINT(EM_DIAGRAM):   value F1_ 1-2.5 = "1:2.5" 2.5-4 = "2.5:4" 4-5.5 = "4:5.5" 5.5-7 = "5.5:7" 7-8.5 = "7:8.5" 8.5-10 = "8.5:10" 10-11.5 = "10:11.5" 11.5-13 = "11.5:13" ;
NOTE: Format F1_ has been output.
47387      value F2_
47388      12-16 = "12:16"
47389      16-20 = "16:20"
47390      20-24 = "20:24"
47391      24-28 = "24:28"
47392      28-32 = "28:32"
47393      32-36 = "32:36"
47394      36-40 = "36:40"
47395      40-44 = "40:44"
47396      ;
MPRINT(EM_DIAGRAM):   value F2_ 12-16 = "12:16" 16-20 = "16:20" 20-24 = "20:24" 24-28 = "24:28" 28-32 = "28:32" 32-36 = "32:36" 36-40 = "36:40" 40-44 = "40:44" ;
NOTE: Format F2_ has been output.
MPRINT(EM_DIAGRAM):   run;
47397      run;
 
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47398      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
47399      ods output crosstabfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output crosstabfreqs=WORK.TEMPFREQ;
47400      proc freq data = EMWS2.Clus3_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS2.Clus3_TRAIN order=formatted addnames;
47401      table Age * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table Age * _SEGMENT_ / missing;
47402      table AnyHealthcare * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table AnyHealthcare * _SEGMENT_ / missing;
47403      table BMI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BMI * _SEGMENT_ / missing;
47404      table CholCheck * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CholCheck * _SEGMENT_ / missing;
47405      table DiffWalk * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table DiffWalk * _SEGMENT_ / missing;
47406      table GenHlth * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table GenHlth * _SEGMENT_ / missing;
47407      table HeartDiseaseorAttack * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HeartDiseaseorAttack * _SEGMENT_ / missing;
47408      table HighBP * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HighBP * _SEGMENT_ / missing;
47409      table HighChol * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HighChol * _SEGMENT_ / missing;
47410      table Income * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table Income * _SEGMENT_ / missing;
47411      table MentHlth * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table MentHlth * _SEGMENT_ / missing;
47412      table NoDocbcCost * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table NoDocbcCost * _SEGMENT_ / missing;
47413      table PhysHlth * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PhysHlth * _SEGMENT_ / missing;
47414      table Stroke * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table Stroke * _SEGMENT_ / missing;
47415      format AGE F1_.;
MPRINT(EM_DIAGRAM):   format AGE F1_.;
47416      format BMI F2_.;
MPRINT(EM_DIAGRAM):   format BMI F2_.;
47417      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 250716 observations read from the data set ZETADATA.ZETADIABITIES_TRAIN.
NOTE: There were 250716 observations read from the data set EMWS2.IDS_DATA.
NOTE: There were 247875 observations read from the data set EMWS2.FILTER_TRAIN.
NOTE: View EMWS2.CLUS3_TRAIN.VIEW used (Total process time):
      real time           2.94 seconds
      cpu time            2.84 seconds
 
NOTE: There were 247875 observations read from the data set EMWS2.VARSEL_TRAIN.
NOTE: The data set WORK.TEMPFREQ has 605 observations and 25 variables.
NOTE: There were 247875 observations read from the data set EMWS2.CLUS3_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           3.08 seconds
      cpu time            2.95 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
47418      quit;
47419      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
47420      data EMWS2.Clus3_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data EMWS2.Clus3_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
47421      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" _SEGMENT_ = "Segment Variable" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ =
47422         "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT =
47423         "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" _SEGMENT_ = "Segment Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
47424      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
47425      varnum = varnum(dsid, 'ROWVARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'ROWVARIABLE');
47426      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
47427      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
47428      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
47429      bynum = varnum(dsid, "_SEGMENT_");
MPRINT(EM_DIAGRAM):   bynum = varnum(dsid, "_SEGMENT_");
47430      length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
MPRINT(EM_DIAGRAM):   length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
47431      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
47432      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
47433      percent = getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent = getvarn(dsid, pvarnum);
47434      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
47435      varblnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   varblnum = varnum(dsid, _VARIABLE_);
47436      _SEGMENT_ = getvarn(dsid, bynum);
MPRINT(EM_DIAGRAM):   _SEGMENT_ = getvarn(dsid, bynum);
47437      type = vartype(dsid, varblnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, varblnum);
47438      varformat = varfmt(dsid, varblnum);
MPRINT(EM_DIAGRAM):   varformat = varfmt(dsid, varblnum);
47439      if varformat eq '' then varformat = 'best12.';
MPRINT(EM_DIAGRAM):   if varformat eq '' then varformat = 'best12.';
47440      _X_=.;
MPRINT(EM_DIAGRAM):   _X_=.;
47441      if type = 'N' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
47442      _X_ = getvarn(dsid, varblnum);
MPRINT(EM_DIAGRAM):   _X_ = getvarn(dsid, varblnum);
47443      _XLABEL_ = left(putn(_X_, varformat));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(putn(_X_, varformat));
47444      end;
MPRINT(EM_DIAGRAM):   end;
47445      else _XLABEL_ = getvarc(dsid, varblnum);
MPRINT(EM_DIAGRAM):   else _XLABEL_ = getvarc(dsid, varblnum);
47446      if getvarc(dsid, typenum) = '11' then output;
MPRINT(EM_DIAGRAM):   if getvarc(dsid, typenum) = '11' then output;
47447      end;
MPRINT(EM_DIAGRAM):   end;
47448      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
47449      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS2.CLUS3_PROFILE has 428 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.09 seconds
 
 
47450      proc sort data=EMWS2.Clus3_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_PROFILE NOTHREADS;
47451      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
47452      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 428 observations read from the data set EMWS2.CLUS3_PROFILE.
NOTE: The data set EMWS2.CLUS3_PROFILE has 428 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
47453      proc means data=EMWS2.Clus3_PROFILE noprint missing NWAY;
MPRINT(EM_DIAGRAM):   proc means data=EMWS2.Clus3_PROFILE noprint missing NWAY;
47454      class _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   class _VARIABLE_ _SEGMENT_;
47455      var COUNT;
MPRINT(EM_DIAGRAM):   var COUNT;
47456      output out=WORK.Clus3_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
MPRINT(EM_DIAGRAM):   output out=WORK.Clus3_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
47457      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 428 observations read from the data set EMWS2.CLUS3_PROFILE.
NOTE: The data set WORK.CLUS3_STATCOUNT has 56 observations and 3 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.02 seconds
      cpu time            0.06 seconds
 
 
47458      proc sort data=WORK.Clus3_STATCOUNT NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus3_STATCOUNT NOTHREADS;
47459      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
47460      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 56 observations read from the data set WORK.CLUS3_STATCOUNT.
NOTE: The data set WORK.CLUS3_STATCOUNT has 56 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47461      data EMWS2.Clus3_PROFILE(drop=SUM);
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_PROFILE(drop=SUM);
47462      label BYPERCENT= "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE, _SEGMENT_))";
MPRINT(EM_DIAGRAM):   label BYPERCENT= "Percent";
47463      merge EMWS2.Clus3_PROFILE WORK.Clus3_STATCOUNT;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus3_PROFILE WORK.Clus3_STATCOUNT;
47464      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
47465      if SUM ne . then BYPERCENT = 100*COUNT/SUM;
MPRINT(EM_DIAGRAM):   if SUM ne . then BYPERCENT = 100*COUNT/SUM;
47466      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 428 observations read from the data set EMWS2.CLUS3_PROFILE.
NOTE: There were 56 observations read from the data set WORK.CLUS3_STATCOUNT.
NOTE: The data set EMWS2.CLUS3_PROFILE has 428 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
 
 
47467      proc sort data=EMWS2.Clus3_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Clus3_PROFILE NOTHREADS;
47468      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
47469      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 428 observations read from the data set EMWS2.CLUS3_PROFILE.
NOTE: The data set EMWS2.CLUS3_PROFILE has 428 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
47470      proc sort data=WORK.M0CMO7IV;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M0CMO7IV;
47471      by Name;
MPRINT(EM_DIAGRAM):   by Name;
47472      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set WORK.M0CMO7IV.
NOTE: The data set WORK.M0CMO7IV has 15 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47473      data EMWS2.Clus3_PROFILE;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_PROFILE;
47474      merge EMWS2.Clus3_PROFILE(in=_a) WORK.M0CMO7IV(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus3_PROFILE(in=_a) WORK.M0CMO7IV(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
47475      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
47476      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
47477      label Label = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Label";
47478      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
47479      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable Label is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _VARIABLE_ by input data sets. This might cause unexpected results.
NOTE: There were 428 observations read from the data set EMWS2.CLUS3_PROFILE.
NOTE: There were 15 observations read from the data set WORK.M0CMO7IV.
NOTE: The data set EMWS2.CLUS3_PROFILE has 428 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
47480      proc sort data=EMWS2.Clus3_PROFILE;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Clus3_PROFILE;
47481      by _SEGMENT_ _VARIABLE_ _X_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_ _X_;
47482      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 428 observations read from the data set EMWS2.CLUS3_PROFILE.
NOTE: The data set EMWS2.CLUS3_PROFILE has 428 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.13 seconds
      cpu time            0.04 seconds
 
 
47483      data EMWS2.Clus3_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
47484      set EMWS2.Clus3_PROFILE;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_PROFILE;
47485      retain orderedValue 0;
MPRINT(EM_DIAGRAM):   retain orderedValue 0;
47486      label OrderedValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_OrderedValue_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label OrderedValue = "Ordered Values";
47487      by _SEGMENT_ _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_;
47488      if first._variable_ then orderedValue=1;
MPRINT(EM_DIAGRAM):   if first._variable_ then orderedValue=1;
47489      else orderedValue+1;
MPRINT(EM_DIAGRAM):   else orderedValue+1;
47490      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 428 observations read from the data set EMWS2.CLUS3_PROFILE.
NOTE: The data set EMWS2.CLUS3_PROFILE has 428 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.06 seconds
 
 
47491      data WORK.Clus3_temp;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_temp;
47492      set EMWS2.Clus3_OUTMEAN;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_OUTMEAN;
47493      _idvar_=left(put(_SEGMENT_,4.));
MPRINT(EM_DIAGRAM):   _idvar_=left(put(_SEGMENT_,4.));
47494      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.CLUS3_OUTMEAN.
NOTE: The data set WORK.CLUS3_TEMP has 4 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
47495      proc distance data=WORK.Clus3_temp out=EMWS2.Clus3_DISTANCE method=l(2) shape=square;
MPRINT(EM_DIAGRAM):   proc distance data=WORK.Clus3_temp out=EMWS2.Clus3_DISTANCE method=l(2) shape=square;
47496      id _idvar_;
MPRINT(EM_DIAGRAM):   id _idvar_;
47497      var interval(%dmvqvars);
MPRINT(EM_DIAGRAM):   var interval(
MPRINT(DMVQVARS):  Age BMI AnyHealthcare0 AnyHealthcare1 CholCheck0 CholCheck1 DiffWalk0 DiffWalk1 Fruits0 Fruits1 HeartDiseaseorAttack0 HeartDiseaseorAttack1 HighBP0 HighBP1 HighChol0 HighChol1 HvyAlcoholConsump0 HvyAlcoholConsump1 NoDocbcCost0
NoDocbcCost1 PhysActivity0 PhysActivity1 Sex0 Sex1 Smoker0 Smoker1 Stroke0 Stroke1 Veggies0 Veggies1 T_Education T_GenHlth T_Income T_MentHlth T_PhysHlth
MPRINT(EM_DIAGRAM):  );
47498      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS2.CLUS3_DISTANCE has 4 observations and 5 variables.
NOTE: PROCEDURE DISTANCE used (Total process time):
      real time           0.16 seconds
      cpu time            0.07 seconds
 
 
47499      proc mds data=EMWS2.Clus3_DISTANCE out=WORK.Clus3_mds level=absolute nohist shape=square dim=3;
MPRINT(EM_DIAGRAM):    proc mds data=EMWS2.Clus3_DISTANCE out=WORK.Clus3_mds level=absolute nohist shape=square dim=3;
47500      object _idvar_;
MPRINT(EM_DIAGRAM):   object _idvar_;
47501      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Convergence assumed because the badness-of-fit criterion 1.511587E-16 is less than or equal to MINCRIT=1E-6.
NOTE: The data set WORK.CLUS3_MDS has 5 observations and 8 variables.
NOTE: PROCEDURE MDS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
47502      quit;
47503      data WORK.Clus3_mds;
MPRINT(EM_DIAGRAM):   data WORK.Clus3_mds;
47504      set WORK.Clus3_mds;
MPRINT(EM_DIAGRAM):   set WORK.Clus3_mds;
47505      if _type_ ne 'CONFIG' then delete;
MPRINT(EM_DIAGRAM):   if _type_ ne 'CONFIG' then delete;
47506      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.CLUS3_MDS.
NOTE: The data set WORK.CLUS3_MDS has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47507      data WORK.Clus3_mds(label="&label" keep=_idvar_ _radius_ dim1 dim2 dim3);
WARNING: Apparent symbolic reference LABEL not resolved.
MPRINT(EM_DIAGRAM):   data WORK.Clus3_mds(label="&label" KEEP=_idvar_ _radius_ dim1 dim2 dim3);
47508      merge WORK.Clus3_temp WORK.Clus3_mds;
MPRINT(EM_DIAGRAM):   merge WORK.Clus3_temp WORK.Clus3_mds;
47509      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.CLUS3_TEMP.
NOTE: There were 4 observations read from the data set WORK.CLUS3_MDS.
NOTE: The data set WORK.CLUS3_MDS has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
47510      goptions reset=all device=PNG;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG;
47511      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
47512      title1 "%sysfunc(sasmsg(sashelp.dmine, rpt_ClusterDistance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title1 "Cluster Proximities";
47513      %plotit(data=WORK.Clus3_mds, datatype=mds, radii=_radius_, labelvar=_idvar_, symtype=circle, symbols='*', gout=WORK.Clus3, gname=DISTANCE, gopts2=nodisplay, gopts=device=GIF, gopplot=cback=white, titlecol=black, labelcol=black, tickcol=black,
MPRINT(EM_DIAGRAM):   *------debugging routine to dump out macro variables------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):  *=========================== Macro Start =============================;
47514         framecol=black, post=C:\Users\bkris2\AppData\Local\Temp\SAS Temporary Files\_TD11852_NUTVDIWIN104-34_\Prc2\plotit.ps);
MPRINT(PLOTIT):   options nonotes;
MPRINT(PLOTIT):   options missing='.';
MPRINT(PLOTIT):   options noserror;
MPRINT(PLOTIT):   options serror;
MPRINT(PLOTIT):   *------store starting time, initialize a few variables-------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length name $ 8 __debug value $ 500 glob $ 32767;
MPRINT(PLOTIT):   __time = datetime();
MPRINT(PLOTIT):   call symput('start',compress(put(__time,best15.)));
MPRINT(PLOTIT):   *------override parameters?-------;
MPRINT(PLOTIT):   glob = left(symget('plotitop'));
MPRINT(PLOTIT):   if glob ne ' ' then put 'Overridden Parameters:';
MPRINT(PLOTIT):   do while(glob ne ' ');
MPRINT(PLOTIT):   i = index(glob, '=');
MPRINT(PLOTIT):   name = substr(glob, 1, i - 1);
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   i = index(glob, ',');
MPRINT(PLOTIT):   if i = 0 then i = length(glob) + 1;
MPRINT(PLOTIT):   value = substr(glob, 1, i);
MPRINT(PLOTIT):   value = translate(value, ' ', ',');
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   put name +(-1) '=' value;
MPRINT(PLOTIT):   call symput(name, trim(value));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------debugging flags-------;
MPRINT(PLOTIT):   __debug = symget('debug');
MPRINT(PLOTIT):   call symput('dbyes' ,compress(put(index(__debug,'vars') ,3.)));
MPRINT(PLOTIT):   call symput('dbprint' ,compress(put(index(__debug,'dprint'),3.)));
MPRINT(PLOTIT):   call symput('dbtime' ,compress(put(index(__debug,'time') ,3.)));
MPRINT(PLOTIT):   call symput('dbmprint',compress(put(index(__debug,'mprint'),3.)));
MPRINT(PLOTIT):   if (sysprod('stat') + sysprod('graph')) ne 2 then do;
MPRINT(PLOTIT):   put 'ERROR: SAS/STAT and SAS/GRAPH must be licensed ' 'to run this macro.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('style') ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: STYLE= is not supported in this release of the macro.' / '       Use OPTIONS NOGSTYLE to get the old appearance.' / '       Typically, you should set a style ' 'on the ODS destination.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length s $ 20;
MPRINT(PLOTIT):   retain s ' ';
MPRINT(PLOTIT):   file print;
MPRINT(PLOTIT):   set sashelp.vdest;
MPRINT(PLOTIT):   notb = style ne ' ';
MPRINT(PLOTIT):   style = lowcase(style);
MPRINT(PLOTIT):   if style eq 'listing' and s eq ' ' then call symputx('style', style, 'L');
MPRINT(PLOTIT):   else if style ne 'listing' and notb then do;
MPRINT(PLOTIT):   if s eq ' ' then s = style;
MPRINT(PLOTIT):   else if style ne s then do;
MPRINT(PLOTIT):   file log;
MPRINT(PLOTIT):   put 'ERROR: Multiple non-listing destinations with ' 'multiple ' 'styles ' 'are ' 'open.';
MPRINT(PLOTIT):   call symput('abort', '2');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if s ne ' ' then call symputx('style', s, 'L');
MPRINT(PLOTIT):   if _error_ then call symput('abort', '1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   *------mention var names for ordinary SAS syntax check-------;
MPRINT(PLOTIT):   retain _idvar_ __junk 0;
MPRINT(PLOTIT):   array __1 _idvar_ __junk;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(symget('labelvar')) > 67 or length(symget('symvar')) > 67 or length(symget('typevar')) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store current linesize and pagesize to restore later------;
MPRINT(PLOTIT):   length __ls __ps __var sysscp $ 8 ;
MPRINT(PLOTIT):   __num = getoption('number');
MPRINT(PLOTIT):   __ls = getoption('linesize');
MPRINT(PLOTIT):   __ps = getoption('pagesize');
MPRINT(PLOTIT):   __lab = getoption('label');
MPRINT(PLOTIT):   __var = getoption('validvarname');
MPRINT(PLOTIT):   __page = input(__ps, 8.);
MPRINT(PLOTIT):   if __page < 200 then __logps = __page + 1;
MPRINT(PLOTIT):   else __logps = 200;
MPRINT(PLOTIT):   if __logps < 20 then __logps = 20;
MPRINT(PLOTIT):   call symput('v7' , put(index(__var, '6') eq 0, 1.));
MPRINT(PLOTIT):   call symput('restornum',compress(__num));
MPRINT(PLOTIT):   call symput('restorla', compress(__lab));
MPRINT(PLOTIT):   call symput('restorls', compress(__ls));
MPRINT(PLOTIT):   call symput('restorps', compress(__ps));
MPRINT(PLOTIT):   call symput('logps' , compress(put(__logps, best8.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options label;
MPRINT(PLOTIT):   *------start parameter checking, initialization------;
MPRINT(PLOTIT):   *------initialization------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length data f1-f11 $ 72 name $ 70 post opts datatype plotvars $ 500 filepref $ 32;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------change other options based on GSTYLE/NOGSTYLE------;
MPRINT(PLOTIT):   if upcase(symget('style')) ne ' ' then do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'none');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LBFh');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'swiss');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LRTBFlb');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   datatype = upcase(symget('datatype'));
MPRINT(PLOTIT):   *------start setting up background color, border------;
MPRINT(PLOTIT):   opts = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('noback', put(index(opts, 'noback') ge 1, 1.));
MPRINT(PLOTIT):   if symget('noback') eq '1' then call symput('cframe', ' ');
MPRINT(PLOTIT):   if index(opts, 'noborder') then b = '0';
MPRINT(PLOTIT):   else if index(opts, 'border') then b = '1';
MPRINT(PLOTIT):   else if upcase(symget('style')) eq ' ' then b = '0';
MPRINT(PLOTIT):   else b = '1';
MPRINT(PLOTIT):   call symput('border', b);
MPRINT(PLOTIT):   *------initialize some macro variables------;
MPRINT(PLOTIT):   call symput('onetype','1');
MPRINT(PLOTIT):   call symput('singular','1e-8');
MPRINT(PLOTIT):   call symput('allblank','1');
MPRINT(PLOTIT):   call symput('botblank','0');
MPRINT(PLOTIT):   call symput('nlines' ,'0');
MPRINT(PLOTIT):   call symput('symnumer','0');
MPRINT(PLOTIT):   call symput('typenum' ,'0');
MPRINT(PLOTIT):   call symput('search' ,' ');
MPRINT(PLOTIT):   call symput('actualls','-1');
MPRINT(PLOTIT):   call symput('symdummy','#');
MPRINT(PLOTIT):   call symput('paintcol',' ');
MPRINT(PLOTIT):   call symput('paintmin','.');
MPRINT(PLOTIT):   call symput('paintmax','.');
MPRINT(PLOTIT):   call symput('paintnum','0');
MPRINT(PLOTIT):   call symput('ncontour','0');
MPRINT(PLOTIT):   call symput('hcontour','0');
MPRINT(PLOTIT):   call symput('vcontour','0');
MPRINT(PLOTIT):   call symput('hcondir ','0');
MPRINT(PLOTIT):   call symput('vcondir ','0');
MPRINT(PLOTIT):   call symput('looklist','0');
MPRINT(PLOTIT):   call symput('sizsquar','1');
MPRINT(PLOTIT):   call symput('ntitles' ,'0');
MPRINT(PLOTIT):   call symput('device' ,symget('sysdevic'));
MPRINT(PLOTIT):   call symput('datatype',trim(datatype));
MPRINT(PLOTIT):   call symput('listtitl','*** Wrapped Listing of Point Locations ***');
MPRINT(PLOTIT):   *------set vector scale factor------;
MPRINT(PLOTIT):   name = ' ';
MPRINT(PLOTIT):   do i = 5 to 2 by -1;
MPRINT(PLOTIT):   if name = ' ' then name = scan(datatype,i,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if name = ' ' or nmiss(input(name,?? 32.)) then name = '1';
MPRINT(PLOTIT):   call symput('biplot',trim(name));
MPRINT(PLOTIT):   *------make sure there are input data------;
MPRINT(PLOTIT):   data = left(upcase(symget('data')));
MPRINT(PLOTIT):   if data in (' ' '_LAST_') then do;
MPRINT(PLOTIT):   data = symget('syslast');
MPRINT(PLOTIT):   call symput('data',trim(data));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if data = '_NULL_' then do;
MPRINT(PLOTIT):   put 'ERROR: No input data set.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default file name------;
MPRINT(PLOTIT):   post = symget('post');
MPRINT(PLOTIT):   if post = ' ' then do;
MPRINT(PLOTIT):   sysscp = symget('sysscp');
MPRINT(PLOTIT):   filepref = symget('filepref');
MPRINT(PLOTIT):   if filepref = ' ' then filepref = 'sasplot';
MPRINT(PLOTIT):   if sysscp = 'CMS' then post = trim(filepref) || ' ' || 'ps';
MPRINT(PLOTIT):   else if sysscp =: 'VMS' or sysscp = 'WIN' or sysscp = 'OS2' then post = trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   else post = '.' || trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('post', trim(post));
MPRINT(PLOTIT):   *------some options cannot have null values------;
MPRINT(PLOTIT):   if symget('out') = ' ' then call symput('out' ,'anno');
MPRINT(PLOTIT):   if symget('tempdat1') = ' ' then call symput('tempdat1','tempdat1');
MPRINT(PLOTIT):   if symget('tempdat2') = ' ' then call symput('tempdat2','tempdat2');
MPRINT(PLOTIT):   if symget('tempdat3') = ' ' then call symput('tempdat3','tempdat3');
MPRINT(PLOTIT):   if symget('tempdat4') = ' ' then call symput('tempdat4','tempdat4');
MPRINT(PLOTIT):   if symget('tempdat5') = ' ' then call symput('tempdat5','tempdat5');
MPRINT(PLOTIT):   if symget('tempdat6') = ' ' then call symput('tempdat6','tempdat6');
MPRINT(PLOTIT):   if symget('regdat') = ' ' then call symput('regdat' ,'regdat');
MPRINT(PLOTIT):   if symget('preproc') = ' ' then call symput('preproc' ,'preproc');
MPRINT(PLOTIT):   if symget('extraobs') = ' ' then call symput('extraobs','extraobs');
MPRINT(PLOTIT):   if symget('radii') = ' ' then call symput('radii' ,'1, 2');
MPRINT(PLOTIT):   if symget('cirsegs') = ' ' then call symput('cirsegs' ,'.1');
MPRINT(PLOTIT):   if symget('cursegs') = ' ' then call symput('cursegs' ,'200');
MPRINT(PLOTIT):   if symget('maxiter') = ' ' then call symput('maxiter' ,'15');
MPRINT(PLOTIT):   if symget('lsinc') = ' ' then call symput('lsinc' ,'15');
MPRINT(PLOTIT):   if symget('place') = ' ' then call symput('place' ,'2 search');
MPRINT(PLOTIT):   if symget('symlen') = ' ' then call symput('symlen' ,'1');
MPRINT(PLOTIT):   if symget('ls') = ' ' then call symput('ls','compute search');
MPRINT(PLOTIT):   if symget('maxokpen') = ' ' then call symput('maxokpen','0');
MPRINT(PLOTIT):   if symget('ticklen') = ' ' then call symput('ticklen' ,'1.5');
MPRINT(PLOTIT):   if symget('tickfor') = ' ' then call symput('tickfor' ,'32.');
MPRINT(PLOTIT):   if symget('hnobs') = ' ' then call symput('hnobs' ,'0');
MPRINT(PLOTIT):   if symget('vnobs') = ' ' then call symput('vnobs' ,'0');
MPRINT(PLOTIT):   *------is radii a variable name?------;
MPRINT(PLOTIT):   name = upcase(substr(left(symget('radii')),1,1));
MPRINT(PLOTIT):   call symput('radname', put('A' <= name <= 'Z' or name = '_' or name = '"' or name = "'", 1.));
MPRINT(PLOTIT):   *------always use a formchar------;
MPRINT(PLOTIT):   call symput('procopts', trim(symget('procopts')) || " formchar='|----|+|---'");
MPRINT(PLOTIT):   *------was TYPES= specified?------;
MPRINT(PLOTIT):   call symput('typespec', put(symget('types') ne ' ',1.));
MPRINT(PLOTIT):   *------set default plotvars------;
MPRINT(PLOTIT):   plotvars = symget('plotvars');
MPRINT(PLOTIT):   if plotvars = ' ' then do;
MPRINT(PLOTIT):   if index(datatype,'MDS') or index(datatype,'MCA') or index(datatype,'ROW') or index(datatype,'COLUMN') or index(datatype,'CORRESP') then plotvars = 'Dim2 Dim1';
MPRINT(PLOTIT):   else if index(datatype,'MDPREF') or index(datatype,'VECTOR') or index(datatype,'IDEAL') then plotvars = 'Prin2 Prin1';
MPRINT(PLOTIT):   call symput('plotvars',trim(plotvars));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for conflicting data set names------;
MPRINT(PLOTIT):   f1 = left(upcase(symget('data')));
MPRINT(PLOTIT):   f2 = left(upcase(symget('out')));
MPRINT(PLOTIT):   f3 = left(upcase(symget('tempdat1')));
MPRINT(PLOTIT):   f4 = left(upcase(symget('tempdat2')));
MPRINT(PLOTIT):   f5 = left(upcase(symget('tempdat3')));
MPRINT(PLOTIT):   f6 = left(upcase(symget('tempdat4')));
MPRINT(PLOTIT):   f7 = left(upcase(symget('tempdat5')));
MPRINT(PLOTIT):   f8 = left(upcase(symget('tempdat6')));
MPRINT(PLOTIT):   f9 = left(upcase(symget('preproc')));
MPRINT(PLOTIT):   f10 = left(upcase(symget('extraobs')));
MPRINT(PLOTIT):   f11 = left(upcase(symget('regdat')));
MPRINT(PLOTIT):   opts = 'DATA OUT TEMPDAT1 TEMPDAT2 TEMPDAT3 TEMPDAT4 TEMPDAT5 ' || 'TEMPDAT6 PREPROC EXTRAOBS REGDAT';
MPRINT(PLOTIT):   array f[11] f1-f11;
MPRINT(PLOTIT):   do i = 1 to 11;
MPRINT(PLOTIT):   if f[i] =: 'WORK.' then f[i] = substr(f[i],6);
MPRINT(PLOTIT):   __name = f[i];
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   f[i] = __name;
MPRINT(PLOTIT):   do j = 1 to (i - 1);
MPRINT(PLOTIT):   if f[i] = f[j] then do;
MPRINT(PLOTIT):   oi = scan(opts,i,' ');
MPRINT(PLOTIT):   oj = scan(opts,j,' ');
MPRINT(PLOTIT):   put 'ERROR: Data sets ' oi +(-1) '=' f[i] 'and ' oj +(-1) '=' f[j] 'must be different.';
MPRINT(PLOTIT):   if oj = 'DATA' then put 'WARNING: You may have not specified DATA=.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------store input data set variable names------;
MPRINT(PLOTIT):   proc contents data=WORK.Clus3_mds noprint out=tempdat1;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort data=tempdat1(keep=varnum type name);
MPRINT(PLOTIT):   by varnum;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------look for the type variable, plot variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length tvname vplotvar hplotvar upname vnormvar hnormvar pnormvar snormvar $ 70 __list plotvars __name $ 500 __c $ 1;
MPRINT(PLOTIT):   retain tvname vplotvar hplotvar hnormvar vnormvar pnormvar snormvar ' ' ok 1 vfound hfound pfound sfound 0;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   f = (index(symget('datatype'), 'FUNCTION') or index(upcase(symget('symtype')), 'FUNCTION'));
MPRINT(PLOTIT):   call symput('functype', put(f, 1.));
MPRINT(PLOTIT):   __name = symget('typevar');
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   tvname = __name;
MPRINT(PLOTIT):   __list = symget('plotvars');
MPRINT(PLOTIT):   __n = 1;
MPRINT(PLOTIT):   plotvars = __list;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   vnormvar = __name;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   hnormvar = __name;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   pfound = (lowcase(__name) eq '_blank_' or __name eq ' ');
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   pnormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   sfound = (lowcase(__name) eq '_symbol_' or __name eq ' ' or lowcase(__name) eq "'00'x" or lowcase(__name) eq '"00"x');
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   snormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __list = symget('paint');
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   call symput('paintvar',trim(__name));
MPRINT(PLOTIT):   call symput('paint' ,trim(__list));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   if upname = tvname or (tvname = ' ' and upname = '_TYPE_') then do;
MPRINT(PLOTIT):   if tvname = ' ' then call symput('typevar','_type_');
MPRINT(PLOTIT):   if (type = 1) then call symput('typenum','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------plotting variables must be numeric------;
MPRINT(PLOTIT):   if (upname = hnormvar or upname = vnormvar) and type = 2 then do;
MPRINT(PLOTIT):   put 'ERROR: PLOTVARS=' plotvars 'must be numeric.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default plotting variables if not set yet------;
MPRINT(PLOTIT):   if type = 1 then do;
MPRINT(PLOTIT):   if hplotvar = ' ' then do;
MPRINT(PLOTIT):   hplotvar = name;
MPRINT(PLOTIT):   hnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if vplotvar = ' ' then do;
MPRINT(PLOTIT):   vplotvar = name;
MPRINT(PLOTIT):   vnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------make sure axis variables are found------;
MPRINT(PLOTIT):   if upname = hnormvar then do;
MPRINT(PLOTIT):   hfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = vnormvar then do;
MPRINT(PLOTIT):   vfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = pnormvar then pfound = 1;
MPRINT(PLOTIT):   if upname = snormvar then sfound = 1;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   call symput('vplotvar',trim(vplotvar));
MPRINT(PLOTIT):   call symput('hplotvar',trim(hplotvar));
MPRINT(PLOTIT):   __list = trim(hplotvar) || ' ' || trim(vplotvar);
MPRINT(PLOTIT):   call symput('plotvars',trim(hplotvar) || ' ' || trim(vplotvar));
MPRINT(PLOTIT):   name = 'A' || vplotvar;
MPRINT(PLOTIT):   call symput('appvar1',trim(name));
MPRINT(PLOTIT):   if vplotvar = ' ' or hplotvar = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Not enough variables to plot.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not hfound then do;
MPRINT(PLOTIT):   put 'ERROR: Horizontal axis variable ' hplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not vfound then do;
MPRINT(PLOTIT):   put 'ERROR: Vertical axis variable ' vplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   put 'ERROR: Label variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   put 'ERROR: Symbol variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if hnormvar = '_TYPE_' or vnormvar = '_TYPE_' then put 'WARNING: _TYPE_ is one of the axis variables.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to length(__name);
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   namescan: * Returns nth name from a list. * Input: __list, __n * Output: __list, (trashed) * __name * Sample usage: * __list = 'a "b"n "C d"N d';
MPRINT(PLOTIT):   * __n = 2;
MPRINT(PLOTIT):   * link namescan;
MPRINT(PLOTIT):   * Creates: __name = '"b"n' * Notes: __name must have a length of at least 67. * a much longer length (say > 256) helps guard * against long, blank padded n-literals.;
MPRINT(PLOTIT):   __list = left(__list);
MPRINT(PLOTIT):   do __i = 1 to __n;
MPRINT(PLOTIT):   __c = substr(__list, 1, 1);
MPRINT(PLOTIT):   if trim(__c) in ("'", '"') then do;
MPRINT(PLOTIT):   __e = 0;
MPRINT(PLOTIT):   __len = length(__list);
MPRINT(PLOTIT):   do __k = 2 to __len until(__e);
MPRINT(PLOTIT):   if upcase(substr(__list, __k, 2)) in ("''", '""') then __k + 1;
MPRINT(PLOTIT):   else if upcase(substr(__list, __k, 2)) = compress(__c || 'N') then __e = __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else __e = index(__list, ' ') - 1;
MPRINT(PLOTIT):   if __e < 1 then __e = length(__list);
MPRINT(PLOTIT):   __name = substr(__list, 1, __e);
MPRINT(PLOTIT):   __list = left(substr(__list, __e + 2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(__name) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __list __n __i __k __len __name __c __e;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------generate TYPES= list from data?------;
MPRINT(PLOTIT):   *------preliminary preprocessing that changes the data------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   set WORK.Clus3_mds;
MPRINT(PLOTIT):   if n(Dim2,Dim1) = 2;
MPRINT(PLOTIT):   *------eliminate anti-ideal points------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------get colors from style------;
MPRINT(PLOTIT):   data tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   length w c $ 20 n 8;
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Set defaults based on options (from the pre-style days);
MPRINT(PLOTIT):   data tempdat6;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   w = 'parent      ';
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   c = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gaxis       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('framecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gborderlines';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcfit       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('curvecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'glabel      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('labelcol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gtext       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('titlecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gwalls      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('cframe');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata1     ';
MPRINT(PLOTIT):   n = 1;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata2     ';
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata3     ';
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata4     ';
MPRINT(PLOTIT):   n = 4;
The SAS System
 
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata5     ';
MPRINT(PLOTIT):   n = 5;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata6     ';
MPRINT(PLOTIT):   n = 6;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata7     ';
MPRINT(PLOTIT):   n = 7;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata8     ';
MPRINT(PLOTIT):   n = 8;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata9     ';
MPRINT(PLOTIT):   n = 9;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata10    ';
MPRINT(PLOTIT):   n = 10;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata11    ';
MPRINT(PLOTIT):   n = 11;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata12    ';
MPRINT(PLOTIT):   n = 12;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Get values from style and style parents up to four levels;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.listing / file="C:\Users\bkris2\AppData\Local\Temp\SAS Temporary Files\_TD11852_NUTVDIWIN104-34_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat2(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\bkris2\AppData\Local\Temp\SAS Temporary Files\_TD11852_NUTVDIWIN104-34_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.default / file="C:\Users\bkris2\AppData\Local\Temp\SAS Temporary Files\_TD11852_NUTVDIWIN104-34_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\bkris2\AppData\Local\Temp\SAS Temporary Files\_TD11852_NUTVDIWIN104-34_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   merge tempdat6 tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length list $ 200;
MPRINT(PLOTIT):   retain list ' ';
MPRINT(PLOTIT):   set tempdat3 end=eof;
MPRINT(PLOTIT):   if w eq 'gaxis' then do;
MPRINT(PLOTIT):   if symget('framecol') eq ' ' then call symputx('framecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gtext' then do;
MPRINT(PLOTIT):   if symget('titlecol') eq ' ' then call symputx('titlecol', c, 'L');
MPRINT(PLOTIT):   if symget('tickcol') eq ' ' then call symputx('tickcol' , c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'glabel' then do;
MPRINT(PLOTIT):   if symget('labelcol') eq ' ' then call symputx('labelcol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gcfit' then do;
MPRINT(PLOTIT):   if symget('curvecol') eq ' ' then call symputx('curvecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not 0 and w eq 'gwalls' and symget('cframe') eq ' ' and c ne '_undef_' then call symputx('cframe', c, 'L');
MPRINT(PLOTIT):   else if 1 and w eq 'gborderlines' then call symput('border', c);
MPRINT(PLOTIT):   if 1 and w =: 'gcdata' then do;
MPRINT(PLOTIT):   if n = 1 then n = .;
MPRINT(PLOTIT):   else if n = . then n = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(n);
MPRINT(PLOTIT):   list = trim(list) || ' ' || c;
MPRINT(PLOTIT):   list = compbl(list);
MPRINT(PLOTIT):   if eof then call symput('colors', compbl(list));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------more initializations------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length name symvar $ 70 color framecol titlecol labelcol tickcol curvecol monochro font size name1-name2 tsize $ 12 anele anele2 $ 16 word $ 24 list list2 datatype types colors symbols symcol symtype symfont symsize labcol labfont
labsize britypes rgbtypes exttypes $ 500;
MPRINT(PLOTIT):   *------finalize border, border color------;
MPRINT(PLOTIT):   word = symget('border');
MPRINT(PLOTIT):   if word eq '1' then word = "black";
MPRINT(PLOTIT):   else if word eq '0' then word = ' ';
MPRINT(PLOTIT):   call symput('border', trim(word));
MPRINT(PLOTIT):   *------set default symbol variable------;
MPRINT(PLOTIT):   symvar = symget('symvar');
MPRINT(PLOTIT):   *------list of valid DATATYPE= values------;
MPRINT(PLOTIT):   array dts[15] corresp mca row column mdpref mdpref2 vector ideal mds curve curve2 function contour square symbol;
MPRINT(PLOTIT):   *------22 lists, 10 lists of ntypes elements, 9 single-element lists 3 longer lists------;
MPRINT(PLOTIT):   listn = 22;
MPRINT(PLOTIT):   listm = 10;
MPRINT(PLOTIT):   listo = 19;
MPRINT(PLOTIT):   array vars[22] $ types colors symbols symcol symtype symfont symsize labcol labfont labsize color framecol titlecol labelcol tickcol curvecol monochro font cframe britypes rgbtypes exttypes;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------check method------;
MPRINT(PLOTIT):   name = symget('method');
MPRINT(PLOTIT):   word = lowcase(compress(name,' 2'));
MPRINT(PLOTIT):   if not (word in ('gplot' 'print' 'plot' 'none')) then do;
MPRINT(PLOTIT):   put 'ERROR: METHOD=' name 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   call symput('method',trim(word));
MPRINT(PLOTIT):   if word = 'plot' then call symput('looklist', '1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------convert binary options ------;
MPRINT(PLOTIT):   list = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('diag' ,put(index(list,'diag') > 0,1.));
MPRINT(PLOTIT):   call symput('expand' ,put(index(list,'expand') > 0,1.));
MPRINT(PLOTIT):   call symput('closebord',put(index(list,'close') > 0,1.));
MPRINT(PLOTIT):   call symput('center' ,put(index(list,'nocenter') = 0,1.));
MPRINT(PLOTIT):   call symput('clip' ,put(index(list,'noclip') = 0,1.));
MPRINT(PLOTIT):   call symput('delete' ,put(index(list,'nodelete') = 0,1.));
MPRINT(PLOTIT):   call symput('linetext' ,put(index(list,'textline') = 0,1.));
MPRINT(PLOTIT):   call symput('squarplt' ,put(index(list,'square') > 0,1.));
MPRINT(PLOTIT):   print = (index(list,'noprint') = 0);
MPRINT(PLOTIT):   call symput('legend' ,put(index(list,'nolegend') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('history',put(index(list,'nohistory') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('code' ,put(index(list,'nocode') = 0 and print,1.));
MPRINT(PLOTIT):   *------make sure all options are recognized------;
MPRINT(PLOTIT):   list2 = 'noborder border close diag expand noclip nocode nodelete ' || 'nocenter noback nohistory nolegend noprint square textline';
MPRINT(PLOTIT):   do i = 1 to 13;
MPRINT(PLOTIT):   word = scan(list2,i);
MPRINT(PLOTIT):   j = index(list,trim(word));
MPRINT(PLOTIT):   if j then substr(list,j,length(word)) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: The following options are not recognized: ' list +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check INTERPOL=------;
MPRINT(PLOTIT):   list = lowcase(symget('interpol'));
MPRINT(PLOTIT):   call symput('intrtick',put((index(list,'tick') or not (index(list,'ls') or index(list,'no'))),1.));
MPRINT(PLOTIT):   call symput('intrls' ,put((index(list,'ls') or not index(list,'no')),1.));
MPRINT(PLOTIT):   call symput('hlogscal',put((index(list,'hlog') > 0),1.));
MPRINT(PLOTIT):   call symput('vlogscal',put((index(list,'vlog') > 0),1.));
MPRINT(PLOTIT):   *------parse the DATATYPE= option------;
MPRINT(PLOTIT):   datatype = symget('datatype');
MPRINT(PLOTIT):   list = datatype;
MPRINT(PLOTIT):   do i = 1 to 15;
MPRINT(PLOTIT):   call vname(dts[i],name);
MPRINT(PLOTIT):   j = index(datatype,trim(upcase(name)));
MPRINT(PLOTIT):   if j then substr(list,j,length(name)) = ' ';
MPRINT(PLOTIT):   dts[i] = (j ne 0);
MPRINT(PLOTIT):   call symput(name,compress(put(dts[i],1.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list = compress(list,'0123456789.e+-');
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid DATATYPE=' datatype +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------get the lists that must be quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   vars[i] = symget(name);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symtype = lowcase(symtype);
MPRINT(PLOTIT):   britypes = lowcase(britypes);
MPRINT(PLOTIT):   rgbtypes = lowcase(rgbtypes);
MPRINT(PLOTIT):   exttypes = lowcase(exttypes);
MPRINT(PLOTIT):   *-----make sure these are set------;
MPRINT(PLOTIT):   if font = ' ' then font = 'swiss';
MPRINT(PLOTIT):   tsize = symget('tsize');
MPRINT(PLOTIT):   if tsize = ' ' then do;
MPRINT(PLOTIT):   tsize = '1';
MPRINT(PLOTIT):   call symput('tsize','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------process DATATYPE= option------;
MPRINT(PLOTIT):   if datatype ne ' ' then do;
MPRINT(PLOTIT):   if contour then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' contour';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' solid';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' contour';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' contour';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if square then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' U';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' square';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' marker';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' square';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' square';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if function then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' function';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' function';
MPRINT(PLOTIT):   name = symget('labelvar');
MPRINT(PLOTIT):   if name = ' ' then call symput('labelvar','_blank_');
MPRINT(PLOTIT):   if symvar = ' ' then put 'WARNING: Null symbol variable ' 'specified with ' 'DATATYPE=function.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref or vector or ideal then types = trim(types) || ' SCORE';
MPRINT(PLOTIT):   if mdpref or vector or ideal or symbol then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if corresp or row or mca or column then do;
MPRINT(PLOTIT):   types = trim(types) || ' VAR OBS SUPVAR SUPOBS';
MPRINT(PLOTIT):   if row then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " '' * * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if column then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol vector symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " * '' * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' * * * *';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symsize = trim(symsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   symfont = trim(symfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   labsize = trim(labsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   labfont = trim(labfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref then do;
MPRINT(PLOTIT):   types = trim(types) || ' CORR';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref2 then labsize = trim(labsize) || ' ' || compress(put(input(tsize, ?? 32.) * 0.75, best8.));
MPRINT(PLOTIT):   else labsize = trim(labsize) || ' 0';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   size = compress(put(input(tsize,?? 32.) * 1.5, best8.));
MPRINT(PLOTIT):   if vector then do;
MPRINT(PLOTIT):   types = trim(types) || ' MCOEFFI';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ideal then do;
MPRINT(PLOTIT):   types = trim(types) || ' MPOINT';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' +';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' circle';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mds then do;
MPRINT(PLOTIT):   types = trim(types) || ' CONFIG';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (mds or corresp or mca or row or column or mdpref or mdpref2 or vector or ideal) and symget('label') = ' ' then call symput('label','typical');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ in case these were only specified in the symtype------;
MPRINT(PLOTIT):   if index(symtype, 'contour' ) then call symput('contour' , '1');
MPRINT(PLOTIT):   if index(symtype, 'square' ) then call symput('square' , '1');
MPRINT(PLOTIT):   *------set colors, other defaults------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   if colors = ' ' then colors = color;
MPRINT(PLOTIT):   if framecol = ' ' then framecol = color;
MPRINT(PLOTIT):   if titlecol = ' ' then titlecol = color;
MPRINT(PLOTIT):   if labelcol = ' ' then labelcol = color;
MPRINT(PLOTIT):   if tickcol = ' ' then tickcol = color;
MPRINT(PLOTIT):   if curvecol = ' ' then curvecol = color;
MPRINT(PLOTIT):   if symtype = ' ' then symtype = 'symbol';
MPRINT(PLOTIT):   if symsize = ' ' then symsize = tsize;
MPRINT(PLOTIT):   if symfont = ' ' then symfont = font;
MPRINT(PLOTIT):   if labsize = ' ' then labsize = tsize;
MPRINT(PLOTIT):   if labfont = ' ' then labfont = font;
MPRINT(PLOTIT):   if exttypes = ' ' then exttypes = "''";
MPRINT(PLOTIT):   if rgbtypes = ' ' then rgbtypes = "''";
MPRINT(PLOTIT):   labcol = trim(labcol) || ' ' || colors;
MPRINT(PLOTIT):   symcol = trim(symcol) || ' ' || colors;
MPRINT(PLOTIT):   *------default symbols when unspecified------;
MPRINT(PLOTIT):   if index(symtype, 'symbol') and symvar eq '_symbol_' and symbols = ' ' then do;
MPRINT(PLOTIT):   word = scan(symtype, 1, ' ');
MPRINT(PLOTIT):   do i = 1 to 500 while(word ne ' ');
MPRINT(PLOTIT):   if index(word, 'symbol') then symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   else symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   word = scan(symtype, i + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symbols = ' ' then symbols = "''";
MPRINT(PLOTIT):   *------count the number of types------;
MPRINT(PLOTIT):   if types = ' ' then types = "''";
MPRINT(PLOTIT):   do until(word eq ' ');
MPRINT(PLOTIT):   ntypes + 1;
MPRINT(PLOTIT):   word = scan(types, ntypes + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   holdntyp = ntypes;
MPRINT(PLOTIT):   *------output number of observation types------;
MPRINT(PLOTIT):   call symput('ntypes',compress(put(ntypes,3.)));
MPRINT(PLOTIT):   *------output lists, make sure they are quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   if i > listm then ntypes = 1;
MPRINT(PLOTIT):   if i > listo then ntypes = 200;
MPRINT(PLOTIT):   link qlist;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   ntypes = holdntyp;
MPRINT(PLOTIT):   *------output sizes for squares------;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   word = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(word, 'square') then call symput('sizsquar', compress(scan(symsize, i, ' '), " '"||'"'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for constant symvar with vectors------;
MPRINT(PLOTIT):   symcon = (symvar = ' ' or (compress(symvar,"'"||'"') ne symvar));
MPRINT(PLOTIT):   if symcon then do;
MPRINT(PLOTIT):   i = length(symvar);
MPRINT(PLOTIT):   if i > 3 then do;
MPRINT(PLOTIT):   word = upcase(substr(symvar, i - 1));
MPRINT(PLOTIT):   if word in ('"N', "'N") then symcon = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('symcon',put(symcon,1.));
MPRINT(PLOTIT):   if symcon and index(symtype,'vector') then do;
MPRINT(PLOTIT):   put 'ERROR: Constant SYMVAR= is not allowed with vectors.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse RGBROUND= option------;
MPRINT(PLOTIT):   list = symget('rgbround');
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   do i = 1 to 4;
MPRINT(PLOTIT):   name = scan(list, i, ' ');
MPRINT(PLOTIT):   num = input(name, ?? 32.);
MPRINT(PLOTIT):   if nmiss(num) then num = .;
MPRINT(PLOTIT):   if i > 1 and num <= 0 then num = 1;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || compress(put(num,best8.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('rgbround',trim(left(list2)));
MPRINT(PLOTIT):   *------anything specified for the BRIGHT= option?------;
MPRINT(PLOTIT):   if symget('bright') = ' ' then do;
MPRINT(PLOTIT):   britypes = ' ';
MPRINT(PLOTIT):   call symput('britypes', compress(britypes));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------anything specified for the PAINT= option?------;
MPRINT(PLOTIT):   list = left(symget('paint'));
MPRINT(PLOTIT):   if symget('paintvar') = ' ' then do;
MPRINT(PLOTIT):   rgbtypes = ' ';
MPRINT(PLOTIT):   call symput('rgbtypes', compress(rgbtypes));
MPRINT(PLOTIT):   if contour then put 'WARNING: PAINT= was not specified ' 'with a contour plot.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse PAINT= option------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------count list elements------;
MPRINT(PLOTIT):   do n = 1 to 500 until(name2 = ' ');
MPRINT(PLOTIT):   name2 = scan(list,n,' ');
MPRINT(PLOTIT):   if n(input(name2,?? 32.)) then name2 = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   n = n - 1;
MPRINT(PLOTIT):   *------set default, when only a variable name is specified------;
MPRINT(PLOTIT):   if n < 1 then do;
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   list = 'blue magenta red';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if n < 2 then do;
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   name2 = scan(list,1,' ');
MPRINT(PLOTIT):   list = compress(name2) || ' ' || compress(name2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('paintcol', trim(list));
MPRINT(PLOTIT):   *------store, check number of list elements------;
MPRINT(PLOTIT):   call symput('paintnum',compress(put(n,3.)));
MPRINT(PLOTIT):   *------table of recognized colors and their hex rgb------;
MPRINT(PLOTIT):   allcols = 'BLACK--BLUE---BROWN--GRAY---GREEN--OLIVE--ORANGE-' || 'PINK---PURPLE-RED----VIOLET-WHITE--YELLOW-MAGENTA' || 'CYAN---';
MPRINT(PLOTIT):   hexcols = '000000 0000ff a05000 808080 00ff00 2a8307 ff8000 ' || 'ff0080 703070 ff0000 b090d0 ffffff ffff00 ff00ff ' || '00ffff ';
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   *------construct list of (decimal) RGB values------;
MPRINT(PLOTIT):   do j = 1 to 3;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   color = upcase(scan(list, i, ' '));
MPRINT(PLOTIT):   k = index(allcols,trim(color));
MPRINT(PLOTIT):   *------grab hex code for name, or parse CXrrggbb------;
MPRINT(PLOTIT):   if k then name1 = substr(hexcols,k + (j - 1) * 2,2);
MPRINT(PLOTIT):   else name1 = substr(color ,(j - 1) * 2 + 3,2);
MPRINT(PLOTIT):   *------check for validity------;
MPRINT(PLOTIT):   num = input(name1,?? hex2.);
MPRINT(PLOTIT):   if nmiss(num) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= color of ' color 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 4;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = compress(put(num,3.));
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 3;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------build list------;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || trim(name1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store line segment end points in list if specified------;
MPRINT(PLOTIT):   list2 = left(list2);
MPRINT(PLOTIT):   name1 = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   name1 = scan(list,n + i,' ');
MPRINT(PLOTIT):   if nmiss(input(name1,?? 32.)) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value of ' name1 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || name1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = scan(list,2 * n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store processed PAINT= list------;
MPRINT(PLOTIT):   call symput('paint',trim(list2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if input(symget('legend'), ?? 32.) then do;
MPRINT(PLOTIT):   awidth = 9;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = scan(types, i, ' ');
MPRINT(PLOTIT):   awidth = max(awidth, length(anele) + 1);
MPRINT(PLOTIT):   awidth = max(awidth, length(scan(symbols, i, ' ')) + 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   cols = min(15 + awidth * ntypes, 256);
MPRINT(PLOTIT):   cols = 15 + floor((cols - 15) / awidth) * awidth;
MPRINT(PLOTIT):   m = floor((256 - cols) / 2);
MPRINT(PLOTIT):   cols = cols - 1;
MPRINT(PLOTIT):   put / +m 'Types Legend  |' @@;
MPRINT(PLOTIT):   list = types;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   substr(list, 15, 1) = '+';
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   put +m 'Symbol Types  |' @@;
MPRINT(PLOTIT):   list = symtype;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbols       |' @@;
MPRINT(PLOTIT):   list = symbols;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Colors |' @@;
MPRINT(PLOTIT):   list = symcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Label  Colors |' @@;
MPRINT(PLOTIT):   list = labcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Symbol Sizes  |' @@;
MPRINT(PLOTIT):   list = symsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Sizes  |' @@;
MPRINT(PLOTIT):   list = labsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Fonts  |' @@;
MPRINT(PLOTIT):   list = symfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Fonts  |' @@;
MPRINT(PLOTIT):   list = labfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legend: *------print legend------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legendc: *------print legend for colors------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele2 = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(rgbtypes, trim(anele2)) or index(britypes, trim(anele2)) then anele = ' ';
MPRINT(PLOTIT):   else anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   printele: *------print one table element------;
MPRINT(PLOTIT):   j = j + 1;
MPRINT(PLOTIT):   if (15 + awidth * j) > 256 then do;
MPRINT(PLOTIT):   put / +(m+14) '|' @@;
MPRINT(PLOTIT):   j = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put @(m + 17 + (j - 1) * awidth) anele $ @@;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   qlist: *------quote the elements of a list------;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   list = vars[i];
MPRINT(PLOTIT):   charv = not index(upcase(name),'SIZE');
MPRINT(PLOTIT):   word = scan(list,1,' ');
MPRINT(PLOTIT):   do n = 1 to ntypes while(word ne ' ');
MPRINT(PLOTIT):   if charv then do;
MPRINT(PLOTIT):   word = compress("'" || compress(word,"'"||'"') || "'");
MPRINT(PLOTIT):   if not index(substr(word,2),"'") then do;
MPRINT(PLOTIT):   put 'ERROR: The list element ' name +(-1) '=' word 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (length(list2) + length(word)) >= 500 then do;
MPRINT(PLOTIT):   put 'ERROR: The list ' name +(-1) '=' list2 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || word;
MPRINT(PLOTIT):   word = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if word = ' ' and i <= listm then word = scan(list2,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput(name,trim(left(list2)));
MPRINT(PLOTIT):   vars[i] = list2;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
 
                                                                                                                    Types Legend  | CONFIG
                                                                                                                    --------------+---------
                                                                                                                    Symbol Types  | circle
                                                                                                                    Symbols       | *
                                                                                                                    Symbol Colors | cx000000
                                                                                                                    Label  Colors | cx000000
                                                                                                                    Symbol Sizes  | 1
                                                                                                                    Label  Sizes  | 1
                                                                                                                    Symbol Fonts  | none
                                                                                                                    Label  Fonts  | none
                                                                                                                    ------------------------
MPRINT(PLOTIT):   *------inertias for correspondence analysis variable labels------;
MPRINT(PLOTIT):   *------check, set remaining variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   length __name setl labelvar tvname symvar paintvar upname $ 70;
MPRINT(PLOTIT):   retain setl labelvar tvname symvar paintvar ' ' paintfou typefoun 0 ok 1;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   *------get current names------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   tvname = dequote(symget('typevar'));
MPRINT(PLOTIT):   labelvar = dequote(symget('labelvar'));
MPRINT(PLOTIT):   paintvar = dequote(symget('paintvar'));
MPRINT(PLOTIT):   if 0 then symvar = _symbol_;
MPRINT(PLOTIT):   else symvar = dequote(symget('symvar'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------is the symbol variable numeric or character?------;
MPRINT(PLOTIT):   if not 0 and upname = upcase(symvar) and type = 1 then call symput('symnumer','1');
MPRINT(PLOTIT):   *------find _type_ variable------;
MPRINT(PLOTIT):   if upname = upcase(tvname) then typefoun = 1;
MPRINT(PLOTIT):   *------find PAINT= variable------;
MPRINT(PLOTIT):   if upname = upcase(paintvar) and type = 1 then paintfou = 1;
MPRINT(PLOTIT):   *------find default label variable name------;
MPRINT(PLOTIT):   else if type = 2 and (setl = ' ' or upname ne '_TYPE_') then setl = name;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   if labelvar = ' ' and setl ne ' ' then labelvar = setl;
MPRINT(PLOTIT):   if labelvar = ' ' then labelvar = '_blank_';
MPRINT(PLOTIT):   __name = labelvar;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   call symput('labelvar', trim(__name));
MPRINT(PLOTIT):   *------assorted error checking------;
MPRINT(PLOTIT):   if not typefoun and tvname ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: TYPEVAR=' tvname 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not typefoun and input(symget('typespec'), ?? 32.) then do;
MPRINT(PLOTIT):   put 'ERROR: A type variable must be available ' 'when TYPES= ' 'is specified.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (paintvar = ' ' or paintfou) then do;
MPRINT(PLOTIT):   put 'ERROR: A numeric PAINT=' paintvar 'variable was not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to __len;
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find minima, maxima------;
MPRINT(PLOTIT):   proc means data=preproc noprint;
MPRINT(PLOTIT):   output out=tempdat1 max(Dim2 Dim1 )=vmax hmax min(Dim2 Dim1 )=vmin hmin;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set goptions------;
MPRINT(PLOTIT):   goptions nodisplay device=PNG cback=white device=GIF;
MPRINT(PLOTIT):   *------check some parameters for valid values, set up others------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length c $ 1 vplotvar hplotvar labelvar $ 70 opt $ 8 str place vecheadr vecheadw tinc device $ 12 outward search vechead ls $ 32 label plotreq plotopts upopts pl list labely labelx label $ 500 ind1 ind2 $ 35;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   call symput('somedata','0');
MPRINT(PLOTIT):   set tempdat1(drop=_type_);
MPRINT(PLOTIT):   call symput('somedata','1');
MPRINT(PLOTIT):   call symput('vinter', '.');
MPRINT(PLOTIT):   call symput('hinter', '.');
MPRINT(PLOTIT):   call symput('hslope', '.');
MPRINT(PLOTIT):   call symput('vslope', '.');
MPRINT(PLOTIT):   *------check missings------;
MPRINT(PLOTIT):   if n(vmin,hmin,vmax,hmax) < 4 then do;
MPRINT(PLOTIT):   put 'ERROR: At least one variable is all missing.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for nonpositive data with log scales------;
MPRINT(PLOTIT):   if (vmin <= 0 and 0) or (hmin <= 0 and 0) then do;
MPRINT(PLOTIT):   put "ERROR: Nonpositive data with INTERPOL=yes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store extend values------;
MPRINT(PLOTIT):   list = symget('extend');
MPRINT(PLOTIT):   call symput('close',compress(put(index(list,'close'),best3.)));
MPRINT(PLOTIT):   if nmiss(input(scan(list,1,' '),?? 32.)) then call symput('extendl',' ');
MPRINT(PLOTIT):   else call symput('extendl',scan(list,1,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,2,' '),?? 32.)) then call symput('extendr',' ');
MPRINT(PLOTIT):   else call symput('extendr',scan(list,2,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,3,' '),?? 32.)) then call symput('extendt',' ');
MPRINT(PLOTIT):   else call symput('extendt',scan(list,3,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,4,' '),?? 32.)) then call symput('extendb',' ');
MPRINT(PLOTIT):   else call symput('extendb',scan(list,4,' '));
MPRINT(PLOTIT):   *------make sure PAINT= minimum, maximum are stored------;
MPRINT(PLOTIT):   call symput('rgbround', trim(symget('rgbround')) || ' .');
MPRINT(PLOTIT):   *------compute (possibly adjusted) range------;
MPRINT(PLOTIT):   isavec = index(symget('symtype'),'vector');
MPRINT(PLOTIT):   if isavec then do;
MPRINT(PLOTIT):   vmin = min(0,vmin);
MPRINT(PLOTIT):   hmin = min(0,hmin);
MPRINT(PLOTIT):   vmax = max(0,vmax);
MPRINT(PLOTIT):   hmax = max(0,hmax);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   vmax = max(vmax,hmax);
MPRINT(PLOTIT):   hmax = vmax;
MPRINT(PLOTIT):   vmin = min(vmin,hmin);
MPRINT(PLOTIT):   hmin = vmin;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 and not 0 then range = vmax - vmin;
MPRINT(PLOTIT):   else if 0 and not 0 then range = hmax - hmin;
MPRINT(PLOTIT):   else range = max(vmax - vmin, hmax - hmin);
MPRINT(PLOTIT):   range = max(1e4 * 1e-8,range);
MPRINT(PLOTIT):   *------default increment, minima, maxima------;
MPRINT(PLOTIT):   inc = input(symget('inc'),?? 32.);
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   inc = 10 ** ceil(log10(range) - 1.0);
MPRINT(PLOTIT):   if range / inc >= 7.5 then inc = inc * 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   tinc = compress(put(inc,best12.));
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   put 'ERROR: Input data set is empty, constant, or corrupt.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('inc' ,trim(tinc));
MPRINT(PLOTIT):   call symput('hmax',compress(put(hmax,best15.)));
MPRINT(PLOTIT):   call symput('hmin',compress(put(hmin,best15.)));
MPRINT(PLOTIT):   call symput('vmax',compress(put(vmax,best15.)));
MPRINT(PLOTIT):   call symput('vmin',compress(put(vmin,best15.)));
MPRINT(PLOTIT):   *------construct plot request------;
MPRINT(PLOTIT):   vplotvar = symget('vplotvar');
MPRINT(PLOTIT):   hplotvar = symget('hplotvar');
MPRINT(PLOTIT):   plotopts = symget('plotopts');
MPRINT(PLOTIT):   labelvar = symget('labelvar');
MPRINT(PLOTIT):   upopts = upcase(plotopts);
MPRINT(PLOTIT):   plotreq = trim(vplotvar) || ' * ' || trim(hplotvar) || ' $ ' || trim(labelvar) || ' = _symbol_';
MPRINT(PLOTIT):   *------check for HREF= VREF= options------;
MPRINT(PLOTIT):   if index(upopts,'HREF') or index(upopts,'VREF') then put 'WARNING: HREF= and VREF= PLOT options are ignored.  ' 'Specify ' 'them as ' 'macro options ' 'instead.';
MPRINT(PLOTIT):   *------see if we need to generate a placement list------;
MPRINT(PLOTIT):   pl = ' ';
MPRINT(PLOTIT):   i = index(upopts,'PLACE');
MPRINT(PLOTIT):   if i then do;
MPRINT(PLOTIT):   pl = substr(plotopts,i);
MPRINT(PLOTIT):   if i > 1 then plotopts = substr(plotopts,1,i - 1);
MPRINT(PLOTIT):   else plotopts = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle horizontal ticks if not already specified------;
MPRINT(PLOTIT):   c = 'h';
MPRINT(PLOTIT):   maxim = hmax;
MPRINT(PLOTIT):   minim = hmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------handle vertical ticks if not already specified------;
MPRINT(PLOTIT):   c = 'v';
MPRINT(PLOTIT):   maxim = vmax;
MPRINT(PLOTIT):   minim = vmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------outward option------;
MPRINT(PLOTIT):   outward = symget('outward');
MPRINT(PLOTIT):   if outward ne 'none' then do;
MPRINT(PLOTIT):   if outward = ' ' and isavec then outward = symget('symdummy');
MPRINT(PLOTIT):   if outward ne ' ' then plotopts = trim(plotopts) || ' outward="' || compress(outward,"'"||'" ') || '"';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------box option------;
MPRINT(PLOTIT):   plotopts = trim(left(plotopts)) || ' box';
MPRINT(PLOTIT):   *------reference lines------;
MPRINT(PLOTIT):   list = symget('href');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' href=' || list;
MPRINT(PLOTIT):   list = symget('vref');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' vref=' || list;
MPRINT(PLOTIT):   *------set up vector heads------;
MPRINT(PLOTIT):   vechead = symget('vechead');
MPRINT(PLOTIT):   vecheadr = scan(vechead,1,' ');
MPRINT(PLOTIT):   vecheadw = scan(vechead,2,' ');
MPRINT(PLOTIT):   if vecheadw = ' ' then vecheadr = ' ';
MPRINT(PLOTIT):   *------determine graphics area------;
MPRINT(PLOTIT):   rc1 = ginit();
MPRINT(PLOTIT):   call gask('maxdisp',units,xmax,ymax,xpix,ypix,rc2);
MPRINT(PLOTIT):   call gask('device',device,rc3);
MPRINT(PLOTIT):   rc4 = gterm();
MPRINT(PLOTIT):   if rc1 or rc2 or rc3 or rc4 then do;
MPRINT(PLOTIT):   put 'ERROR: GASK call for XMAX= and YMAX= failed.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = xmax * 100;
MPRINT(PLOTIT):   ymax = ymax * 100;
MPRINT(PLOTIT):   if symget('unit') = 'in' then do;
MPRINT(PLOTIT):   xmax = xmax / 2.54;
MPRINT(PLOTIT):   ymax = ymax / 2.54;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = floor(xmax * 100) / 100;
MPRINT(PLOTIT):   ymax = floor(ymax * 100) / 100;
MPRINT(PLOTIT):   *------max horizontal graph size------;
MPRINT(PLOTIT):   if symget('xmax') = ' ' then call symput('xmax',compress(put(xmax,9.2)));
MPRINT(PLOTIT):   *-------max vertical graph size------;
MPRINT(PLOTIT):   if symget('ymax') = ' ' then call symput('ymax',compress(put(ymax,9.2)));
MPRINT(PLOTIT):   *------construct typical label------;
MPRINT(PLOTIT):   label = symget('label');
MPRINT(PLOTIT):   if label = 'typical' then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar,length(vplotvar),1);
MPRINT(PLOTIT):   ind2 = substr(hplotvar,length(hplotvar),1);
MPRINT(PLOTIT):   if not ('1' <= ind1 <= '9' and '1' <= ind2 <= '9') then label = ' ';
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   do i = length(vplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(vplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   do i = length(hplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(hplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind2 = substr(hplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------for correspondence analysis, ------;
MPRINT(PLOTIT):   *------put inertia percentages in labels------;
MPRINT(PLOTIT):   if labelx = ' ' then do;
MPRINT(PLOTIT):   labely = "Dimension " || compress(ind1);
MPRINT(PLOTIT):   labelx = "Dimension " || compress(ind2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   label = 'label ' || symget('vplotvar') || " = '" || trim(labely) || "' " || symget('hplotvar') || " = '" || trim(labelx) || "'";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------simple, imperfect, label statement check------;
MPRINT(PLOTIT):   label = left(label);
MPRINT(PLOTIT):   if label ne ' ' and compress(label,"'"||'="') = label then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid LABEL statement, LABEL=' label +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   str = upcase(scan(label,1));
MPRINT(PLOTIT):   if str ne 'LABEL' and str ne ' ' then label = 'label ' || label;
MPRINT(PLOTIT):   call symput('label' ,trim(label));
MPRINT(PLOTIT):   *------make sure we have britypes with BRIGHT= specified------;
MPRINT(PLOTIT):   if symget('bright') ne ' ' and symget('britypes') = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Null BRITYPES= is not ' 'permitted ' 'with ' "BRIGHT=.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up search parameters------;
MPRINT(PLOTIT):   ls = symget('ls');
MPRINT(PLOTIT):   if index(ls,'search') then do;
MPRINT(PLOTIT):   ls = scan(ls,1,' ');
MPRINT(PLOTIT):   if ls = 'compute' then search = 'compute';
MPRINT(PLOTIT):   else search = 'ls';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ls = ' ' or ls = 'compute' then ls = '.';
MPRINT(PLOTIT):   if pl = ' ' then place = symget('place');
MPRINT(PLOTIT):   else place = '.';
MPRINT(PLOTIT):   if index(place,'search') then do;
MPRINT(PLOTIT):   search = trim(search) || ' place';
MPRINT(PLOTIT):   place = scan(place,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if place = ' ' then place = '.';
MPRINT(PLOTIT):   *------see if we should store device------;
MPRINT(PLOTIT):   list = upcase(symget('gopprint'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopplot'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts2'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   *------output generated macro variables------;
MPRINT(PLOTIT):   call symput('search' ,trim(search));
MPRINT(PLOTIT):   call symput('ls' ,trim(ls));
MPRINT(PLOTIT):   call symput('place' ,trim(place));
MPRINT(PLOTIT):   call symput('plotopts',trim(plotopts));
MPRINT(PLOTIT):   call symput('plotreq' ,trim(plotreq));
MPRINT(PLOTIT):   call symput('pl' ,trim(pl));
MPRINT(PLOTIT):   call symput('vecheadr',trim(vecheadr));
MPRINT(PLOTIT):   call symput('vecheadw',trim(vecheadw));
MPRINT(PLOTIT):   call symput('device' ,trim(device));
MPRINT(PLOTIT):   *------check some parameters for valid values------;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadr;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadw;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='INC';
MPRINT(PLOTIT):   str=tinc;
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BIPLOT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='SYMLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 22;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='OFFSET';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TICKLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='ANTIIDEA';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -2;
MPRINT(PLOTIT):   max= 2;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CIRSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-4;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CURSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 20;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VTOH';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 3;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAKEFIT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='XMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='YMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='PS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 15;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXITER';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXOKPEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1e9;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BRIGHT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 5;
MPRINT(PLOTIT):   max= 250;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDL';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDR';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDB';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LSINC';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LS';
MPRINT(PLOTIT):   str=ls;
MPRINT(PLOTIT):   min= 64;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   if ls ne '.' then link checkit;
MPRINT(PLOTIT):   opt='PLACE';
MPRINT(PLOTIT):   str=place;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 13;
MPRINT(PLOTIT):   if place ne '.' then link checkit;
MPRINT(PLOTIT):   list = compress(symget('tickaxes'));
MPRINT(PLOTIT):   call symput('tickaxes',trim(list));
MPRINT(PLOTIT):   if compress(list,'LRTBlrtbFh') ne ' ' then do;
MPRINT(PLOTIT):   put "ERROR: TICKAXES=LBFh is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('frame',put(indexc(list,'RTrtF') > 0,1.));
MPRINT(PLOTIT):   if not (symget('unit') in ('in' 'cm')) then do;
MPRINT(PLOTIT):   put "ERROR: UNIT=in is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if scan(symget('lsizes'),5,' ') = ' ' then do;
MPRINT(PLOTIT):   put "ERROR: LSIZES=1 1 1 1 1 must specify five sizes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   checkit: *------check parameter range------;
MPRINT(PLOTIT):   if str ne ' ' then do;
MPRINT(PLOTIT):   param = input(str,?? 32.);
MPRINT(PLOTIT):   if not (min <= param <= max) then do;
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   put 'ERROR: ' opt +(-1) '=' str 'is not valid.  ' 'The valid range is ' min '<= ' opt '<= ' max +(-1) '.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   maketick: *------handle ticks if not already specified------;
MPRINT(PLOTIT):   minor = input(symget(c ||'minor'),?? 32.);
MPRINT(PLOTIT):   if index(upopts,upcase(c) || 'AXIS') = 0 then do;
MPRINT(PLOTIT):   if maxim > 0 then logmax = ceil(log10(maxim));
MPRINT(PLOTIT):   else logmax = .;
MPRINT(PLOTIT):   if minim > 0 then logmin = floor(log10(minim));
MPRINT(PLOTIT):   else logmin = .;
MPRINT(PLOTIT):   *------major ticks for log scale------;
MPRINT(PLOTIT):   if logscal and n(logmin) then do;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || ' ' || c || 'axis=';
MPRINT(PLOTIT):   do i = logmin to logmax;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || '1e' || compress(put(i,4.)) || ',';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   plotopts = substr(plotopts,1,length(plotopts) - 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ordinary major ticks------;
MPRINT(PLOTIT):   else plotopts = trim(plotopts) || ' ' || c || 'axis=by ' || tinc;
MPRINT(PLOTIT):   *------minor ticks------;
MPRINT(PLOTIT):   if minor >= 1 then do;
MPRINT(PLOTIT):   if n(logmax) then do;
MPRINT(PLOTIT):   if logscal then do;
MPRINT(PLOTIT):   maxim = logmax;
MPRINT(PLOTIT):   minim = logmin;
MPRINT(PLOTIT):   i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else i = inc;
MPRINT(PLOTIT):   maxim = ceil(2 + maxim / i) * i;
MPRINT(PLOTIT):   minim = floor(minim / i - 2) * i;
MPRINT(PLOTIT):   call symput(c || 'minor', compress(put(minim,best12.)) || ' to ' || compress(put(maxim,best12.)) || ' by ' || compress(put(i / (minor + 1),best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------number of minor ticks only allowed with inc is known------;
MPRINT(PLOTIT):   else if n(minor) then do;
MPRINT(PLOTIT):   put 'WARNING: Minor ticks are suppressed when HAXIS= ' 'or VAXIS= ' 'is specified ' 'on PLOTOPTS=.';
MPRINT(PLOTIT):   call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
WARNING: The SAS/GRAPH product with which the procedure is associated will be expiring soon, and is currently in warning mode to indicate this upcoming expiration. Please run PROC SETINIT to obtain more information on your warning period.
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *========================preprocessing of data========================;
MPRINT(PLOTIT):   *------preprocess the input data set------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length _symbol_ $ 1 __symbol $ 1 __lfont __lcolor __sfont __scolor __stype __color $ 12 __otype $ 16 __temp $ 60 __excols $ 64;
MPRINT(PLOTIT):   retain __nblank __bblank 0 __oldx __oldy . __color __excols ' ';
MPRINT(PLOTIT):   drop __nblank __bblank __dummy __mrkwrn __nconto __oldx __oldy __excols;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------set the variable labels------;
MPRINT(PLOTIT):   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
MPRINT(PLOTIT):   call label(Dim2, __temp);
MPRINT(PLOTIT):   call symput('labely',trim(__temp));
MPRINT(PLOTIT):   call label(Dim1, __temp);
MPRINT(PLOTIT):   call symput('labelx',trim(__temp));
MPRINT(PLOTIT):   drop __temp;
MPRINT(PLOTIT):   *------output x coordinates for the curve------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *------excluded colors------;
MPRINT(PLOTIT):   __excols = lowcase(symget('excolors'));
MPRINT(PLOTIT):   drop __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   retain __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   array __rou[5] __dummy __roured __rougre __roublu __roupai (-240 1 1 1 .);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up observation type variable------;
MPRINT(PLOTIT):   _type_ = repeat(' ',7);
MPRINT(PLOTIT):   *------preprocess raw data------;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   *------store label/symbol colors, sizes, fonts, types------;
MPRINT(PLOTIT):   array a__ty[1] $ 15 _temporary_ ('CONFIG');
MPRINT(PLOTIT):   __li = 1;
MPRINT(PLOTIT):   drop __li __i;
MPRINT(PLOTIT):   do __i = 1 to 1;
MPRINT(PLOTIT):   _type_ = compress(_type_);
MPRINT(PLOTIT):   __otype = _type_;
MPRINT(PLOTIT):   if _type_ = a__ty[__i] then do;
MPRINT(PLOTIT):   __li = __i;
MPRINT(PLOTIT):   __i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   array a__ls[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__ss[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__lf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__lc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__sf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__sc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__st[1] $ 12 _temporary_ ('circle');
MPRINT(PLOTIT):   array a__sy[1] $ 1 _temporary_ ('*');
MPRINT(PLOTIT):   __lsize = a__ls[__li];
MPRINT(PLOTIT):   __ssize = a__ss[__li];
MPRINT(PLOTIT):   __lfont = a__lf[__li];
MPRINT(PLOTIT):   __lcolor = a__lc[__li];
MPRINT(PLOTIT):   __sfont = a__sf[__li];
MPRINT(PLOTIT):   __scolor = a__sc[__li];
MPRINT(PLOTIT):   __stype = a__st[__li];
MPRINT(PLOTIT):   __symbol = a__sy[__li];
MPRINT(PLOTIT):   if upcase(__sfont) = 'MARKER' and upcase(__stype) = 'CONTOUR' then do;
MPRINT(PLOTIT):   __mrkwrn + 1;
MPRINT(PLOTIT):   __sfont = 'solid';
MPRINT(PLOTIT):   if __mrkwrn = 1 then put 'WARNING: The marker font is obsolete ' 'for contour ' 'plots.  The ' 'SOLID font ' 'will be ' 'used instead.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------assign specialized symbols------;
MPRINT(PLOTIT):   if symget('symvar') = '_symbol_' then do;
MPRINT(PLOTIT):   _symbol_ = __symbol;
MPRINT(PLOTIT):   if __stype in ('vector' 'circle') and _symbol_ = ' ' then _symbol_ = "#";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   _symbol_ = _symbol_;
MPRINT(PLOTIT):   __symbol = _symbol_;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------blank out labels?------;
MPRINT(PLOTIT):   if __lsize = 0 or symget('labelvar') = '_blank_' then _idvar_ = ' ';
MPRINT(PLOTIT):   *------stretch vectors------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *-------count contour observations, determine directions------;
MPRINT(PLOTIT):   if __stype = 'contour' then do;
MPRINT(PLOTIT):   __nconto + 1;
MPRINT(PLOTIT):   if __nconto = 1 then do;
MPRINT(PLOTIT):   __oldx = Dim1;
MPRINT(PLOTIT):   __oldy = Dim2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if __nconto = 2 then do;
MPRINT(PLOTIT):   call symput('hcondir',compress(put(Dim1-__oldx,best8.)));
MPRINT(PLOTIT):   call symput('vcondir',compress(put(Dim2-__oldy,best8.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('ncontour',compress(put(__nconto,best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if __color eq ' ' or index(__excols, trim(lowcase(__color))) = 0;
MPRINT(PLOTIT):   *------adjustments to preprocessed data------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   __xvar = Dim1;
MPRINT(PLOTIT):   __yvar = Dim2;
MPRINT(PLOTIT):   *------are labels all blank?------;
MPRINT(PLOTIT):   if not __nblank then do;
MPRINT(PLOTIT):   if _idvar_ ne ' ' then do;
MPRINT(PLOTIT):   __nblank = 1;
MPRINT(PLOTIT):   call symput('allblank','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------are there obs with both label and symbol blank?------;
MPRINT(PLOTIT):   if not __bblank then do;
MPRINT(PLOTIT):   if _idvar_ = ' ' and _symbol_ = ' ' then do;
MPRINT(PLOTIT):   __bblank = 1;
MPRINT(PLOTIT):   call symput('botblank','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   *------create regression data set for curve fitting------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------separate out obs that will not go through PROC PLOT------;
MPRINT(PLOTIT):   data preproc extraobs;
MPRINT(PLOTIT):   retain __listit 0;
MPRINT(PLOTIT):   length __stype $ 12;
MPRINT(PLOTIT):   *------make sure PROC PLOT scales axes based on min, max------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   __stype = 'dummy';
MPRINT(PLOTIT):   output extraobs;
MPRINT(PLOTIT):   do Dim1 = -2.733842717344, 1.7917722841955;
MPRINT(PLOTIT):   do Dim2 = -1.486144852768, 0.9861625521563;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __stype = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   if "gplot" = "plot" then output preproc;
MPRINT(PLOTIT):   else if _idvar_ = ' ' and __stype in ('vector') then output extraobs;
MPRINT(PLOTIT):   else if _idvar_ ne ' ' or not (0 or (0 and (_symbol_ = ' ' and _idvar_ = ' '))) then do;
MPRINT(PLOTIT):   if __listit = 0 then do;
MPRINT(PLOTIT):   call symput('looklist','1');
MPRINT(PLOTIT):   __listit = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else output extraobs;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find regression function------;
MPRINT(PLOTIT):   *------see if there is anything more than corners in preproc------;
MPRINT(PLOTIT):   *------initpen=0 when nothing to plot, otherwise missing ------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   if _n_ = 0 then set preproc nobs=__nobs;
MPRINT(PLOTIT):   call symput('initpen', scan('0 .', (__nobs > 4) + 1, ' '));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set up iteration parameters------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=========================create printer plot=========================;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length pl $ 200 search $ 24;
MPRINT(PLOTIT):   iternum = 0 + 1;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = .;
MPRINT(PLOTIT):   search = symget('search');
MPRINT(PLOTIT):   ispl = index(search,'place');
MPRINT(PLOTIT):   isls = index(search,'ls');
MPRINT(PLOTIT):   isco = index(search,'compute');
MPRINT(PLOTIT):   *------adjust placement list, line size------;
MPRINT(PLOTIT):   if iternum > 1 then do;
MPRINT(PLOTIT):   if ispl then place = place + 1;
MPRINT(PLOTIT):   if isls then ls = ls + 15;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if isco then ls = round(36 + 29 * iternum - 20 * log(iternum),5);
MPRINT(PLOTIT):   isls = (isls or isco);
MPRINT(PLOTIT):   *------last iteration if we cannot increment------;
MPRINT(PLOTIT):   *------the parameters any more. ------;
MPRINT(PLOTIT):   if (isls and ispl and ls >= 200 and place >= 13) or (isls and not ispl and ls >= 200) or (ispl and not isls and place >= 13) or (not ispl and not isls and not isco) then maxiter = iternum;
MPRINT(PLOTIT):   else maxiter = 15;
MPRINT(PLOTIT):   if ls > 200 then ls = 200;
MPRINT(PLOTIT):   if ls < 64 then ls = 64;
MPRINT(PLOTIT):   actualps = input(symget('ps'),?? 32.);
MPRINT(PLOTIT):   if n(actualps) = 0 then do;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then do;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if nmiss(hsize) then hsize = 8.33;
MPRINT(PLOTIT):   if nmiss(vsize) then vsize = 6.24;
MPRINT(PLOTIT):   actualps = round(ls * (vsize / (hsize * 2)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else actualps = round(10 + ls / vtoh,5);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if actualps > 200 then actualps = 200;
MPRINT(PLOTIT):   *------construct placement list------;
MPRINT(PLOTIT):   if n(place) then do;
MPRINT(PLOTIT):   if place > 13 then place = 13;
MPRINT(PLOTIT):   if place = 0 then pl = '(s=center)';
MPRINT(PLOTIT):   else pl = '(h=2 -2 : s=right left)';
MPRINT(PLOTIT):   if place = 1 then pl = trim(pl) || ' (v=1 * h=0 -1 to -2 by alt)';
MPRINT(PLOTIT):   else if place = 2 then pl = trim(pl) || ' (v=1 -1 * h=0 -1 to -5 by alt)';
MPRINT(PLOTIT):   else if place > 2 then pl = trim(pl) || ' (v=1 to 2 by alt * h=0 -1 to -10 by alt)';
MPRINT(PLOTIT):   if place > 3 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' (s=center right left * v=0 1 to ' || compress(put(place - 2,5.)) || ' by alt * h=0 -1 to ' || compress(put(-3 * (place - 2),5.)) || ' by alt * l= 1 to ' || compress(put(2 + (place - 3.5) / 3,5.)) || ')';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   pl = 'placement=(' || trim(pl) || ')';
MPRINT(PLOTIT):   if place > 4 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' penalty(7)=' || compress(put(1.5 * place,5.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('maxiter' ,compress(put(maxiter,5.)));
MPRINT(PLOTIT):   call symput('iternum' ,compress(put(iternum,5.)));
MPRINT(PLOTIT):   call symput('place' ,compress(put(place,5.)));
MPRINT(PLOTIT):   call symput('ls' ,compress(put(ls,5.)));
MPRINT(PLOTIT):   call symput('actualps',compress(put(actualps,5.)));
MPRINT(PLOTIT):   if pl ne ' ' then call symput('pl',trim(pl));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------initialize data sets because they might not be created------;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   value = .;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat4;
MPRINT(PLOTIT):   retain label symbol startposition ' ' vaxis haxis penalty lines vshift hshift length n vposition hposition 0;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options nonumber ls=65 ps=45;
The SAS System
 
MPRINT(PLOTIT):   ods exclude all;
MPRINT(PLOTIT):   proc plot nolegend formchar='|----|+|---'
data=preproc vtoh=2;
MPRINT(PLOTIT):   ods output LocateFacts(nowarn)=tempdat3
Locate(nowarn)=tempdat4 Plot=tempdat5;
MPRINT(PLOTIT):   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
haxis=by 1 vaxis=by 1 box placement=((h=2 -2 : s=right left)
(v=1 -1 * h=0 -1 to -5 by alt)) list=-1;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   label Dim2 = '#' Dim1 = '#';
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   ods exclude none;
MPRINT(PLOTIT):   ods output close;
MPRINT(PLOTIT):   options NONUMBER ls=256 ps=10000;
MPRINT(PLOTIT):   *------look at the total penalty------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   done = '0';
MPRINT(PLOTIT):   set tempdat3(obs=1 rename=(value=penalty));
MPRINT(PLOTIT):   if n(penalty) & penalty <= 0 then done = '1';
MPRINT(PLOTIT):   iternum = 1;
MPRINT(PLOTIT):   *------print iteration history line------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = 65;
MPRINT(PLOTIT):   actualps = 45;
MPRINT(PLOTIT):   m = floor((256 - 55) / 2);
MPRINT(PLOTIT):   if iternum = 1 then do;
MPRINT(PLOTIT):   put / +m +5 'Iterative Scatter Plot of Labeled Points Macro' /;
MPRINT(PLOTIT):   put +m 'Iteration' +4 'Place' +4 'Line Size' +4 'Page Size' +4 'Penalty';
MPRINT(PLOTIT):   put +m '-------------------------------------------------------';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   m = m - 4;
MPRINT(PLOTIT):   put +m iternum 9. place 11. ls 11. actualps 13. penalty 13.;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iternum >= 15 then done = '1';
MPRINT(PLOTIT):   call symput('done',compress(done));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
 
                                                                                                         Iterative Scatter Plot of Labeled Points Macro
 
                                                                                                    Iteration    Place    Line Size    Page Size    Penalty
                                                                                                    -------------------------------------------------------
                                                                                                        1          2         65           45            0
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *======================post-process plot, step 1======================;
MPRINT(PLOTIT):   *------put titles, footnotes in plot------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sql;
MPRINT(PLOTIT):   create view tempdat6 as select * from dictionary.titles;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   set tempdat6 end=eof;
MPRINT(PLOTIT):   if type = 'T' then ntitles + 1;
MPRINT(PLOTIT):   if eof then call symput('ntitles', trim(put(ntitles, 2. -L)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat5(keep=batch);
MPRINT(PLOTIT):   length batch $ 256;
MPRINT(PLOTIT):   if 0 then set tempdat5;
MPRINT(PLOTIT):   set tempdat6(where=(type='T') rename=(text=batch)) tempdat5 tempdat6(where=(type='F') rename=(text=batch));
MPRINT(PLOTIT):   if type = 'F' or type = 'T' then do;
MPRINT(PLOTIT):   i = round((65 - length(batch)) / 2);
MPRINT(PLOTIT):   if i > 1 then do;
MPRINT(PLOTIT):   substr(batch, i) = batch;
MPRINT(PLOTIT):   substr(batch, 1, i - 1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (batch = ' ' and lag(batch) = ' ') then output;
MPRINT(PLOTIT):   if type = 'T' and number = 1 then do;
MPRINT(PLOTIT):   batch = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------start storing locations of lines------;
MPRINT(PLOTIT):   data anno(keep=tx ty comment);
MPRINT(PLOTIT):   length c $ 1 line title $ 256 comment $ 80;
MPRINT(PLOTIT):   retain coln top bottom afterbot nlines xlabline 0 topn botn topextra botextra past 0 vtick1 vtick2 htick1 htick2 . counttop 1 right left col1 labcolum 65 title ' ';
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if xlabline and _n_ > xlabline and not past then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > xlabline + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------initialize------;
MPRINT(PLOTIT):   length = length(line);
MPRINT(PLOTIT):   if line = ' ' then length = 0;
MPRINT(PLOTIT):   comment = 'frame, tick';
MPRINT(PLOTIT):   *------store first title line------;
MPRINT(PLOTIT):   if title = ' ' then title = line;
MPRINT(PLOTIT):   *------find frame location------;
MPRINT(PLOTIT):   if left(line) =: '-' and index(line,'-+-') and substr(line,length,1) = '-' then do;
MPRINT(PLOTIT):   bottom = _n_;
MPRINT(PLOTIT):   if top = 0 then do;
MPRINT(PLOTIT):   top = _n_;
MPRINT(PLOTIT):   left = index(line,'-');
MPRINT(PLOTIT):   right = length;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------flag lines after the bottom line of the plot------;
MPRINT(PLOTIT):   c = substr(line,left,1);
MPRINT(PLOTIT):   if _n_ > top and afterbot = 0 and c = '-' and substr(line,right,1) = '-' then afterbot = 1;
MPRINT(PLOTIT):   else if afterbot then afterbot = afterbot + 1;
MPRINT(PLOTIT):   *------can we drop extra top of the plot lines?------;
MPRINT(PLOTIT):   if top and _n_ > top and not afterbot then do;
MPRINT(PLOTIT):   botn = botn + 1;
MPRINT(PLOTIT):   if c = '+' then do;
MPRINT(PLOTIT):   counttop = 0;
MPRINT(PLOTIT):   botextra = 0;
MPRINT(PLOTIT):   botn = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if counttop then topn = topn + 1;
MPRINT(PLOTIT):   if compress(line,'| ') = ' ' then do;
MPRINT(PLOTIT):   if abs(_n_ - top - 1 - topextra) < 1e-8 then topextra = topextra + 1;
MPRINT(PLOTIT):   botextra = botextra + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output horizontal axis tick mark coordinates------;
MPRINT(PLOTIT):   if afterbot = 1 then do;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   do i = left to right;
MPRINT(PLOTIT):   if substr(line,i,1) = '+' then do;
MPRINT(PLOTIT):   tx = i;
MPRINT(PLOTIT):   if nmiss(htick1) then htick1 = tx;
MPRINT(PLOTIT):   else if nmiss(htick2) then htick2 = tx;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------find last line in plot region------;
MPRINT(PLOTIT):   if afterbot > 2 and not past then do;
MPRINT(PLOTIT):   past = (index(line,"*** Wrapped Listing of Point Locations ***") or index(line,title));
MPRINT(PLOTIT):   if length and not past then do;
MPRINT(PLOTIT):   nlines = _n_;
MPRINT(PLOTIT):   *------find x-axis label line------;
MPRINT(PLOTIT):   if compress(line) = '#' then do;
MPRINT(PLOTIT):   xlabline = _n_;
MPRINT(PLOTIT):   *------check for vertically printing ticks------;
MPRINT(PLOTIT):   if not (afterbot = 3 or afterbot = 4) then do;
MPRINT(PLOTIT):   put 'WARNING: Ticks may be printing vertically.  ' 'The plot may be wrong.';
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   call symput('intrls' ,'1');
MPRINT(PLOTIT):   call symput('intrtick','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------first, last nonblank column, label column------;
MPRINT(PLOTIT):   if nlines = 0 and length then do;
MPRINT(PLOTIT):   coln = max(coln,length);
MPRINT(PLOTIT):   i = length + 1 - length(left(line));
MPRINT(PLOTIT):   col1 = min(col1,i);
MPRINT(PLOTIT):   if top then labcolum = min(labcolum,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output vertical axis tick mark coordinates------;
MPRINT(PLOTIT):   if top and substr(line,left,1) = '+' then do;
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = _n_;
MPRINT(PLOTIT):   if nmiss(vtick1) then vtick1 = ty;
MPRINT(PLOTIT):   else if nmiss(vtick2) then vtick2 = ty;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------on last observation, output results to macro variables------;
MPRINT(PLOTIT):   if past or eof then do;
MPRINT(PLOTIT):   *------check VTOH=------;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then vtoh = 2;
MPRINT(PLOTIT):   else if n(htick1,htick2,vtick1,vtick2) = 4 then do;
MPRINT(PLOTIT):   vtoh = vtick2 - vtick1;
MPRINT(PLOTIT):   if vtoh > 1e-8 then vtoh = (htick2 - htick1) / vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put vtoh= vtick2= vtick1= htick2= htick1=;
MPRINT(PLOTIT):   call symput('vtoh',compress(put(vtoh,best15.)));
MPRINT(PLOTIT):   *------size of plot parameters------;
MPRINT(PLOTIT):   ls = coln - col1 + 1;
MPRINT(PLOTIT):   left = left - col1 + 1;
MPRINT(PLOTIT):   right = right - col1 + 1;
MPRINT(PLOTIT):   labcolum = labcolum - col1 + 1;
MPRINT(PLOTIT):   hpos = ls + 0.5 * (1.0 + abs(1.5));
MPRINT(PLOTIT):   vpos = nlines + 1;
MPRINT(PLOTIT):   uhpos = input(symget('hpos'),?? 32.);
MPRINT(PLOTIT):   if n(uhpos) then do;
MPRINT(PLOTIT):   if uhpos < hpos then do;
MPRINT(PLOTIT):   put "ERROR: HPOS= is too small.  " 'The default ' 'minimum for ' 'this plot is ' hpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else hpos = uhpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   uvpos = input(symget('vpos'),?? 32.);
MPRINT(PLOTIT):   if n(uvpos) then do;
MPRINT(PLOTIT):   if uvpos < vpos then do;
MPRINT(PLOTIT):   put "ERROR: VPOS= is too small.  " 'The electronics' 'minimum for ' 'this plot is ' vpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else vpos = uvpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   hpos = ceil(hpos);
MPRINT(PLOTIT):   vpos = ceil(vpos);
MPRINT(PLOTIT):   *------scale plot to use MAKEFIT= proportion of area------;
MPRINT(PLOTIT):   makefit1 = input(symget('makefit'),?? 32.);
MPRINT(PLOTIT):   makefit = makefit1;
MPRINT(PLOTIT):   *------makefit value can be changed inside this loop------;
MPRINT(PLOTIT):   do until(itfits);
MPRINT(PLOTIT):   itfits = 1;
MPRINT(PLOTIT):   *------determine hsize and vsize------;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if n(vsize) and nmiss(hsize) then hsize = hpos * vsize / (vpos * vtoh);
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if n(hsize) = 0 then hsize = 8.33;
MPRINT(PLOTIT):   if n(vsize) = 0 then vsize = (vpos / hpos) * hsize * vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *-------scale sizes so plot fits in specified area------;
MPRINT(PLOTIT):   if n(makefit) then do;
MPRINT(PLOTIT):   scale = max(hsize / (abs(makefit) * (8.33)), vsize / (abs(makefit) * (6.24)));
MPRINT(PLOTIT):   if scale > 1.0 then do;
MPRINT(PLOTIT):   hsize = hsize / scale;
MPRINT(PLOTIT):   vsize = vsize / scale;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------add extra positions to center plot, extend axes------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'),?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'),?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'),?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'),?? 32.);
MPRINT(PLOTIT):   setlr = (nmiss(extendl,extendr) = 2 and not 0);
MPRINT(PLOTIT):   settb = (nmiss(extendt,extendb) = 2 and not 0);
MPRINT(PLOTIT):   *------centering, compute horizontal, vertical offsets------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   hposoff = max(0.5 * ((8.33) - hsize) / (hsize / hpos), 0);
MPRINT(PLOTIT):   vposoff = max(0.5 * ((6.24) - vsize) / (vsize / vpos), 0);
MPRINT(PLOTIT):   hsize = 8.33;
MPRINT(PLOTIT):   vsize = 6.24;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   vposoff = 0;
MPRINT(PLOTIT):   hposoff = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------can we extend the left and right axes a little?------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   extendl = max(min(hposoff - 2.5, 2), 0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------even the top and bottom extra positions------;
MPRINT(PLOTIT):   if settb and topn > botn then do;
MPRINT(PLOTIT):   i = topn - botn;
MPRINT(PLOTIT):   if i <= topextra then extendt = -i;
MPRINT(PLOTIT):   else extendb = i;
MPRINT(PLOTIT):   i = -0.5 * sum(extendb,extendt);
MPRINT(PLOTIT):   if i > 0 then do;
MPRINT(PLOTIT):   extendb = sum(extendb,i);
MPRINT(PLOTIT):   extendt = sum(extendt,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set the extend variables if not set yet------;
MPRINT(PLOTIT):   if nmiss(extendt) then extendt = 0;
MPRINT(PLOTIT):   if nmiss(extendl) then extendl = 0;
MPRINT(PLOTIT):   if nmiss(extendr) then extendr = 0;
MPRINT(PLOTIT):   if nmiss(extendb) then extendb = 0;
MPRINT(PLOTIT):   *------make the plot square------;
MPRINT(PLOTIT):   if 0 and not 0 then do;
MPRINT(PLOTIT):   *------first try to adjust the left and right------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   setlr = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / 2;
MPRINT(PLOTIT):   extendl = extendl - setlr;
MPRINT(PLOTIT):   extendl = max(min(extendl,hposoff - 2.5),0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------next try to adjust the top and bottom------;
MPRINT(PLOTIT):   if settb then do;
MPRINT(PLOTIT):   settb = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / (-2 * vtoh);
MPRINT(PLOTIT):   extendt = extendt - settb;
MPRINT(PLOTIT):   extendb = extendb - settb;
MPRINT(PLOTIT):   if -extendt > topextra then extendt = -topextra;
MPRINT(PLOTIT):   if -extendb > botextra then extendb = -botextra;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check to see if we succeeded, should be zero------;
MPRINT(PLOTIT):   setlr = (right - left + extendr + extendl) - vtoh * (bottom - top + extendt + extendb);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if the plot fits, otherwise try again------;
MPRINT(PLOTIT):   if n(makefit) and makefit < 0 and not 0 and ((0 and abs(setlr) > (1e-8 * hpos)) or (1 and (((extendl + extendr) > (2 * hposoff - 2.5)) or ((extendt + extendb) > (2 * vposoff - 0.25))))) and makefit <= 0.75 * makefit1 then do;
MPRINT(PLOTIT):   makefit = makefit * 0.99;
MPRINT(PLOTIT):   itfits = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------warn if we changed MAKEFIT= to make the plot square------;
MPRINT(PLOTIT):   if n(makefit) and abs(makefit - makefit1) > 1e-8 then put 'WARNING: MAKEFIT=' makefit 'was used ' 'to make ' 'the plot ' 'fit.';
MPRINT(PLOTIT):   * put extendt= extendb= extendl= extendr= vtoh= hposoff= vposoff=;
MPRINT(PLOTIT):   *------override electronics positions------;
MPRINT(PLOTIT):   if n(uhpos) then hposoff = 0;
MPRINT(PLOTIT):   else hpos = ceil(hpos + 2.0 * hposoff);
MPRINT(PLOTIT):   if n(uvpos) then vposoff = 0;
MPRINT(PLOTIT):   else vpos = ceil(vpos + 2.0 * vposoff);
MPRINT(PLOTIT):   *------output plot size parameters------;
MPRINT(PLOTIT):   call symput('col1', compress(put(col1,5.0)));
MPRINT(PLOTIT):   call symput('actualls', compress(put(ls,5.0)));
MPRINT(PLOTIT):   call symput('nlines', compress(put(nlines,5.0)));
MPRINT(PLOTIT):   call symput('top', compress(put(top,5.0)));
MPRINT(PLOTIT):   call symput('bottom', compress(put(bottom,5.0)));
MPRINT(PLOTIT):   call symput('left', compress(put(left,5.0)));
MPRINT(PLOTIT):   call symput('right', compress(put(right,5.0)));
MPRINT(PLOTIT):   call symput('labcolum', compress(put(labcolum,5.0)));
MPRINT(PLOTIT):   call symput('xlabline', compress(put(xlabline,5.0)));
MPRINT(PLOTIT):   call symput('hposoff', compress(put(hposoff,7.1)));
MPRINT(PLOTIT):   call symput('vposoff', compress(put(vposoff,7.1)));
MPRINT(PLOTIT):   call symput('hpos', compress(put(hpos,9.0)));
MPRINT(PLOTIT):   call symput('vpos', compress(put(vpos,9.0)));
MPRINT(PLOTIT):   call symput('hsize', compress(put(hsize,9.2)));
MPRINT(PLOTIT):   call symput('vsize', compress(put(vsize,9.2)));
MPRINT(PLOTIT):   call symput('extendl', compress(put(extendl,9.2)));
MPRINT(PLOTIT):   call symput('extendr', compress(put(extendr,9.2)));
MPRINT(PLOTIT):   call symput('extendt', compress(put(extendt,9.2)));
MPRINT(PLOTIT):   call symput('extendb', compress(put(extendb,9.2)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=======================post-process plot, step 2======================;
MPRINT(PLOTIT):   data tempdat1(keep=function x y text angle position comment color size style n __xvar __yvar __otype) tempdat2(keep=tx ty comment _radius_ color size style n __xvar __yvar);
MPRINT(PLOTIT):   length text line label $ 256 function color style $ 8 position symbol $ 1 comment $ 80;
MPRINT(PLOTIT):   retain style ' ';
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   color = ' ';
MPRINT(PLOTIT):   size = .;
MPRINT(PLOTIT):   *------read the plot------;
MPRINT(PLOTIT):   if _n_ <= 26 then do;
MPRINT(PLOTIT):   comment = 'text';
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if _n_ > 26 then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > 26 + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   line = substr(line, 2, 62);
MPRINT(PLOTIT):   *------is this an axis line?------;
MPRINT(PLOTIT):   istop = (_n_ = 3);
MPRINT(PLOTIT):   isbot = (_n_ = 23);
MPRINT(PLOTIT):   *------set the y-axis label------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 23 and substr(line,1,1) = '#' then substr(line,1,1) = ' ';
MPRINT(PLOTIT):   if _n_ = 26 then do;
MPRINT(PLOTIT):   y = ((2 * 26) - 3 - 23) / 2;
MPRINT(PLOTIT):   x = 1;
MPRINT(PLOTIT):   text = symget('labely');
MPRINT(PLOTIT):   if 5.9 > 1 then x = x - 0.5;
MPRINT(PLOTIT):   if length(text) > 1 then angle = 90;
MPRINT(PLOTIT):   comment = 'text, y label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   angle = 0;
MPRINT(PLOTIT):   *------remove stuff in the plot------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 23 then substr(line,6,62 - 6 + 1) = ' ';
MPRINT(PLOTIT):   *------output ticks, titles, and so on------;
MPRINT(PLOTIT):   y = 26 - _n_;
MPRINT(PLOTIT):   do iwhile = 1 to 65 while(line ne ' ');
MPRINT(PLOTIT):   i = length(line) - length(left(line)) + 1;
MPRINT(PLOTIT):   text = substr(line,i,1);
MPRINT(PLOTIT):   *------isolate and process one label------;
MPRINT(PLOTIT):   if text ne ' ' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   x = i;
MPRINT(PLOTIT):   *------special handling of title lines, xaxis label------;
MPRINT(PLOTIT):   if _n_ < 3 or _n_ >= 26 then do;
MPRINT(PLOTIT):   text = left(line);
MPRINT(PLOTIT):   i = 62 + 1;
MPRINT(PLOTIT):   line = ' ';
MPRINT(PLOTIT):   x = (6 + 62) / 2.0;
MPRINT(PLOTIT):   *------special handling of title lines------;
MPRINT(PLOTIT):   if _n_ < 3 then do;
MPRINT(PLOTIT):   comment = 'text, title';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------footnotes------;
MPRINT(PLOTIT):   else if _n_ > 26 then do;
MPRINT(PLOTIT):   comment = 'text, footnote';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle x-axis label------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   text = symget('labelx');
MPRINT(PLOTIT):   comment = 'text, x label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle label outside the plot, not title------;
MPRINT(PLOTIT):   else if i < 6 or _n_ > 23 then do;
MPRINT(PLOTIT):   do j = i + 1 to 62 until(done);
MPRINT(PLOTIT):   done = substr(line,j,1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   text = substr(line,i,j - i + 1);
MPRINT(PLOTIT):   substr(line,i,j - i + 1) = ' ';
MPRINT(PLOTIT):   *------handle ticks------;
MPRINT(PLOTIT):   position = '<';
MPRINT(PLOTIT):   x = i + length(text) - 1;
MPRINT(PLOTIT):   if j < 6 then comment = 'text, y tick';
MPRINT(PLOTIT):   else if _n_ < 26 then do;
MPRINT(PLOTIT):   comment = 'text, x tick';
MPRINT(PLOTIT):   *------tweak the placement a tad with new options------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else comment = 'text, other';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put i= text= position=;
MPRINT(PLOTIT):   *------output label------;
MPRINT(PLOTIT):   if text ne ' ' then output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iwhile >= 65 and symget('abort') ne '1' then do;
MPRINT(PLOTIT):   put 'ERROR: The frame location algorithm is confused.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------bring in the extra observations------;
MPRINT(PLOTIT):   eofextra = 0;
MPRINT(PLOTIT):   p = '+';
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   vshift = .;
MPRINT(PLOTIT):   hshift = .;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   lines = 0;
MPRINT(PLOTIT):   do while(not eofextra);
MPRINT(PLOTIT):   set extraobs(keep=__: _radius_) end=eofextra;
MPRINT(PLOTIT):   comment = 'extra,';
MPRINT(PLOTIT):   if n(__xvar,__yvar) = 2 then link process;
MPRINT(PLOTIT):   n = n + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------determine point count------;
MPRINT(PLOTIT):   set tempdat3(firstobs=2 rename=(value=npoints));
MPRINT(PLOTIT):   if nmiss(npoints) then do;
MPRINT(PLOTIT):   npoints = 0;
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   sumh = 0;
MPRINT(PLOTIT):   sumv = 0;
MPRINT(PLOTIT):   sumx = 0;
MPRINT(PLOTIT):   sumy = 0;
MPRINT(PLOTIT):   sumx2 = 0;
MPRINT(PLOTIT):   sumy2 = 0;
MPRINT(PLOTIT):   sumxh = 0;
MPRINT(PLOTIT):   sumyv = 0;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   midh = 62 / 2;
MPRINT(PLOTIT):   midv = 45 / 2;
MPRINT(PLOTIT):   midx = (1.7917722841955 + -2.733842717344) / 2;
MPRINT(PLOTIT):   midy = (0.9861625521563 + -1.486144852768) / 2;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   do pointn = 1 to npoints;
MPRINT(PLOTIT):   link getlabel;
MPRINT(PLOTIT):   ty = vpositio;
MPRINT(PLOTIT):   tx = hpositio;
MPRINT(PLOTIT):   comment = 'list,';
MPRINT(PLOTIT):   if _error_ = 1 then put _all_;
MPRINT(PLOTIT):   if startpos = 'Center' then p = '+';
MPRINT(PLOTIT):   else if startpos = 'Left' then p = '<';
MPRINT(PLOTIT):   else p = '>';
MPRINT(PLOTIT):   text = symbol;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   set preproc(keep=__: _radius_) point=i;
MPRINT(PLOTIT):   link process;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------least-squares slope and intercept------;
MPRINT(PLOTIT):   b = .;
MPRINT(PLOTIT):   a = .;
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = sumx - nobs * midx;
MPRINT(PLOTIT):   b = nobs * sumx2 - d * d;
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumxh - d * (sumh - nobs * midh)) / b;
MPRINT(PLOTIT):   a = sumh / nobs - b * sumx / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = (sumy - nobs * midy);
MPRINT(PLOTIT):   b = (nobs * sumy2 - d * d);
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumyv - d * (sumv - nobs * midv)) / b;
MPRINT(PLOTIT):   a = sumv / nobs - b * sumy / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   process: *------handle a point in the plot------;
MPRINT(PLOTIT):   type = __stype;
MPRINT(PLOTIT):   if n(tx) then do;
MPRINT(PLOTIT):   tx = tx + 6 + 1;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(ty) then do;
MPRINT(PLOTIT):   ty = ty + 1 + 26 - 23;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   colorset = 0;
MPRINT(PLOTIT):   *------random colors------;
MPRINT(PLOTIT):   *------store full label------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   line = label;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   line = compress('('||type||',') || ' ' || compress(put(n,5.)||')');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set colors, sizes, and so on for symbols------;
MPRINT(PLOTIT):   if not colorset then color = __scolor;
MPRINT(PLOTIT):   size = __ssize;
MPRINT(PLOTIT):   style = __sfont;
MPRINT(PLOTIT):   if text = 'NONE' then text = ' ';
MPRINT(PLOTIT):   if __symbol ne '00'x then text = __symbol;
MPRINT(PLOTIT):   if type = 'contour' then function = 'BAR';
MPRINT(PLOTIT):   else if type = 'square' then function = 'SYMBOL';
MPRINT(PLOTIT):   else function = 'LABEL';
MPRINT(PLOTIT):   *------output list info to lines data set------;
MPRINT(PLOTIT):   if type =: 'vector' or type =: 'circle' then do;
MPRINT(PLOTIT):   comment = trim(comment) || ' ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output list info to text data set------;
MPRINT(PLOTIT):   if (text ne ' ' and type ne 'dummy') or type = 'contour' or type = 'function' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------intermediate results for slope, intercept------;
MPRINT(PLOTIT):   if n(tx,ty,__xvar,__yvar) = 4 then do;
MPRINT(PLOTIT):   sumh = sumh + tx;
MPRINT(PLOTIT):   sumv = sumv + ty;
MPRINT(PLOTIT):   sumx = sumx + __xvar;
MPRINT(PLOTIT):   sumy = sumy + __yvar;
MPRINT(PLOTIT):   d = __xvar - midx;
MPRINT(PLOTIT):   sumx2 = sumx2 + d * d;
MPRINT(PLOTIT):   sumxh = sumxh + (tx - midh) * d;
MPRINT(PLOTIT):   d = __yvar - midy;
MPRINT(PLOTIT):   sumy2 = sumy2 + d * d;
MPRINT(PLOTIT):   sumyv = sumyv + (ty - midv) * d;
MPRINT(PLOTIT):   nobs = nobs + 1;
MPRINT(PLOTIT):   * put sumh= tx= sumv= ty= sumx= __xvar= sumy= __yvar= midx= sumx2= sumxh= midy= sumy2= sumyv= nobs=;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle the label fragments------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   if not colorset then color = __lcolor;
MPRINT(PLOTIT):   size = __lsize;
MPRINT(PLOTIT):   style = __lfont;
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   position = p;
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, label, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   shift = floor(1e-8 + (lines - 1) / 2);
MPRINT(PLOTIT):   do i = 1 to lines;
MPRINT(PLOTIT):   if lines > 1 then link getlabel;
MPRINT(PLOTIT):   text = label;
MPRINT(PLOTIT):   if text ne ' ' and type ne 'dummy' then do;
MPRINT(PLOTIT):   x = tx + hshift;
MPRINT(PLOTIT):   y = 1 + ty + vshift + shift - i;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getlabel: set tempdat4(keep=lines symbol n label vshift hshift vposition hposition startposition rename=(startposition=startpos vposition=vpositio hposition=hpositio));
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete extraobs;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------tick mark based slope and intercept------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   merge anno(where=(index(substr(comment,1,12),'tick')) keep=ty tx comment) tempdat1(where=(index(comment,'tick')) keep=text comment);
MPRINT(PLOTIT):   if n(ty) then ty = 26 - ty;
MPRINT(PLOTIT):   data = input(text,?? 32.);
MPRINT(PLOTIT):   if (0 and n(tx)) or (0 and n(ty)) then do;
MPRINT(PLOTIT):   if data > 0 then data = log10(data);
MPRINT(PLOTIT):   else data = .;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   oldty = lag(ty);
MPRINT(PLOTIT):   oldtx = lag(tx);
MPRINT(PLOTIT):   olddata = lag(data);
MPRINT(PLOTIT):   if n(data,olddata) = 2 then do;
MPRINT(PLOTIT):   den = data - olddata;
MPRINT(PLOTIT):   if abs(den) > 1e-8 then do;
MPRINT(PLOTIT):   if n(oldty,ty) = 2 then do;
MPRINT(PLOTIT):   b = (ty - oldty) / den;
MPRINT(PLOTIT):   a = ty - b * data;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(oldtx,tx) = 2 then do;
MPRINT(PLOTIT):   b = (tx - oldtx) / den;
MPRINT(PLOTIT):   a = tx - b * data - 2 + 1;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------switch top and bottom to annotate coordinates------;
MPRINT(PLOTIT):   *------make goptions statement------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=================create annotate data set with lines=================;
MPRINT(PLOTIT):   data anno(keep=function x y comment color size style n);
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length text $ 256 comment $ 100 function color style $ 8;
MPRINT(PLOTIT):   retain curven -1 tickaxes "LBFh" vtoh 2 vinter 15 hinter 39 hslope 10 vslope 5 hmax 1.7917722841955 vmax 0.9861625521563 vmin -1.486144852768 hmin -2.733842717344 singular 1e-8 left 6 right 62 top 23 bottom 3;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------check slope, intercept------;
MPRINT(PLOTIT):   if n(hinter,vinter,hslope,vslope) ne 4 then do;
MPRINT(PLOTIT):   put 'ERROR: Plot algorithm failed.  ' 'Coordinates could ' 'not be ' 'computed.  ' 'Vertically printing ' 'ticks is a ' 'possible cause.  ' 'Another ' 'explanation ' 'is no locate list ' 'was available.  ' 'Look ' 'at the ' 'printer plot
' 'to check.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------how far should plot be extended?------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'), ?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'), ?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'), ?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'), ?? 32.);
MPRINT(PLOTIT):   *------rectangle sizes for contour plots------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then vcontour = abs(vslope) * (vmax - vmin) / nobs;
MPRINT(PLOTIT):   else vcontour = .;
MPRINT(PLOTIT):   call symput('vcontour',compress(put(vcontour,best15.)));
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then hcontour = abs(hslope) * (hmax - hmin) / nobs;
MPRINT(PLOTIT):   else hcontour = .;
MPRINT(PLOTIT):   call symput('hcontour',compress(put(hcontour,best15.)));
MPRINT(PLOTIT):   *------optionally close up all white space------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   if n(hcontour) then do;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin - 0.5 * hcontour);
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax + 0.5 * hcontour) - right;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(vcontour) then do;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax + 0.5 * vcontour) - top;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin - 0.5 * vcontour);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------optionally close up white space with square contours------;
MPRINT(PLOTIT):   if 0 and 0 and not 0 then do;
MPRINT(PLOTIT):   contour = 1 * 0.5;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin) + vtoh * contour;
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax) - right + vtoh * contour;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax) - top + contour;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin) + contour;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   call symput('extendl',compress(put(extendl,best15.)));
MPRINT(PLOTIT):   call symput('extendr',compress(put(extendr,best15.)));
MPRINT(PLOTIT):   call symput('extendt',compress(put(extendt,best15.)));
MPRINT(PLOTIT):   call symput('extendb',compress(put(extendb,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------final locations of the axes------;
MPRINT(PLOTIT):   left = left - extendl;
MPRINT(PLOTIT):   right = right + extendr;
MPRINT(PLOTIT):   top = top + extendt;
MPRINT(PLOTIT):   bottom = bottom - extendb;
MPRINT(PLOTIT):   *------frame background color------;
MPRINT(PLOTIT):   color = 'cxffffff';
MPRINT(PLOTIT):   size = 1;
MPRINT(PLOTIT):   style = 'msolid';
MPRINT(PLOTIT):   function = 'POLY';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, background, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'POLYCONT';
MPRINT(PLOTIT):   comment = 'frame, background, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   *------draw frame------;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, box, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'frame, box, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   comment = 'frame, box, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------diagonal reference line------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   comment = 'frame, diag, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, diag, right top';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------vertical axis reference lines------;
MPRINT(PLOTIT):   *------horizontal axis reference lines------;
MPRINT(PLOTIT):   *------vertical axis minor tick marks------;
MPRINT(PLOTIT):   *------horizontal axis minor tick marks------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat2(in=td2);
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td2 and not (comment =: 'frame');
MPRINT(PLOTIT):   if i or (nmiss(tx) and n(__xvar)) then tx = hinter + hslope * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(ty) and n(__yvar)) then ty = vinter + vslope * __yvar;
MPRINT(PLOTIT):   *------figure out curve coordinates------;
MPRINT(PLOTIT):   if comment = 'frame, tick' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[2];
MPRINT(PLOTIT):   halftick = 0.5 * abs(1.5);
MPRINT(PLOTIT):   ticklen = (1 + (1.5 > 0)) * halftick;
MPRINT(PLOTIT):   if index(tickaxes,'h') then ticklen = ticklen / 2;
MPRINT(PLOTIT):   *------adjust for blank cols------;
MPRINT(PLOTIT):   if n(tx) then tx = tx - 2 + 1;
MPRINT(PLOTIT):   *------draw y-axis tick marks------;
MPRINT(PLOTIT):   if nmiss(tx) then do;
MPRINT(PLOTIT):   y = 26 - ty;
MPRINT(PLOTIT):   if bottom <= y <= top then do;
MPRINT(PLOTIT):   if index(tickaxes,'L') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, left';
MPRINT(PLOTIT):   x = left - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'R') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, right';
MPRINT(PLOTIT):   x = right + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw x-axis tick marks------;
MPRINT(PLOTIT):   else if nmiss(ty) then do;
MPRINT(PLOTIT):   halftick = halftick / vtoh;
MPRINT(PLOTIT):   ticklen = ticklen / vtoh;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   if left <= x <= right then do;
MPRINT(PLOTIT):   if index(tickaxes,'T') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, top';
MPRINT(PLOTIT):   y = top + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'B') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, bottom';
MPRINT(PLOTIT):   y = bottom - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw vectors------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'vector') then do;
MPRINT(PLOTIT):   size = lsizes[3];
MPRINT(PLOTIT):   x = hinter;
MPRINT(PLOTIT):   y = vinter;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = index(comment,'vector');
MPRINT(PLOTIT):   comment = substr(comment,1,r + 7) || 'head,' || substr(comment,r + 7);
MPRINT(PLOTIT):   *------compute slope of vector------;
MPRINT(PLOTIT):   vecslope = tx - hinter;
MPRINT(PLOTIT):   if abs(vecslope) > singular then vecslope = (ty - vinter) / (vecslope / vtoh);
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------find point on vector vecheadr distance from end------;
MPRINT(PLOTIT):   r = -0.1;
MPRINT(PLOTIT):   fromx = tx;
MPRINT(PLOTIT):   fromy = ty;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   fromx = tox;
MPRINT(PLOTIT):   fromy = toy;
MPRINT(PLOTIT):   *------slope of line perpendicular to vector------;
MPRINT(PLOTIT):   if nmiss(vecslope) then vecslope = 0;
MPRINT(PLOTIT):   else if abs(vecslope) > singular then vecslope = -1.0 / vecslope;
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------draw vector head------;
MPRINT(PLOTIT):   r = -0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = 0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw circles------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'circle') then do;
MPRINT(PLOTIT):   size = lsizes[4];
MPRINT(PLOTIT):   comsplit = 15 + (comment =: 'extra');
MPRINT(PLOTIT):   holdcom = comment;
MPRINT(PLOTIT):   pi = 3.1415926536;
MPRINT(PLOTIT):   do rad = _radius_;
MPRINT(PLOTIT):   radius = max(rad, 0) * hslope;
MPRINT(PLOTIT):   comment = substr(holdcom,1,comsplit - 1) || compress(put(rad,best5.) || ',') || ' ' || compress('(' || put(__xvar,best5.) || ',' || put(__yvar,best5.) || '),') || ' ' || substr(holdcom,comsplit);
MPRINT(PLOTIT):   i = (8.33) / (76);
MPRINT(PLOTIT):   if "in" = 'cm' then i = i / 2.54;
MPRINT(PLOTIT):   inc = 2.0 * pi / ceil(20 + (2.0 * pi * radius * i / .1) ** 0.8);
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   seg0 = (inc * singular) ** 2;
MPRINT(PLOTIT):   do i = -pi + inc to pi by inc;
MPRINT(PLOTIT):   x1 = tx + cos(i - inc) * radius;
MPRINT(PLOTIT):   y1 = ty + sin(i - inc) * radius / vtoh;
MPRINT(PLOTIT):   x2 = tx + cos(i) * radius;
MPRINT(PLOTIT):   y2 = ty + sin(i) * radius / vtoh;
MPRINT(PLOTIT):   link clipline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   linept: *------find a point (tox,toy) r distance from ------;
MPRINT(PLOTIT):   *------(fromx,fromy) on a line with slope vecslope------;
MPRINT(PLOTIT):   *------negative r means toward origin ------;
MPRINT(PLOTIT):   r = r * (76) / (8.33);
MPRINT(PLOTIT):   if "in" = 'cm' then r = r * 2.54;
MPRINT(PLOTIT):   vecdir = -sign(r);
MPRINT(PLOTIT):   if n(vecslope) then do;
MPRINT(PLOTIT):   vecm2 = sqrt(r * r / (1.0 + vecslope * vecslope));
MPRINT(PLOTIT):   if fromx > hinter then vecm2 = -vecm2;
MPRINT(PLOTIT):   tox = vecdir * vecm2 + fromx;
MPRINT(PLOTIT):   toy = vecdir * vecslope * vecm2 / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   tox = fromx;
MPRINT(PLOTIT):   if fromy > vinter then vecdir = -vecdir;
MPRINT(PLOTIT):   toy = vecdir * abs(r) / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   clipline: *------clip a line that crosses an edge------;
MPRINT(PLOTIT):   *------find where line crosses edges------;
MPRINT(PLOTIT):   b = (x2 - x1);
MPRINT(PLOTIT):   bi = (y2 - y1);
MPRINT(PLOTIT):   xtop = .;
MPRINT(PLOTIT):   xbottom = .;
MPRINT(PLOTIT):   yleft = .;
MPRINT(PLOTIT):   yright = .;
MPRINT(PLOTIT):   if abs(b) > singular then do;
MPRINT(PLOTIT):   b = (y2 - y1) / b;
MPRINT(PLOTIT):   a = y1 - b * x1;
MPRINT(PLOTIT):   yleft = b * left + a;
MPRINT(PLOTIT):   yright = b * right + a;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if abs(bi) > singular then do;
MPRINT(PLOTIT):   bi = (x2 - x1) / bi;
MPRINT(PLOTIT):   xtop = (top - y1) * bi + x1;
MPRINT(PLOTIT):   xbottom = (bottom - y1) * bi + x1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust coordinates when line crosses edges------;
MPRINT(PLOTIT):   if x1 < left then do;
MPRINT(PLOTIT):   x1 = left;
MPRINT(PLOTIT):   y1 = yleft;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x1 > right then do;
MPRINT(PLOTIT):   x1 = right;
MPRINT(PLOTIT):   y1 = yright;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 < bottom then do;
MPRINT(PLOTIT):   y1 = bottom;
MPRINT(PLOTIT):   x1 = xbottom;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 > top then do;
MPRINT(PLOTIT):   y1 = top;
MPRINT(PLOTIT):   x1 = xtop;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 < left then do;
MPRINT(PLOTIT):   x2 = left;
MPRINT(PLOTIT):   y2 = yleft;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 > right then do;
MPRINT(PLOTIT):   x2 = right;
MPRINT(PLOTIT):   y2 = yright;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 < bottom then do;
MPRINT(PLOTIT):   y2 = bottom;
MPRINT(PLOTIT):   x2 = xbottom;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 > top then do;
MPRINT(PLOTIT):   y2 = top;
MPRINT(PLOTIT):   x2 = xtop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if segment should be output------;
MPRINT(PLOTIT):   if n(x1,x2,y1,y2) = 4 and ((x2 - x1) ** 2 + (y2 - y1) ** 2) > seg0 then do;
MPRINT(PLOTIT):   *------draw line------;
MPRINT(PLOTIT):   if not justdraw then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   justdraw = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else justdraw = 0;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat2 regdat;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *======================combine annotate data sets======================;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   keep color style function comment x y size text position angle n obstype;
MPRINT(PLOTIT):   length color style function $ 8 comment $ 100 x y size 8 text $ 62 position $ 1 angle n 8 obstype $ 12 excolors $ 64;
MPRINT(PLOTIT):   retain left right top bottom contok conoldx conoldy excolors;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   left = 6 - 2.00;
MPRINT(PLOTIT):   right = 62 + 2.00;
MPRINT(PLOTIT):   top = 23 + -0.50;
MPRINT(PLOTIT):   bottom = 3 - 0.50;
MPRINT(PLOTIT):   contok = (n(0,0) = 2);
MPRINT(PLOTIT):   excolors = lowcase(symget('excolors'));
MPRINT(PLOTIT):   *------store goptions with annotate data set------;
MPRINT(PLOTIT):   if not 0 then do;
MPRINT(PLOTIT):   comment = symget('gopts');
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   function = 'COMMENT';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw border------;
MPRINT(PLOTIT):   if "cx000000" ne ' ' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = 29 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   comment = 'border, box, left top start';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'border, box, left bottom';
MPRINT(PLOTIT):   y = 0;
MPRINT(PLOTIT):   if 0 and 0.50 < 0 then y = y - 0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right bottom';
MPRINT(PLOTIT):   x = 76 - 0.001;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x + 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right top';
MPRINT(PLOTIT):   y = 29 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, left top';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat1(in=td1 rename=(text=text2));
MPRINT(PLOTIT):   text = text2;
MPRINT(PLOTIT):   if comment = 'text, y label' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, title' then y = y + -0.50;
MPRINT(PLOTIT):   if comment = 'text, x label' then y = y - 0.50;
MPRINT(PLOTIT):   if comment = 'text, y tick' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, x tick' then y = y - 0.50;
MPRINT(PLOTIT):   obstype = __otype;
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   *------discard clipped ticks if necessary------;
MPRINT(PLOTIT):   if comment = 'text, y tick' then do;
MPRINT(PLOTIT):   if not (bottom <= y <= top) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if comment = 'text, x tick' then do;
MPRINT(PLOTIT):   d = right + floor(1e-8 + len / 2);
MPRINT(PLOTIT):   if not (left <= x <= d) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td1 and (comment =: 'list' or comment =: 'extra') and not (index(substr(comment,1,18),', text, label'));
MPRINT(PLOTIT):   if i or (nmiss(x) and n(__xvar)) then x = 39 + 10 * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(y) and n(__yvar)) then y = 15 + 5 * __yvar;
MPRINT(PLOTIT):   *------all angles are zero, except the y-axis label------;
MPRINT(PLOTIT):   if nmiss(angle) then angle = 0;
MPRINT(PLOTIT):   *------set position if not yet set------;
MPRINT(PLOTIT):   if position = ' ' then position = '+';
MPRINT(PLOTIT):   *------flag contour observations------;
MPRINT(PLOTIT):   contour = (function = 'BAR' and style = 'solid');
MPRINT(PLOTIT):   *------clip if necessary------;
MPRINT(PLOTIT):   if comment =: 'extra, text' or comment =: 'list, text' and text ne ' ' and not contour then do;
MPRINT(PLOTIT):   if y >= top or y <= bottom then return;
MPRINT(PLOTIT):   if position = '<' then d = x - len + 1 - left;
MPRINT(PLOTIT):   else if position = '>' then d = x - left;
MPRINT(PLOTIT):   else d = x - len / 2 - left;
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if position = '<' then d = right - x;
MPRINT(PLOTIT):   else if position = '>' then d = right - (x + len - 1);
MPRINT(PLOTIT):   else d = right - (x + len / 2);
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust justifications------;
MPRINT(PLOTIT):   if position = '<' then x = x + 0.5;
MPRINT(PLOTIT):   else if position = '>' then x = x - 0.5;
MPRINT(PLOTIT):   *------set line, text sizes------;
MPRINT(PLOTIT):   if nmiss(size) then do;
MPRINT(PLOTIT):   if function = 'LABEL' then size = 1;
MPRINT(PLOTIT):   else size = lsizes[1];
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set font------;
MPRINT(PLOTIT):   if style = ' ' and not (comment =: 'list, text' or comment =: 'extra, text') then style = 'none';
MPRINT(PLOTIT):   *------if color is still not set, set it------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   *------offset (jitter) coincident symbols but not ptr symbols------;
MPRINT(PLOTIT):   length lastpos $ 1;
MPRINT(PLOTIT):   retain oldx oldy 0 offsetn 1 lastpos '+';
MPRINT(PLOTIT):   if comment =: 'list, text, symbol' or comment =: 'extra, text, symbol' then do;
MPRINT(PLOTIT):   if abs(oldx - x) < 1e-8 and abs(oldy - y) < 1e-8 then do;
MPRINT(PLOTIT):   *------usually go center, right, left, but skip right------;
MPRINT(PLOTIT):   *------on second symbol if last label was right ------;
MPRINT(PLOTIT):   offsetn + 1 + (offsetn = 1 and lastpos = '>');
MPRINT(PLOTIT):   x = x + (mod(offsetn,3) - 1) * (0.25);
MPRINT(PLOTIT):   d = mod(floor((offsetn - 1) / 3) + 1, 3) - 1;
MPRINT(PLOTIT):   y = y + d * (0.25) / (2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   offsetn = 1;
MPRINT(PLOTIT):   oldx = x;
MPRINT(PLOTIT):   oldy = y;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   lastpos = position;
MPRINT(PLOTIT):   *------override colors for monochrome device------;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if index(excolors, trim(lowcase(color))) = 0;
MPRINT(PLOTIT):   *------add offsets to center plot ------;
MPRINT(PLOTIT):   *------adjust y so bottom line has coordinate 0.5------;
MPRINT(PLOTIT):   x = x + 5.9;
MPRINT(PLOTIT):   y = y + 0.7 + 0.5;
MPRINT(PLOTIT):   *------set ID variable for sort for functions------;
MPRINT(PLOTIT):   *------create rectangles for contour plots------;
MPRINT(PLOTIT):   if contour and contok then do;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   epsh = size * 0;
MPRINT(PLOTIT):   epsv = size * 0;
MPRINT(PLOTIT):   x1 = x - epsh / 2;
MPRINT(PLOTIT):   x2 = x1 + epsh;
MPRINT(PLOTIT):   epsh = epsh * 0.1;
MPRINT(PLOTIT):   y1 = y - epsv / 2;
MPRINT(PLOTIT):   y2 = y1 + epsv;
MPRINT(PLOTIT):   epsv = epsv * 0.1;
MPRINT(PLOTIT):   if abs(x1 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x1 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   if (abs(0) < epsh and 0 > 0) or (abs(0) < epsv and 0 > 0) then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   function = 'BAR';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   conoldx = x;
MPRINT(PLOTIT):   conoldy = y;
MPRINT(PLOTIT):   *------final adjustments------;
MPRINT(PLOTIT):   if text = '*' and function = 'LABEL' then do;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   text = 'star';
MPRINT(PLOTIT):   function = 'SYMBOL';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   call symput('nobs',compress(put(nobs,5.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat1 tempdat3 tempdat4 tempdat5 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------post-processing for functions------;
MPRINT(PLOTIT):   *------post-processing for expand------;
MPRINT(PLOTIT):   *------make sure that the frame is never covered------;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   set anno anno(where=(comment =: 'frame, box'));
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *===========set up for and produce the graphical scatter plot==========;
MPRINT(PLOTIT):   goptions nodisplay hpos=76 vpos=29 hsize=8.33in vsize=6.24in cback=white device=GIF;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   *------print final plot request------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length string $ 500;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   put / 'The following code will create the ' @@;
MPRINT(PLOTIT):   if not 1 then put '(empty) ' @@;
MPRINT(PLOTIT):   put 'printer plot ' 'on which ' 'the ' 'graphical ' 'plot is ' 'based:' /;
MPRINT(PLOTIT):   string = "options nonumber ls=65 ps=45;";
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = symget('procopts');
MPRINT(PLOTIT):   indent2 = 10;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'plot ' || trim(symget('plotreq')) || ' /';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('plotopts')) || ' list=1';
MPRINT(PLOTIT):   indent1 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('pl')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('label')) || ';';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 9;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('adjust2')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'label ' || symget('vplotvar') || " = '#' " || symget('hplotvar') || " = '#';";
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put +3 'run; quit;' /;
MPRINT(PLOTIT):   put 'The plot was created with the following goptions:' /;
MPRINT(PLOTIT):   string = 'goptions ' || symget('gopts') || ';';
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put / "The OUT=anno Annotate data set has 52 observations.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('method') = 'print' then put "The graphics stream file name is C:\Users\bkris2\AppData\Local\Temp\SAS Temporary Files\_TD11852_NUTVDIWIN104-34_\Prc2\plotit.ps.";
MPRINT(PLOTIT):   if 1 and upcase(getoption("STIMER")) eq "STIMER" and getoption('stimer') eq 'STIMER' then do;
MPRINT(PLOTIT):   time = datetime();
MPRINT(PLOTIT):   cum = put(time - 2025618523.479,6.1);
MPRINT(PLOTIT):   put 'The PLOTIT macro used ' cum "seconds to create OUT=anno.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   wrap: *------print a line, wrapped and indented------;
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   string = left(string);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   if len < 2 or string = ' ' or string = ';' then return;
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   do while(i < (len - 1) and not nlit);
MPRINT(PLOTIT):   string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   i = index(string,' ;');
MPRINT(PLOTIT):   if i then string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = 1;
MPRINT(PLOTIT):   end = 0;
MPRINT(PLOTIT):   indent = indent1 + 1;
MPRINT(PLOTIT):   do while(len > end);
MPRINT(PLOTIT):   string = left(substr(string,end + 1));
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   maxlen = 256 - indent;
MPRINT(PLOTIT):   if len > maxlen and not nlit then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   do while(end > 0 and not (substr(string,end,1) in (' ' ',')));
MPRINT(PLOTIT):   end = end - 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if len > maxlen then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   if nlit then end = nlit + 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else end = len;
MPRINT(PLOTIT):   str = substr(string,1,end);
MPRINT(PLOTIT):   put @indent str;
MPRINT(PLOTIT):   indent = indent2 + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
 
The following code will create the printer plot on which the graphical plot is based:
 
options nonumber ls=65 ps=45;
proc plot nolegend formchar='|----|+|---' data=preproc vtoh=2;
   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
        haxis=by 1 vaxis=by 1 box list=1
        placement=((h=2 -2 : s=right left) (v=1 -1 * h=0 -1 to -5 by alt));
   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
   label Dim2 = '#' Dim1 = '#';
   run; quit;
 
The plot was created with the following goptions:
 
goptions nodisplay hpos=76 vpos=29 hsize=8.33in vsize=6.24in cback=white device=GIF;
 
The OUT=anno Annotate data set has 52 observations.
The PLOTIT macro used 2.1 seconds to create OUT=anno.
MPRINT(PLOTIT):   *------produce the plot------;
MPRINT(PLOTIT):   proc ganno annotate=anno gout=WORK.Clus3 name="DISTANCE";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options LABEL;
The SAS System
 
MPRINT(PLOTIT):   *------restore options, quit------;
MPRINT(PLOTIT):   options NOTES missing=".";
MPRINT(EM_DIAGRAM):  ;
47515      goptions display;
MPRINT(EM_DIAGRAM):   goptions display;
47516      title;
MPRINT(EM_DIAGRAM):   title;
47517      filename gsasfile
47517    ! "\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspa
47517    ! ces\EMWS2\Clus3\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):    filename gsasfile
"\\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EMWS2\C
lus3\GRAPH\Distance.gif";
47518      goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback= white;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback=
white;
47519      proc greplay igout=WORK.Clus3 nofs;
MPRINT(EM_DIAGRAM):   proc greplay igout=WORK.Clus3 nofs;
NOTE: Building list of graphs from the catalog.
 
NOTE: Enter greplay commands or statements.
47520      replay DISTANCE;
MPRINT(EM_DIAGRAM):   replay DISTANCE;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this
      session.
NOTE: 15495 bytes written to
      \\uisnutvdiprof1a\redirected$\bkris2\Documents\ZetaProject\ZetaExploratoryAnalysis\Workspaces\EM
      WS2\Clus3\GRAPH\Distance.gif.
47521      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE GREPLAY used (Total process time):
      real time           0.26 seconds
      cpu time            0.23 seconds
 
 
47522      goptions reset=all;
MPRINT(EM_DIAGRAM):   goptions reset=all;
47523      filename gsasfile;
MPRINT(EM_DIAGRAM):   filename gsasfile;
NOTE: Fileref GSASFILE has been deassigned.
47524      proc datasets lib=EMWS2 nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS2 nolist;
47525      modify Clus3_DISTANCE;
MPRINT(EM_DIAGRAM):   modify Clus3_DISTANCE;
47526      rename _idvar_=_SEGMENT_;
MPRINT(EM_DIAGRAM):   rename _idvar_=_SEGMENT_;
NOTE: Renaming variable _idvar_ to _SEGMENT_.
MPRINT(EM_DIAGRAM):   run;
47527      run;
 
NOTE: MODIFY was successful for EMWS2.CLUS3_DISTANCE.DATA.
47528      quit;
MPRINT(EM_DIAGRAM):   quit;
The SAS System
 
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.64 seconds
      cpu time            0.35 seconds
 
 
47529      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47530      * Clus3: Creating data set for Input Mean report;
MPRINT(EM_DIAGRAM):   * Clus3: Creating data set for Input Mean report;
47531      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47532      data temp(drop=_type_ over_all);
MPRINT(EM_DIAGRAM):   data temp(drop=_type_ over_all);
47533      set EMWS2.Clus3_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_OUTSTAT;
47534      where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
MPRINT(EM_DIAGRAM):   where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
47535      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS2.CLUS3_OUTSTAT.
      WHERE _type_ in ('CLUS_MEAN', 'DMDB_MEAN');
NOTE: The data set WORK.TEMP has 5 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
47536      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
47537      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
47538      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 5 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
47539      proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
MPRINT(EM_DIAGRAM):   proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
47540      var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
47541      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.STDTEMP has 5 observations and 36 variables.
NOTE: The data set WORK.STAT has 10 observations and 36 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
The SAS System
 
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
47542      proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
MPRINT(EM_DIAGRAM):   proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN
COL4=MAX));
47543      where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
MPRINT(EM_DIAGRAM):   where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
47544      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.STAT.
      WHERE _type_ in ('LOCATION', 'P0', 'P100', 'SCALE');
NOTE: The data set WORK.TSTAT has 35 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.70 seconds
      cpu time            0.06 seconds
 
 
47545      data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
MPRINT(EM_DIAGRAM):   data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
47546      set tstat;
MPRINT(EM_DIAGRAM):   set tstat;
47547      if std ^in (0, .) then do;
MPRINT(EM_DIAGRAM):   if std ^in (0, .) then do;
47548      stdmin = abs((min-mean)/std);
MPRINT(EM_DIAGRAM):   stdmin = abs((min-mean)/std);
47549      stdmax = abs((max-mean)/std);
MPRINT(EM_DIAGRAM):   stdmax = abs((max-mean)/std);
47550      end;
MPRINT(EM_DIAGRAM):   end;
47551      if mean ^in(0, .) then cv = std/mean;
MPRINT(EM_DIAGRAM):   if mean ^in(0, .) then cv = std/mean;
47552      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 35 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
47553      proc sort data=tstat;
MPRINT(EM_DIAGRAM):   proc sort data=tstat;
47554      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47555      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 35 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
The SAS System
 
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
47556      proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
MPRINT(EM_DIAGRAM):   proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL
COL1=MEAN));
47557      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
47558      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.STDTEMP.
NOTE: The data set WORK.TSTDTEMP has 175 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.29 seconds
      cpu time            0.06 seconds
 
 
47559      proc sort data=tstdtemp;
MPRINT(EM_DIAGRAM):   proc sort data=tstdtemp;
47560      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47561      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 175 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set WORK.TSTDTEMP has 175 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
47562      data tstdtemp;
MPRINT(EM_DIAGRAM):   data tstdtemp;
47563      merge tstdtemp tstat;
MPRINT(EM_DIAGRAM):   merge tstdtemp tstat;
47564      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47565      STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
MPRINT(EM_DIAGRAM):   STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
47566      drop stdmin stdmax mean;
MPRINT(EM_DIAGRAM):   drop stdmin stdmax mean;
47567      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 175 observations read from the data set WORK.TSTDTEMP.
NOTE: There were 35 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTDTEMP has 175 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
The SAS System
 
47568      proc transpose data=EMWS2.Clus3_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME
47568    ! VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS2.Clus3_OUTVAR out=tempVar(drop=_LABEL_ rename=(
_NAME_=NAME VARIABLE=INPUT));
47569      var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
47570      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
47571      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
47572      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.CLUS3_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 35 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
47573      proc sort data=tempVar;
MPRINT(EM_DIAGRAM):   proc sort data=tempVar;
47574      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47575      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 35 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47576      data EMWS2.Clus3_INPUTMEAN(rename=(NAME=VARIABLE));
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_INPUTMEAN(rename=(NAME=VARIABLE));
47577      Length _SEGMENT_CHAR_ $7;
MPRINT(EM_DIAGRAM):   Length _SEGMENT_CHAR_ $7;
47578      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))"
47578    ! _SEGMENT_CHAR_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentId_vlabel,    NOQUOTE))" NAME =
47578    !  "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,     NOQUOTE))" INPUT =
47579         "%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel,        NOQUOTE))" LABEL =
47579    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_label_vlabel,        NOQUOTE))" CV =
47579    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_cv_vlabel,           NOQUOTE))" STDMEAN =
47580         "%sysfunc(sasmsg(sashelp.dmine, rpt_normmean_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Segment Name" _SEGMENT_CHAR_ = "Segment Id" NAME =
"Variable" INPUT = "Input" LABEL = "Label" CV = "Coefficient of Variation" STDMEAN = "Normalized
Mean";
47581      merge tempvar tstdtemp;
MPRINT(EM_DIAGRAM):   merge tempvar tstdtemp;
47582      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47583      if LABEL='' then LABEL=NAME;
The SAS System
 
MPRINT(EM_DIAGRAM):   if LABEL='' then LABEL=NAME;
47584      _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
MPRINT(EM_DIAGRAM):   _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
47585      if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
47586      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.TEMPVAR.
NOTE: There were 175 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set EMWS2.CLUS3_INPUTMEAN has 175 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
 
47587      proc sort data=EMWS2.Clus3_INPUTMEAN;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Clus3_INPUTMEAN;
47588      by descending cv;
MPRINT(EM_DIAGRAM):   by descending cv;
47589      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 175 observations read from the data set EMWS2.CLUS3_INPUTMEAN.
NOTE: The data set EMWS2.CLUS3_INPUTMEAN has 175 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.18 seconds
      cpu time            0.06 seconds
 
 
47590      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47591      * Clus3: Determining the important variables;
MPRINT(EM_DIAGRAM):   * Clus3: Determining the important variables;
47592      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
47593      %let _nobs = 0;
47594      data keepvars(rename=(NAME=INPUT));
MPRINT(EM_DIAGRAM):    data keepvars(rename=(NAME=INPUT));
47595      set EMWS2.Clus3_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
47596      if eof then call symput('_nobs', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   if eof then call symput('_nobs', strip(put(_N_, best.)));
47597      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS2.CLUS3_OUTIMPORT.
      WHERE IMPORTANCE>0.5;
NOTE: The data set WORK.KEEPVARS has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
The SAS System
 
 
47598      proc transpose data=EMWS2.Clus3_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME
47598    ! VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS2.Clus3_OUTVAR out=tempVar(drop=_LABEL_ rename=(
_NAME_=NAME VARIABLE=INPUT));
47599      var Age--T_PhysHlth;
MPRINT(EM_DIAGRAM):   var Age--T_PhysHlth;
47600      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
47601      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
47602      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.CLUS3_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 35 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
47603      proc sort data=keepvars;
MPRINT(EM_DIAGRAM):   proc sort data=keepvars;
47604      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
47605      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.KEEPVARS has 7 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
47606      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
47607      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
47608      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 35 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
47609      data vars;
MPRINT(EM_DIAGRAM):   data vars;
47610      merge tempvar keepvars(in=b);
MPRINT(EM_DIAGRAM):   merge tempvar keepvars(in=b);
The SAS System
 
47611      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
47612      if b then output;
MPRINT(EM_DIAGRAM):   if b then output;
47613      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable INPUT by input data sets. This might
         cause unexpected results.
NOTE: There were 35 observations read from the data set WORK.TEMPVAR.
NOTE: There were 7 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.VARS has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
47614      proc sort data=vars;
MPRINT(EM_DIAGRAM):   proc sort data=vars;
47615      by descending importance;
MPRINT(EM_DIAGRAM):   by descending importance;
47616      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK.VARS.
NOTE: The data set WORK.VARS has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
47617      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
47618      set vars;
MPRINT(EM_DIAGRAM):   set vars;
47619      if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
47620      else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
MPRINT(EM_DIAGRAM):   else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
47621      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK.VARS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * mergeVarMeansandClusLabel;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47622      *------------------------------------------------------------*;
47623      * mergeVarMeansandClusLabel;
47624      *------------------------------------------------------------*;
The SAS System
 
47625      data temp(keep=_SEGMENT_ &CLUS_PROFVARS);
MPRINT(EM_DIAGRAM):   data temp(keep=_SEGMENT_ BMI DiffWalk0 DiffWalk1 T_GenHlth T_PhysHlth HighBP0
HighBP1 NoDocbcCost0 NoDocbcCost1 T_Income);
47626      length _SEGMENT_ &CLUS_PROFVARS 8;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ BMI DiffWalk0 DiffWalk1 T_GenHlth T_PhysHlth HighBP0 HighBP1
NoDocbcCost0 NoDocbcCost1 T_Income 8;
47627      set EMWS2.Clus3_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS2.Clus3_OUTSTAT;
47628      where _type_ ='CLUS_MEAN';
MPRINT(EM_DIAGRAM):   where _type_ ='CLUS_MEAN';
47629      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.CLUS3_OUTSTAT.
      WHERE _type_='CLUS_MEAN';
NOTE: The data set WORK.TEMP has 4 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
47630      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
47631      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
47632      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 4 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
47633      data EMWS2.Clus3_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS2.Clus3_LABEL;
47634      merge EMWS2.Clus3_LABEL(keep=_SEGMENT_ LABEL) temp;
MPRINT(EM_DIAGRAM):   merge EMWS2.Clus3_LABEL(keep=_SEGMENT_ LABEL) temp;
47635      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
47636      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.CLUS3_LABEL.
NOTE: There were 4 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS2.CLUS3_LABEL has 4 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
